#    Copyright (C) 2006 Imperial College London and others.
#    
#    Please see the AUTHORS file in the main source directory for a full list
#    of copyright holders.
#
#    Prof. C Pain
#    Applied Modelling and Computation Group
#    Department of Earth Science and Engineering
#    Imperial College London
#
#    amcgsoftware@imperial.ac.uk
#    
#    This library is free software; you can redistribute it and/or
#    modify it under the terms of the GNU Lesser General Public
#    License as published by the Free Software Foundation,
#    version 2.1 of the License.
#
#    This library is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#    Lesser General Public License for more details.
#
#    You should have received a copy of the GNU Lesser General Public
#    License along with this library; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307
#    USA
SHELL = @SHELL@

PROGRAM	 = ./bin/@FLUIDITY@
FLDECOMP = ./bin/fldecomp

LIB_FLUIDITY = ./lib/lib@FLUIDITY@.a
SLIB_FLUIDITY = lib@FLUIDITY@.so

prefix  = @prefix@
FLUIDITY_ROOT=$(DESTDIR)@prefix@

FC      = @FC@
FCFLAGS = @FCFLAGS@

MPIF90  = @MPIF90@
MPICC   = @MPICC@
MPICXX  = @MPICXX@

CC	= @CC@
CFLAGS	= @CPPFLAGS@ @CFLAGS@

CXX	= @CXX@
CXXFLAGS= @CPPFLAGS@ @CXXFLAGS@ -I./include

LINKER  = @LINKER@ @LDFLAGS@

LIBS    = -L./lib -l@FLUIDITY@ @BLAS_LIBS@ @LIB_FEMDEM@ ./lib/libadaptivity.a \
           ./lib/libvtkfortran.a ./lib/libspatialindex.a ./lib/libspud.a ./lib/libjudy.a \
           @LIBS@

OBJS = $(shell find . -mindepth 2 -maxdepth 2 -name '*.c' -o -name '*.cpp' -o -name '*.[fF]' -o -name '*.F90' | grep -v ^./lib | xargs)
MAKE = @MAKE@ -s

AR = @AR@

ARFLAGS	= @ARFLAGS@

EVAL = scripts/silenteval

VERSION = $(shell bzr revision-info)

ifeq (@MBA2D@,yes)
LIBMBA2D = lib/libmba2d.a
endif
ifeq (@MBA3D@,yes)
LIBMBA3D = lib/libmba3d.a
endif
ifeq (@ALGENCAN@,yes)
LIBALGENCAN = lib/libalgencan.a
endif

# Thread count for make test.
THREADS=1

EXCLUDE_TAGS =
ifneq (@ZOLTAN@,yes)
	EXCLUDE_TAGS := $(EXCLUDE_TAGS) -e zoltan
endif
ifneq (@HAVE_ADJOINT@,yes)
	EXCLUDE_TAGS := $(EXCLUDE_TAGS) -e adjoint
endif

.SUFFIXES: .f90 .F90 .c .cpp .o .a

.cpp.o:
	@echo "        CXX $<"
	$(CXX) $(CXXFLAGS) -c $<

default: bin/@FLUIDITY@

sub_system: $(LIBMBA2D) $(LIBMBA3D) $(LIBALGENCAN)  @LIB_FEMDEM@ \
	lib/libadaptivity.a lib/libvtkfortran.a lib/libspatialindex.a \
	lib/libspud.a lib/libjudy.a
 
lib/libjudy.a:
	@echo '    MKDIR lib'; mkdir -p lib
	@cd libjudy; echo '    MAKE libjudy'; $(MAKE) > make.log ; $(MAKE) install >> make.log ; cd ..

lib/libmba2d.a:
	@echo '    MKDIR lib'; mkdir -p lib
	@cd libmba2d; echo '    MAKE libmba2d'; $(MAKE) ; cd ..

lib/libmba3d.a:
	@echo '    MKDIR lib'; mkdir -p lib
	@cd libmba3d; echo '    MAKE libmba3d'; $(MAKE) ; cd ..

lib/libalgencan.a:
	@echo '    MKDIR lib'; mkdir -p lib
	@cd libalgencan; echo '    MAKE libalgencan'; $(MAKE) ; cd ..

lib/libadaptivity.a:
	@echo '    MKDIR lib'; mkdir -p lib
	@BUILD_LIBADAPT@

lib/libvtkfortran.a:
	@echo '    MKDIR lib'; mkdir -p lib
	@cd libvtkfortran; echo '    MAKE libvtkfortran'; $(MAKE) 2>make.log 2>&1 ; cp libvtkfortran.a ../lib/; cp *.mod ../include/; cd ..

lib/libspatialindex.a:
	@echo '    MKDIR lib'; mkdir -p lib
	@cd @SPATIALINDEXDIR@ ; echo '    MAKE libspatialindex'; $(MAKE); $(MAKE) install >> make.log 2>&1

lib/libspud.a:
	@echo '    MKDIR lib'; mkdir -p lib
	@cd libspud;  echo '    MAKE libspud'; $(MAKE) ; $(MAKE) install; cp python/libspud.py ../python

libfemtools: sub_system
	@echo '    MKDIR lib'; mkdir -p lib
	@echo '    MAKE debug'
	@cd debug; $(MAKE)
	@echo '    MAKE libwm'
	@cd libwm; $(MAKE)
	@cd femtools; echo '    MAKE libfemtools'; $(MAKE) libfemtools ; cp libfemtools.a ../lib/; cd ..
ifeq (@FEMDEM@,yes)
@LIB_FEMDEM@:
	@echo '    MAKE 3dfemdem library'
	@cd @FLFEMDEM_PATH@;$(MAKE)
endif

bin/@FLUIDITY@: main.o lib/lib@FLUIDITY@.a
	@echo "BUILD fluidity"
	@echo "    MKDIR bin"
	@mkdir -p bin
	@echo "    LD $(PROGRAM)"
	@$(EVAL) $(LINKER) -o $(PROGRAM) main.o $(LIBS)

sw: bin/shallow_water
be: bin/burgers_equation
mp: bin/multiphase_prototype

bin/shallow_water: fluidity_library main/Shallow_Water.F90
	@cd main; $(MAKE) Shallow_Water.o
	@echo "BUILD shallow_water"
	@echo "    MKDIR bin"
	@mkdir -p bin
	@echo "    LD shallow_water"
	@$(EVAL) $(LINKER) -o bin/shallow_water main/Shallow_Water.o $(LIBS)

bin/shallow_water_legacy: fluidity_library main/Shallow_Water_Legacy.F90
	@cd main; $(MAKE) Shallow_Water_Legacy.o
	@echo "BUILD shallow_water_legacy"
	@echo "    MKDIR bin"
	@mkdir -p bin
	@echo "    LD shallow_water_legacy"
	@$(EVAL) $(LINKER) -o bin/shallow_water_legacy main/Shallow_Water_Legacy.o $(LIBS)

bin/burgers_equation: fluidity_library main/Burgers_Equation.F90
	@cd main; $(MAKE) Burgers_Equation.o
	@echo "BUILD burgers_equation"
	@echo "    MKDIR bin"
	@mkdir -p bin
	@echo "    LD burgers_equation"
	@$(EVAL) $(FC) -o bin/burgers_equation main/Burgers_Equation.o $(FCFLAGS) $(LIBS)

ifeq (@ENABLE_PSMILE@,yes)
LIBPSMILE=@FLPSMILE_PATH@/lib/libpsmile_oa4.MPI1.a @FLPSMILE_PATH@/lib/libcommon_oa4.a @FLPSMILE_PATH@/lib/libmpp_io.a -lxml2
bin/test_coupler: fluidity_library main/test_coupler.F90
	@cd main; $(MAKE) test_coupler.o
	@echo "BUILD test_coupler"
	@echo "    MKDIR bin"
	@mkdir -p bin
	@echo "    LD test_coupler"
	@$(EVAL) $(FC) -o bin/test_coupler main/test_coupler.o $(LIBPSMILE) $(FCFLAGS) $(LIBS)
else
bin/test_coupler:
	@echo "     Unable to build bin/test_coupler without psmile libraries"
	@echo "     Please reconfigure --with-psmile=/path/to/oasis4"
	exit 1
endif

bin/multiphase_prototype: fluidity_library
	@echo "    MAKE multiphase_prototype"
	@cd legacy_reservoir_prototype; $(MAKE)
	@echo "BUILD multiphase_prototype"
	@echo "    MKDIR legacy_reservoir_prototype"
	@mkdir -p bin
	@echo "    LD multiphase_prototype"
	@$(EVAL) $(LINKER) -o bin/multiphase_prototype legacy_reservoir_prototype/main.o $(FCFLAGS) $(LIBS)

bin/simple_shallow_water: fluidity_library main/Simple_Shallow_Water.F90
	@cd main; $(MAKE) Simple_Shallow_Water.o
	@echo "BUILD simple_shallow_water"
	@echo "    MKDIR bin"
	@mkdir -p bin
	@echo "    LD simple_shallow_water"
	@$(EVAL) $(LINKER) -o bin/simple_shallow_water main/Simple_Shallow_Water.o $(LIBS)

bin/form_pod_basis: fluidity_library reduced_modelling/Form_Pod_Basis_Main.F90
	@cd reduced_modelling; $(MAKE) Form_Pod_Basis_Main.o
	@echo "BUILD Form_Pod_Basis"
	@echo "    MKDIR bin"
	@mkdir -p bin
	@echo "    LD Form_Pod_Basis"
	@$(EVAL) $(LINKER) -o bin/form_pod_basis reduced_modelling/Form_Pod_Basis_Main.o $(LIBS)


static: fluidity_library

shared: lib/shared/$(SLIB_FLUIDITY).1

lib/shared/$(SLIB_FLUIDITY).1: fluidity_library 
	@echo "BUILD shared libfluidity"
	@rm -rf tmp
	@mkdir -p tmp lib/shared
	@cp $(LIB_FLUIDITY) tmp
	@cd tmp; ar x lib@FLUIDITY@.a; rm lib@FLUIDITY@.a; cd ..
	@echo "    LD lib@FLUIDITY@.so"
	@$(EVAL) $(LINKER) -shared -Wl,-soname,$(SLIB_FLUIDITY).1 -o lib/shared/$(SLIB_FLUIDITY).1 tmp/* -L./lib -lvtkfortran 
	@rm -rf tmp
	@cd lib/shared; ln -sf $(SLIB_FLUIDITY).1 $(SLIB_FLUIDITY); cd ../..

fltools: fluidity_library
	@$(MAKE) fldecomp
	@echo "BUILD fluidity tools"
	@cd tools; $(MAKE)
	@echo "    MAKE climatology"
	@cd climatology; $(MAKE)

.PHONY:manual

manual:
	@cd manual; $(MAKE)

python_build:
ifeq (@HAVE_PYTHON@,yes)
	@echo "    MAKE python"
	@cd python; python setup.py build > build.log 2>&1
	@cd python/fluidity; find ../build/lib* -name '*.so' -exec ln -sf {} . \;
endif

python_clean:
	@echo "    CLEAN python"
	@cd python; rm -rf build
	@cd python/fluidity; find . -type l -name '*.so' -exec rm -f {} \;

fluidity_library: lib/lib@FLUIDITY@.a
lib/lib@FLUIDITY@.a: $(OBJS) python_build sub_system 
	@echo "DEFINE __FLUIDITY_VERSION__"
	@grep "$(VERSION)" include/confdefs.h >/dev/null 2>&1 || (echo "#undef __FLUIDITY_VERSION__" >> include/confdefs.h && echo "#define __FLUIDITY_VERSION__ \"$(VERSION)\"" >> include/confdefs.h)
	@echo "BUILD libfluidity"
	@echo "    MKDIR lib"
	@mkdir -p lib
	@echo "    MAKE debug"
	@cd debug; 	$(MAKE)
	@echo '    MAKE libwm'
	@cd libwm; $(MAKE)
	@echo "    MAKE femtools"
	@cd femtools;	$(MAKE)
	@echo "    MAKE bathymetry"
	@cd bathymetry; $(MAKE)
	@echo "    MAKE ocean_forcing"
	@cd ocean_forcing; $(MAKE)
ifeq (@HYPERLIGHT@,yes)
	@echo "    MAKE hyperlight"
	@cd hyperlight; $(MAKE)
endif
	@echo "    MAKE sediments"
	@cd sediments; $(MAKE)
	@echo "    MAKE parameterisation"
	@cd parameterisation; $(MAKE)
	@echo "    MAKE forward_interfaces"
	@cd forward_interfaces;	$(MAKE)
	@echo "    MAKE horizontal_adaptivity"
	@cd horizontal_adaptivity;   	$(MAKE)
	@echo "    MAKE preprocessor"
	@cd preprocessor; $(MAKE)
	@echo "    MAKE error_measures"
	@cd error_measures;   	$(MAKE)
	@echo "    MAKE decomp"
	@cd decomp;   	$(MAKE)
	@echo "    MAKE assemble"
	@cd assemble;   	$(MAKE)
	@echo "    MAKE diagnostics"
	@cd diagnostics;   	$(MAKE)
	@echo "    MAKE radiation"
	@cd radiation; $(MAKE)
	@echo "    MAKE reduced_modelling"
	@cd reduced_modelling;   	$(MAKE)
	@echo "    MAKE adjoint"
	@cd adjoint; $(MAKE)
	@echo "    MAKE main"
	@cd main; $(MAKE)
	@echo "    MAKE options_check"
	@./scripts/make_check_options
	@cd preprocessor; $(MAKE) check_options.o
	@echo "    MAKE register_diagnostics"
	@./scripts/make_register_diagnostics
	@cd preprocessor; $(MAKE) register_diagnostics.o

fldecomp: fluidity_library 
	@echo "BUILD fldecomp"
	@echo "    MKDIR bin"
	@mkdir -p bin
	@cd fldecomp; $(MAKE)

.PHONY: doc

doc:
	@mkdir -p doc
	./scripts/f90_extract_docs --dir=doc --project=fluidity */*.F90 --cppflags="$(FCLAGS) -I./include"
	@cp include/fortran.css doc/

all:
	$(MAKE) default
	$(MAKE) fltools

clean-light:
	@echo "    CLEAN debug"
	@cd debug; $(MAKE) clean
	@echo "    CLEAN libwm"
	@cd libwm; $(MAKE) clean
	@echo "    CLEAN femtools"
	@cd femtools; $(MAKE) clean
	@echo "    CLEAN femtools/tests"
	@cd femtools/tests; $(MAKE) clean
	@echo "    CLEAN forward_interfaces"
	@cd forward_interfaces; $(MAKE) clean
	@echo "    CLEAN parameterisation"
	@cd parameterisation; $(MAKE) clean
	@echo "    CLEAN sediments"
	@cd sediments; $(MAKE) clean
	@echo "    CLEAN parameterisation/tests"
	@cd parameterisation/tests; $(MAKE) clean
	@echo "    CLEAN radiation"
	@cd radiation; $(MAKE) clean
	@echo "    CLEAN radiation/tests"
	@cd radiation/tests; $(MAKE) clean
	@echo "    CLEAN assemble"
	@cd assemble;   $(MAKE) clean
	@echo "    CLEAN assemble/tests"
	@cd assemble/tests;   $(MAKE) clean
	@echo "    CLEAN diagnostics"
	@cd diagnostics;   $(MAKE) clean
	@echo "    CLEAN decomp"
	@cd decomp;   $(MAKE) clean
	@echo "    CLEAN preprocessor"
	@cd preprocessor; $(MAKE) clean
	@echo "    CLEAN error_measures/tests"
	@cd error_measures/tests;   $(MAKE) clean
	@echo "    CLEAN error_measures"
	@cd error_measures;   $(MAKE) clean
	@echo "    CLEAN horizontal_adaptivity"
	@cd horizontal_adaptivity;   $(MAKE) clean
	@echo "    CLEAN horizontal_adaptivity/tests"
	@cd horizontal_adaptivity/tests;   $(MAKE) clean
	@echo "    CLEAN tools"
	@cd tools;    $(MAKE) clean
	@echo "    CLEAN bathymetry"
	@cd bathymetry;  $(MAKE) clean
	@echo "    CLEAN ocean_forcing"
	@cd ocean_forcing;  $(MAKE) clean
	@cd ocean_forcing/tests;   $(MAKE) clean
	@echo "    CLEAN fldecomp"
	@cd fldecomp;	$(MAKE) clean
ifeq (@HYPERLIGHT@,yes)
	@echo "    CLEAN hyperlight"
	@cd hyperlight; $(MAKE) clean
endif
	@cd climatology;  $(MAKE) clean
	@echo "    CLEAN climatology"
	@echo "    CLEAN reduced_modelling"
	@cd reduced_modelling; $(MAKE) clean
	@echo "    CLEAN adjoint"
	@cd adjoint; $(MAKE) clean
	@echo "    CLEAN main"
	@cd legacy_reservoir_prototype; $(MAKE) clean
	@echo "    CLEAN legacy_reservoir_prototype"
	@cd main; $(MAKE) clean
	@echo "    CLEAN qg_strat"
	@cd qg_strat; $(MAKE) clean
	@echo "    CLEAN qg_strat/unittests"
	@cd qg_strat/unittests; $(MAKE) clean
	@rm -fr bin/* lib

clean: clean-light clean-test python_clean
	@echo "    CLEAN libvtkfortran"
	@cd libvtkfortran; $(MAKE) clean
	@echo "    CLEAN libjudy"
	@cd libjudy; $(MAKE) clean >> make.log 2>&1
	@echo "    CLEAN libspud"
	@cd libspud; $(MAKE) clean
	@echo "    CLEAN libspatialindex"
	@cd @SPATIALINDEXDIR@; $(MAKE) clean >> make.log
	@echo "    CLEAN libmba2d"
	@cd libmba2d; $(MAKE) clean
	@echo "    CLEAN libmba3d"
	@cd libmba3d; $(MAKE) clean
	@echo "    CLEAN libalgencan"
	@cd libalgencan; $(MAKE) clean
	@echo "    CLEAN libwm"
	@cd libwm; $(MAKE) clean
	@CLEAN_LIBADAPT@
	@rm -fr doc include/*.mod *.cache core *.o config.status
	@find ./ \( -name work.pc \) -exec rm {} \;
	@find ./ \( -name work.pcl \) -exec rm {} \;

clean-test:      
	@echo "    CLEAN tests"
	@cd tests; ../tools/testharness.py --clean >/dev/null

test: fltools bin/@FLUIDITY@ bin/shallow_water serialtest bin/burgers_equation

serialtest:
ifeq (@MBA2D@,yes)
        ifeq (@ZOLTAN@,yes)
	        @cd tests; ../tools/testharness.py -l short -p serial -e nozoltan -n $(THREADS)
        else
	        @cd tests; ../tools/testharness.py -l short -p serial -e zoltan -n $(THREADS)
        endif
else
        ifeq (@ZOLTAN@,yes)
	        @cd tests; ../tools/testharness.py -l short -p serial -e "2dadapt nozoltan" -n $(THREADS)
        else
	        @cd tests; ../tools/testharness.py -l short -p serial -e "2dadapt zoltan" -n $(THREADS)
        endif
endif

mediumtest: bin/burgers_equation
	@cd tests; ../tools/testharness.py -l medium $(EXCLUDE_TAGS) -n $(THREADS)

mediumzoltantest:
ifeq (@ZOLTAN@,yes)
	@cd tests; ../tools/testharness.py -l medium -t zoltan -n $(THREADS)
else
	@echo "Warning: build did not have zoltan enabled, make mediumzoltantest will not run" -n $(THREADS)
endif

setuputs: 
	@echo "SETUP tests"
	@echo "    RMDIR bin/tests"
	@rm -rf bin/tests
	@echo "    MKDIR bin/tests"
	@mkdir -p bin/tests
	@ln -sf ../../tests/data bin/tests/data


build_unittest: fluidity_library libfemtools setuputs
	@echo "    UNITTEST libspud"
	@cd libspud/src/tests; $(MAKE) test-binaries; find bin/* -maxdepth 1 -type f -exec ln -sf ../../libspud/src/tests/{} ../../../bin/tests \; 
	@echo "    UNITTEST error_measures"
	@cd error_measures/tests; $(MAKE) unittest
	@echo "    UNITTEST horizontal_adaptivity"
	@cd horizontal_adaptivity/tests; $(MAKE) unittest
	@echo "    UNITTEST femtools"
	@cd femtools/tests; $(MAKE) unittest
	@echo "    UNITTEST parameterisation"
	@cd parameterisation/tests; $(MAKE) unittest
	@echo "    UNITTEST assemble"
	@cd assemble/tests; $(MAKE) unittest
	@echo "    UNITTEST adjoint"
	@cd adjoint/tests; $(MAKE) unittest
	@echo "    UNITTEST ocean_forcing"
	@cd ocean_forcing/tests; $(MAKE) unittest
	@echo "    UNITTEST radiation"
	@cd radiation/tests; $(MAKE) unittest


unittest: build_unittest
	@echo "RUN bin/tests"
	@tools/unittestharness.py bin/tests

gcov:
	@echo "RUN gcov"
	@scripts/options_test_options_report.sh  .

schema:
	@echo "Rebuilding schema fluidity_options.rng"
	@./bin/spud-preprocess schemas/fluidity_options.rnc

.PHONY: makefiles

makefiles: 
ifneq (@GFORTRAN_4_5_OR_NEWER@,yes)
	@echo "makefile dependency generation requires gfortran (>=4.5)"
	@false
endif
ifneq (@HAVE_ZOLTAN@,yes)
	@echo "makefile dependency generation requires zoltan"
	@false
endif
ifneq (@HAVE_ADJOINT@,yes)
	@echo "makefile dependency generation requires adjoint"
	@false
endif
	@echo "    Generating debug dependencies"
	@cd debug; 	../scripts/create_makefile.py
	@echo "    Generating libwm dependencies"
	@cd libwm; ../scripts/create_makefile.py
	@echo "    Generating femtools dependencies"
	@cd femtools;	../scripts/create_makefile.py --exclude \
	"Refcount_interface_templates.F90 Refcount_templates.F90"
	@echo "    Generating bathymetry dependencies"
	@cd bathymetry; ../scripts/create_makefile.py
	@echo "    Generating ocean_forcing dependencies"
	@cd ocean_forcing; ../scripts/create_makefile.py
	@echo "    Generating sediments dependencies"
	@cd sediments; ../scripts/create_makefile.py
	@echo "    Generating parameterisation dependencies"
	@cd parameterisation; ../scripts/create_makefile.py
	@echo "    Generating forward_interfaces dependencies"
	@cd forward_interfaces;	../scripts/create_makefile.py
	@echo "    Generating horizontal_adaptivity dependencies"
	@cd horizontal_adaptivity;   	../scripts/create_makefile.py
	@echo "    Generating preprocessor dependencies"
	@cd preprocessor; ../scripts/create_makefile.py --exclude \
	"register_diagnostics.F90 check_options.F90"
	@echo "    Generating error_measures dependencies"
	@cd error_measures;   	../scripts/create_makefile.py
	@echo "    Generating decomp dependencies"
	@cd decomp;   	../scripts/create_makefile.py
	@echo "    Generating assemble dependencies"
	@cd assemble;   	../scripts/create_makefile.py
	@echo "    Generating diagnostics dependencies"
	@cd diagnostics;   	../scripts/create_makefile.py --exclude \
	"Diagnostic_Fields_Interfaces.F90 Diagnostic_Fields_New.F90"
	@cd diagnostics;   	$(MAKE) Diagnostic_Fields_Interfaces.o \
	Diagnostic_Fields_New.o
	@echo "    Generating radiation dependencies"
	@cd radiation; ../scripts/create_makefile.py
	@echo "    Generating reduced_modelling dependencies"
	@cd reduced_modelling;   	../scripts/create_makefile.py
	@echo "    Generating adjoint dependencies"
	@cd adjoint; ../scripts/create_makefile.py
	@echo "    Generating main dependencies"
	@cd main; ../scripts/create_makefile.py --exclude test_coupler.F90
