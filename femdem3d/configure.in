#    Copyright (C) 2006 Imperial College London and others.
#
#    Please see the AUTHORS file in the main source directory for a full list
#    of copyright holders.
#
#    Prof. C Pain
#    Applied Modelling and Computation Group
#    Department of Earth Science and Engineering
#    Imperial College London
#
#    C.Pain@Imperial.ac.uk
#
#    This library is free software; you can redistribute it and/or
#    modify it under the terms of the GNU Lesser General Public
#    License as published by the Free Software Foundation,
#    version 2.1 of the License.
#
#    This library is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#    Lesser General Public License for more details.
#
#    You should have received a copy of the GNU Lesser General Public
#    License along with this library; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307
#    USA

dnl Process this file with autoconf to produce a configure script.
AC_INIT(source/Makefile.in)
AC_CONFIG_HEADERS(include/config.h)

echo "Hostname: `hostname`"

# Store enviroment variables
env_f77="${F77}"
env_fflags="${FFLAGS}"
env_flibs="${FLIBS}"

env_fc="${FC}"
env_fcflags="${FCFLAGS}"
env_fclibs="${FCLIBS}"
env_cflags="${CFLAGS}"
env_cxxflags="${CXXFLAGS}"

env_libs="${LIBS}"

# This is to get around some odd behavious of some fortran compilers
FFLAGS="$FFLAGS -I/usr/include"
FCFLAGS="$FCFLAGS -I/usr/include"

#
# Name femdem
#
AC_ARG_ENABLE(debugging,
[AC_HELP_STRING([--enable-debugging],
[turns on debugging flags])])
       
FEMDEM="femdem"
FLADJOINT="fladjoint"
B3D="b3d"

if test "$enable_debugging" = "yes" ; then
  FEMDEM="$FEMDEM-debug"
  FLADJOINT="$FLADJOINT-debug"
fi

# Check system type
AC_CANONICAL_HOST

# Find compilers
AC_MSG_NOTICE([*** Fishing for legacy fortran compiler.])
AC_PROG_F77(ifort ifc efc sunf95 gfortran pgf95 pathf95 g95 f90,,f90,$PATH)
AC_F77_LIBRARY_LDFLAGS
fcompiler=`basename $F77`

AC_MSG_NOTICE([*** Fishing for modern Fortran compiler])
AC_PROG_FC(ifort ifc efc sunf95 gfortran pgf95 pathf95 g95 f90,,f90,$PATH)
AC_FC_LIBRARY_LDFLAGS
fccompiler=`basename $FC`

if test "$fcompiler" = "sunf95" ; then
    MODINC_FLAG="-M"
    FFLAGS="-M../include $FFLAGS"
    FCFLAGS="-M../include $FCFLAGS"
else
    MODINC_FLAG="-I"
fi

if test "$F77" = "$FC" ; then
    smart_fortran="yes"
    AC_MSG_NOTICE([*** Assuming that $FC can process both free and fixed form fortran files.])
else
    AC_MSG_NOTICE([*** Assuming that $FC cannot process both free and fixed form fortran files (silly fortran).])
    smart_fortran="no"
fi

AC_PROG_CC(icc ecc suncc pgcc gcc cc)
AC_PROG_CXX(icpc icc ecc sunCC pgCC g++ CC)
AC_PROG_CPP
LINKER=$CXX

AC_LONG_64_BITS

# Find fortran libraries required when linking with C++ main.

AC_F77_LIBRARY_LDFLAGS
AC_FC_LIBRARY_LDFLAGS

AC_F77_WRAPPERS

# Find python to link against.
AC_ARG_ENABLE(python,
[AC_HELP_STRING([--enable-python],
[embed python in femdem for generic functions.])])

if test "$enable_python" != "no"
    then
    mycppflag=$CPPFLAGS
    AC_PYTHON_DEVEL
    CPPFLAGS=$mycppflag
    # Save variables...
    if test "$pythonexists" = "yes";
	then
	LIBS="$LIBS $PYTHON_LDFLAGS $PYTHON_EXTRA_LDFLAGS $PYTHON_EXTRA_LIBS"
	FLIBS="$FLIBS $PYTHON_LDFLAGS $PYTHON_EXTRA_LDFLAGS $PYTHON_EXTRA_LIBS"
        CXXFLAGS="$CXXFLAGS -DHAVE_PYTHON $PYTHON_CPPFLAGS"
        CFLAGS="$CFLAGS -DHAVE_PYTHON $PYTHON_CPPFLAGS"
        FFLAGS="$FFLAGS -DHAVE_PYTHON"	
        FCFLAGS="$FCFLAGS -DHAVE_PYTHON"	
    fi
fi

# Find a library which will give us blas and lapack routines
AC_LANG_PUSH([C])
found_blas="no"
if test -z "$with_lapack" -a -z "$with_blas" && \
   test \( "$fcompiler" = "ifc" \) -o \( "$fcompiler" = "ifort" \) -o \( "$fcompiler" = "efc" \)
    then
    AC_MSG_NOTICE([Appear to be using Intel compiler suite. Check if MKL is also available.])
    for i in `echo $LD_LIBRARY_PATH | sed -e 's/:/ /g'`
      do
      echo "looking in $i"
      if test \( -f $i/libmkl.a \) -o \( -f $i/libmkl.so \)
      then
          AC_MSG_NOTICE([Will look in $i for MKL.])
      LIBS="$LIBS -L$i"
      LAPACK_LIBS="-L$i $LAPACK_LIBS"
      fi
    done
    ACX_BLAS([found_blas="yes"],[found_blas="no"])
elif  test "$fcompiler" = "pgf90"
    then
    AC_MSG_NOTICE([Appear to be using Portland Group compiler suite. Check if ACML is also available.])
    AC_CHECK_LIB(acml, dgesv, [found_blas=yes], [found_blas=no])

elif test "$fcompiler" = "sunf95"
    then
    LIBS="$LIBS -lfui -lfai -lfsu -lmtsk -lpthread -lm"
    AC_MSG_NOTICE([Appear to be using Sun Studio compiler suite. Check if Sun Performance Library is also available.])
    AC_CHECK_LIB(sunperf, dgesv, [found_blas=yes ; acx_blas_ok=yes], [found_blas=no])
fi

if test "$found_blas" = "no"
    then
    AC_LANG_PUSH([Fortran 77])
    AC_MSG_NOTICE([checking the position of the stars to help find a versions of BLAS])
    ACX_BLAS([],[AC_MSG_ERROR("Cannot identify BLAS. Check that it is installed.")])
fi
AC_LANG_PUSH([Fortran 77])
ACX_LAPACK([],[AC_MSG_ERROR("Cannot identify LAPACK. Check that it is installed.")])

FLIBS=`echo $FLIBS | sed 's/)//g'` 

# Check for standard libraries
AC_LANG_PUSH([C])
AC_CHECK_LIB(stdc++,main,,)
AC_CHECK_LIB(m,main,,)
AC_CHECK_LIB(pthread,main,,)
AC_CHECK_LIB(udunits,utInit,,)

LIBS="$LAPACK_LIBS $BLAS_LIBS $LIBS $FCLIBS $FLIBS"

AC_SUBST(LAPACK_LIBS)
AC_SUBST(BLAS_LIBS)

LINKER=$CXX

AC_ARG_ENABLE(shared,
[AC_HELP_STRING([--enable-shared],
[Compile objects with -fPIC to enable the 'make shared' target.])])

if test "$enable_shared" = "yes" ; then
  PIC_FLAG="-fPIC"
  FFLAGS="$FFLAGS $PIC_FLAG"
  FCFLAGS="$FCFLAGS $PIC_FLAG"
  CFLAGS="$CFLAGS $PIC_FLAG"
  CXXFLAGS="$CXXFLAGS $PIC_FLAG"
else
  PIC_FLAG=""
fi

##
## what compiler options work
##
if test "$FC" = "g95"; then
    FFLAGS="-ffast-math -fno-second-underscore $FFLAGS"
    FCFLAGS="-ffast-math -fno-second-underscore $FCFLAGS"
fi

if test "$FC" = "gfortran"; then
    if test "$enable_debugging" = "yes" ; then
	FFLAGS="-frecord-marker=4 $FFLAGS"
	FCFLAGS="-frecord-marker=4 $FCFLAGS"
    else
	FFLAGS="-ffast-math -frecord-marker=4 $FFLAGS"
	FCFLAGS="-ffast-math -frecord-marker=4 $FCFLAGS"
    fi
    cat >> confdefs.h << EOF
#define USING_GFORTRAN 1
EOF
fi

AC_LANG_PUSH(Fortran 77)
AC_MSG_CHECKING([how do we get fortran 77 to allow long lines])
old_FLAGS="$FFLAGS"
extended_source_flag=none
AC_TRY_COMPILE([],
  [
       PRINT*, "hello world                                                                                      "],
  [
  AC_MSG_RESULT(no extra flags required)
  extended_source_flag=happy
  ],[])

if test "$extended_source_flag" != happy ; then
if test "$extended_source_flag" = none ; then
  FFLAGS="-extend_source"
  AC_TRY_COMPILE([],
  [
       PRINT*, "hello world                                                                                      "],
  [
  extended_source_flag=$FFLAGS
  AC_MSG_RESULT([$FFLAGS])
  FFLAGS="$old_FLAGS $FFLAGS"
  ],[])
fi
if test "$extended_source_flag" = none ; then
  FFLAGS="-132"
  AC_TRY_COMPILE([],
  [
       PRINT*, "hello world                                                                                      "],
  [
  extended_source_flag=$FFLAGS
  AC_MSG_RESULT([$FFLAGS])
  FFLAGS="$old_FLAGS $FFLAGS"
  ],[])
fi
if test "$extended_source_flag" = none ; then
  FFLAGS="-ffree-line-length-none -ffixed-line-length-none"
  AC_TRY_COMPILE([],
  [
       PRINT*, "hello world                                                                                      "],
  [
  extended_source_flag=$FFLAGS
  AC_MSG_RESULT([$FFLAGS])
  FFLAGS="$old_FLAGS $FFLAGS"
  ],[])
fi
if test "$extended_source_flag" = none ; then
  FFLAGS="-ffixed-line-length-huge -ffree-line-length-huge"
  AC_TRY_COMPILE([],
  [
       PRINT*, "hello world                                                                                      "],
  [
  extended_source_flag=$FFLAGS
  AC_MSG_RESULT([$FFLAGS])
  FFLAGS="$old_FLAGS $FFLAGS"
  ],[])
fi
if test "$extended_source_flag" = none ; then
  FFLAGS="-ffixed-line-length-132 -ffree-line-length-huge"
  AC_TRY_COMPILE([],
  [
       PRINT*, "hello world                                                                                      "],
  [
  extended_source_flag=$FFLAGS
  AC_MSG_RESULT([$FFLAGS])
  FFLAGS="$old_FLAGS $FFLAGS"
  ],[])
fi
if test "$extended_source_flag" = none ; then
  FFLAGS="-ffixed-line-length-132"
  AC_TRY_COMPILE([],
  [
       PRINT*, "hello world                                                                                      "],
  [
  extended_source_flag=$FFLAGS
  AC_MSG_RESULT([$FFLAGS])
  FFLAGS="$old_FLAGS $FFLAGS"
  ],[])
fi
if test "$extended_source_flag" = none ; then
  FFLAGS="-Mextend"
  AC_TRY_COMPILE([],
  [
       PRINT*, "hello world                                                                                      "],
  [
  extended_source_flag=$FFLAGS
  AC_MSG_RESULT([$FFLAGS])
  FFLAGS="$old_FLAGS $FFLAGS"
  ],[])
fi
if test "$extended_source_flag" = none ; then
  FFLAGS="-qfixed=256"
  AC_TRY_COMPILE([],
  [
       PRINT*, "hello world                                                                                      "],
    [
    extended_source_flag=$FFLAGS
    AC_MSG_RESULT([$FFLAGS])
    FFLAGS="$old_FLAGS $FFLAGS"
    ],[])
fi
if test "$extended_source_flag" = none ; then
  FFLAGS="-e"
  AC_TRY_COMPILE([],
  [
       PRINT*, "hello world                                                                                      "],
    [
    extended_source_flag=$FFLAGS
    AC_MSG_RESULT([$FFLAGS])
    FFLAGS="$old_FLAGS $FFLAGS"
    ],[])
fi

if test "$extended_source_flag" = none ; then
  AC_MSG_RESULT([we cannot])
else
  FCFLAGS="$FCFLAGS $extended_source_flag"
fi
fi

AC_LANG_POP([Fortran 77])

AC_PROG_INSTALL
AC_CHECK_PROG(MAKE, gmake, gmake, make, $PATH)

# Set default for ARFLAGS, since autoconf does not have a macro for
# it. This allows people to set it when running configure or make.
AC_CHECK_PROG(AR, ar, ar, ,$PATH)
test -n "$ARFLAGS" || ARFLAGS="cr"
AC_PROG_RANLIB

AC_ARG_ENABLE(verbose,
[AC_HELP_STRING([--enable-verbose],
[turns on super verbosity])])

if test "$enable_verbose" = "yes" ; then
cat >> confdefs.h << EOF
#define VERBOSE_MESSAGES 1
EOF
fi

if test "$enable_debugging" = "yes" ; then
  CFLAGS="-g -O0 `echo $CFLAGS | sed 's/-O2//g'`"
  CXXFLAGS="-g -O0 `echo $CXXFLAGS | sed 's/-O2//g'`"
  FFLAGS="-g -O0 `echo $FFLAGS | sed 's/-O2//g'`"
  FCFLAGS="-g -O0 `echo $FCFLAGS | sed 's/-O2//g'`"
cat >> confdefs.h << EOF
#define DDEBUG 1
EOF

  if test "$fcompiler" = "ifort" ; then
    FFLAGS="-C -traceback -check nooutput_conversion -check noarg_temp_created ${FFLAGS}"
    FCFLAGS="-C -traceback -check nooutput_conversion -check noarg_temp_created  ${FCFLAGS}"
    CFLAGS="-fno-omit-frame-pointer ${CFLAGS}"
    CXXFLAGS="-fno-omit-frame-pointer ${CXXFLAGS}"
  elif test "$fcompiler" = "gfortran" ; then
    FFLAGS="-fbounds-check -Wall ${FFLAGS}"
    FCFLAGS="-fbounds-check -Wall -Wimplicit-interface ${FCFLAGS}"
    CFLAGS="-fbounds-check -Wall ${CFLAGS}"
    CXXFLAGS="-fbounds-check -Wall ${CXXFLAGS}"
    LDFLAGS="-rdynamic ${LDFLAGS}"
  elif test "$fcompiler" = "g95" ; then
    FFLAGS="-fbounds-check -ftrace=full ${FFLAGS}"
    FCFLAGS="-fbounds-check -ftrace=full ${FCFLAGS}"
  elif test "$fcompiler" = "sunf95" ; then
    FFLAGS="-C -ftrap=invalid -fpover ${FFLAGS}"
    FCFLAGS="-C -ftrap=invalid -fpover ${FCFLAGS}"
    CFLAGS="-ftrap=invalid ${CFLAGS}"
    CXXFLAGS="-ftrap=invalid ${CXXFLAGS}"
  else
    FFLAGS="-C ${FFLAGS}"
    FCFLAGS="-C ${FCFLAGS}"
  fi

else
    AC_MSG_NOTICE([Setting optimisation flags for $F77])
    cat >> confdefs.h << EOF
#define NDEBUG 1
EOF
    OPTIMIZATION_FFLAGS="$OPTIMIZATION_FFLAGS -O3"
fi

FFLAGS="$FFLAGS $OPTIMIZATION_FFLAGS"
FCFLAGS="$FCFLAGS $OPTIMIZATION_FFLAGS"

if test "$FC" = "ifc" ; then
  FFLAGS="-implicitnone -132 -w95 $FFLAGS"
  FCFLAGS="-implicitnone -w95 $FCFLAGS"
fi

##########################################
# Are we building FETCH
##########################################
AC_ARG_WITH(event,
    [AC_HELP_STRING([--with-event@<:@=event_library@:>@],
        [specify the event library that should be used to compile FETCH])])
if test -n "$with_event" ; then
    if test -f "$with_event" ; then
    LIBFETCH="${with_event}"
    else
    AC_MSG_ERROR([No such event library ${with_event}])
    fi
    enable_mpi="no"
    with_PETSc="no"
fi

##########################################
# Adjoint model
##########################################

AC_ARG_ENABLE(adjoint,
[AC_HELP_STRING([--enable-adjoint],
[turns on complilation of the adjoint model])])

if test "$enable_adjoint" = "yes" ; then
   ADJOINT="yes"
else
   ADJOINT=""
fi

##########################################
# Adjoint model
##########################################

AC_ARG_ENABLE(adjoint,
[AC_HELP_STRING([--enable-adjoint],
[turns on complilation of the adjoint model])])

if test "$enable_adjoint" = "yes" ; then
   ADJOINT="yes"
else
   ADJOINT=""
fi

# save compiler name for libadapt before it's changed by MPI stuff
saved_FC="${FC}"
saved_F77="${F77}"

##########################################
# MPI
##########################################
check_for_mpich=""

AC_LANG(C)
AC_ARG_ENABLE(mpi,
[AC_HELP_STRING([--enable-mpi],
[turns on MPI support])])

# various synonyms accepted to disable MPI
if test "$with_mpi" = no ; then enable_mpi=no; fi
if test "$with_MPI" = no ; then enable_mpi=no; fi
if test "$enable_MPI" = no ; then enable_mpi=no; fi
if test "$enable_mpi" != "no" ; then
  AC_CHECK_PROGS(MPIF90, mpif90 mpf90, $FC, $PATH)
  if test "$smart_fortran" = "yes" ; then
    MPIF77=$MPIF90
  else
    AC_CHECK_PROGS(MPIF77, mpif77 mpf77,       $F77, $PATH)
  fi
  AC_CHECK_PROGS(MPICC,  mpicc mpcc,        $CC,  $PATH)
  AC_CHECK_PROGS(MPICXX, mpicxx mpiCC mpCC, $CXX, $PATH)

  F77=$MPIF77
  FC=$MPIF90
  CC=$MPICC
  CXX=$MPICXX

  AC_MSG_CHECKING([checking if we link using -lmpi])
  LIBS_bck="$LIBS"
  LIBS="-lmpi"
  AC_TRY_LINK([
  #include <mpi.h>
  ],[
  int flag;
  MPI_Initialized(&flag);
  ],[
  AC_MSG_RESULT([yes])
  LIBS="$LIBS $LIBS_bck"
  mpi="yes"
  ],[
  AC_MSG_RESULT([no])
  LIBS="$LIBS_bck"
  check_for_mpich="yes"
  ])
else
  AC_MSG_WARN([mpi disabled])
  MPIF77=$F77
  MPIF90=$FC
  MPICC=$CC
  MPICXX=$CXX
fi

if test "$check_for_mpich" = "yes" ; then
  AC_MSG_CHECKING([checking if we can compile using without using -lmpi])
  LIBS_bck="$LIBS"
  LIBS="$MPICH_LIBS"


  CPPFLAGS_bck="$CPPFLAGS"
  CPPFLAGS="$CPPFLAGS $MPICH_INCLUDES"

  AC_TRY_LINK([
  #include <mpi.h>
  ],[
  int flag;
  MPI_Initialized(&flag);
  ],[
  AC_MSG_RESULT([yes])
  LIBS="$LIBS $LIBS_bck"
  mpi="yes"
  ],[
  AC_MSG_RESULT([no])
  LIBS="$LIBS_bck"
  CPPFLAGS="$CPPFLAGS_bck"
  ])
fi

# should this go inside the "$mpi" = "yes" test below?
# i.e. only bother looking for pmpich++ if mpi is enabled...?
# shouldn't really do this, since it assumes we know the name
# of the mpich C++ library (but it can be different to below)
# Also, we only needed it when trying to link C++ with Fortran
# main -but that won't work reliably across compilers (gcc is ok)
#AC_CHECK_LIB(pmpich++,main,,)

if test "$mpi" = "yes" ; then
cat >> confdefs.h << EOF
#define HAVE_MPI 1
#define HAVE_MPI_CXX 1
#define _MPI_CPP_BINDINGS 1
EOF
  enable_mpi="yes"
else
  AC_MSG_WARN([no mpi support found on system])
  enable_mpi="no"
fi

# CGNS support
AC_LANG_PUSH([C])
AC_ARG_WITH(cgns,
[AC_HELP_STRING([--with-cgns@<:@=CGNS_ROOT@:>@],
[specify where to find lib/ and include/ for cgns])])

# allow various synonyms to disable cgns
if test -z "$with_cgns" ; then
  if test "$enable_cgns" = no; then
    with_cgns=no
  elif test "$enable_CGNS" = no; then
    with_cgns=no
  elif test "$with_CGNS" != "yes" ; then
    if test -n "$with_CGNS" ; then
      with_cgns="$with_CGNS"
    fi
  fi
fi
if test "$with_cgns" != "no" ; then
  if test -n "$with_cgns" ; then
    if test "$with_cgns" != "yes" ; then
      LIBS="$LIBS -L$with_cgns"
    fi
  fi
  AC_CHECK_LIB(cgns, cg_open)
  if test $ac_cv_lib_cgns_cg_open = yes; then
cat >> confdefs.h << EOF
#define HAVE_CGNS 1
EOF
    LIBS="$LIBS -lcgns"
  fi
fi

# netCDF support
AC_LANG_PUSH([C])
AC_ARG_WITH(netcdf,
[AC_HELP_STRING([--with-netcdf@<:@=netcdf_ROOT@:>@],
[specify where to find lib/ and include/ for netCDF])])

# allow various synonyms to disable NetCDF
if test -z "$with_netcdf" ; then
  if test "$enable_netcdf" = no; then
    with_netcdf=no
  elif test "$enable_NetCDF" = no; then
    with_netcdf=no
  elif test "$with_NetCDF" != "yes" ; then
    if test -n "$with_NetCDF" ; then
      with_netcdf="$with_NetCDF"
    fi
  fi
fi
if test "$with_netcdf" != "no" ; then
  if test -n "$with_netcdf" ; then
    if test "$with_netcdf" != "yes" ; then
      LIBS="$LIBS -L$with_netcdf"
    fi
  fi
  AC_CHECK_LIB(netcdf, nc_create)
  if test $ac_cv_lib_netcdf_nc_create = yes; then
cat >> confdefs.h << EOF
#define HAVE_NETCDF 1
EOF
    LIBS="$LIBS -lnetcdf"
  fi
  # Check for separate fortran lib.
  AC_CHECK_LIB(netcdff, ncopn_)
  if test $ac_cv_lib_netcdff_ncopn_ = yes; then
    LIBS="$LIBS -lnetcdff"
  fi
fi

# PETSc
if test "$enable_mpi" != "no"
    then
    ACX_ParMetis([AC_MSG_NOTICE(["ParMetis found"])], [AC_MSG_WARN(["ParMetis not found"])])
fi
# various synonyms accepted for disabling PETSc
if test "$enable_PETSc" = no ; then with_PETSc=no; fi
if test "$enable_petsc" = no ; then with_PETSc=no; fi
if test "$with_petsc" = no ; then with_PETSc=no; fi
if test "$with_PETSc" != "no" # -a -n "$with_PETSc"
    then
    ACX_PETSc([AC_MSG_NOTICE(["PETSc found, enabling scalable solver"])], [AC_MSG_WARN(["PETSc not found"])])
    ACX_hypre([AC_MSG_NOTICE(["hypre found, enabling hypre preconditioners"])], [AC_MSG_WARN(["hypre not found"])])
fi

# various synonyms accepted for disabling ERA40
AC_ARG_ENABLE(era40,
[AC_HELP_STRING([--enable-era40[=flag]],
[Enable ERA40 support - requires NetCDF and UDUNITS (default)])])
if test "$with_ERA40" = no ; then enable_ERA40=no; fi
if test "$with_era40" = no ; then enable_ERA40=no; fi
if test "$enable_era40" = no ; then enable_ERA40=no; fi
if test "$enable_ERA40" = no ; then
  AC_MSG_NOTICE([Switched off ERA40 support])
  MAKE_ERA40=no
cat >> confdefs.h <<EOF
#undef ENABLE_ERA40
EOF
else
  MAKE_ERA40=yes
# HACK! HACK!
# we use this horrible #allow as a way to prevent these lines being stripped
# out when we copy confdefs.h - only lines starting undef, define or allow
# are accepted, with allow getting stripped off the start
cat >> confdefs.h << EOF
#allow#if defined(HAVE_LIBUDUNITS) && defined(HAVE_LIBNETCDF) && defined(HAVE_LIBCGNS)
#define ENABLE_ERA40 1
#allow#else
#allow#error ERROR: ERA-40 support requested but support is missing for one of NetCDF, CGNS or Udunits
#allow#endif
EOF
fi

# Double precision
if test -z "$FORTRAN_REAL_8" ; then
    if test "$fcompiler" = "gfortran" ; then
	FORTRAN_REAL_8="-fdefault-real-8"
    elif test "$fcompiler" = "ifort"; then
	FORTRAN_REAL_8="-r8"
    elif test "$fcompiler" = "sunf95"; then
  FORTRAN_REAL_8="-xtypemap=real:64,double:64"
    else
  FORTRAN_REAL_8="-r8"
    fi
fi

AC_ARG_ENABLE(dp,
[AC_HELP_STRING([--enable-dp[=flag]],
[compile with 64 bit floating point numbers (default)])])

if test "$enable_dp" = "no"
  then
  FORTRAN_REAL_8=""
  AC_MSG_NOTICE([Selecting 4 byte floating point numbers])
else
  AC_MSG_NOTICE([Turning on double 8 byte floating point numbers])
  if test -n "$enable_dp" ; then
    if test "$enable_dp" != "yes" ; then
      FORTRAN_REAL_8="$enable_dp"
    fi
  fi
  enable_dp="yes"

  FEMDEM="d$FEMDEM"
  FLADJOINT="d$FLADJOINT"

cat >> confdefs.h << EOF
#define DOUBLEP 1
EOF
  FFLAGS="$FFLAGS $FORTRAN_REAL_8"
  FCFLAGS="$FCFLAGS $FORTRAN_REAL_8"
fi

#####
#
LIBS="$LIBS -L./lib"

##############################################################
# Signal handling.
#
AC_LANG_PUSH([Fortran])

AC_MSG_CHECKING([for compiler signal handling support.])

# Attempt to autodetect signal support.
AC_LINK_IFELSE(
  [
      program testsignal

      integer :: result

      interface
       function handle_sigint(signum)
         integer :: handle_sigint
         integer, intent(in) :: signum
       end function handle_sigint
      end interface

      result=signal(1, handle_sigint, -1)
      end program testsignal

      function handle_sigint(signal)

      implicit none
      integer :: handle_sigint
      integer, intent(in) :: signal

      handle_sigint=0

      end function handle_sigint
  ],
  [
  signal_support=yes
  AC_MSG_RESULT([yes])
cat >> confdefs.h << EOF
#define SIGNAL
#define SIGNAL_HAVE_FLAG
EOF
  ],
  [
  AC_LINK_IFELSE(
  [
      program testsignal

      integer :: result

      interface
       function handle_sigint(signum)
         integer :: handle_sigint
         integer, intent(in) :: signum
       end function handle_sigint
      end interface

      result=signal(1, handle_sigint)
      end program testsignal

      function handle_sigint(signal)

      implicit none
      integer :: handle_sigint
      integer, intent(in) :: signal

      handle_sigint=0

      end function handle_sigint
  ],
  [
  signal_support=yes
  AC_MSG_RESULT([yes])
cat >> confdefs.h << EOF
#define SIGNAL
EOF
  ],
  signal_support=no
  AC_MSG_RESULT([no])
cat >> confdefs.h << EOF
#undef SIGNAL
#define SIGNAL_HAVE_FLAG
EOF
  [
])
])

AC_LANG_POP(Fortran)

##############################################################
# enable gprof profiling

AC_ARG_ENABLE(profiling,
[AC_HELP_STRING([--enable-profiling],
[enable gprof profiling])])

if test "$enable_profiling" = "yes" ; then
  PROFILING_FLAG="-pg"
  CPPFLAGS="-pg $CPPFLAGS"
  FFLAGS="-pg $FFLAGS"
  FCFLAGS="-pg $FCFLAGS"

  LINKER="$LINKER -pg"
else
  PROFILING_FLAG=""
fi
AC_SUBST(PROFILING_FLAG)

dnl Checks for typedefs, structures, and compiler characteristics.
# These tests were just giving too much trouble. Need to investigate further.
#AC_C_CONST
#AC_C_INLINE

VERSION=`svnversion .`
AC_SUBST(VERSION)
cat >> confdefs.h << EOF
#undef __FEMDEM_VERSION__
#define __FEMDEM_VERSION__ "$VERSION"
EOF
AC_SUBST(FORTRAN_REAL_8)
AC_SUBST(OPTIMIZATION_FFLAGS)
AC_SUBST(LINKER)

dnl Specific f90 options
AC_SUBST(USE_CPP)

dnl Specific -D options
AC_SUBST(DEFINE_MPI)

AC_SUBST(FEMDEM)
AC_SUBST(FLADJOINT)
AC_SUBST(B3D)

dnl Checks for library functions.
if test "$smart_fortran" = "yes" ; then
  F77=$MPIF90
else
  F77=$MPIF77
fi
FC=$MPIF90
CC=$MPICC
CXX=$MPICXX
LINKER=$CXX


AC_ARG_ENABLE(vtk,[AC_HELP_STRING([--enable-vtk], [Only use to disable vtk])])
# various synonyms accepted for disabling VTK
if test "$with_vtk" = no ; then enable_vtk=no; fi
if test "$with_VTK" = no ; then enable_vtk=no; fi
if test "$enable_VTK" = no ; then enable_vtk=no; fi
if test "$enable_vtk" != "no" ; then
# should be a whole different configure.in to deal with this. We'll leave it like this
# for the moment and see if it keeps us out of trouble.
VTK_CXX="${VTK_CXX:-"c++"}"
# - this should now be resolved. Lets change it and see how things go.
# sun's c++ doesn't seem to play well with g++-compiled libs, so leave
# this as it was for now...
#VTK_CXX="$CXX"
if test -f "$VTK_INCLUDE/vtkCellType.h" ; then
  VTK_INCLUDE="-I$VTK_INCLUDE"
else
  locations="/sw/include/vtk/ /sw/include/VTK/ /sw/include/ /usr/include/ /usr/local/include/ /sw/VTK/ /sw/vtk/ /usr/vtk/ /usr/VTK/ /usr/local/VTK/ /usr/local/vtk/ /opt/ /usr/opt/"
  dirsfound=""
  for i in $locations
  do
    if test -d "${i}"; then
      dirsfound="$dirsfound ${i}"
    fi
  done
  AC_MSG_CHECKING(for vtkCellData.h in $dirsfound)
  VTK_INCLUDE=`find $dirsfound -name vtkCellData.h 2>/dev/null |head -n 1|xargs dirname`
  if test -f "$VTK_INCLUDE/vtkCellType.h" ; then
    VTK_INCLUDE="-I$VTK_INCLUDE"
    AC_MSG_RESULT([ Found: "$VTK_INCLUDE"])
  else
    VTK_INCLUDE=""
    AC_MSG_RESULT(Not found!)
  fi
fi

if test -d "$VTK_LIBS" ; then
  VTK_LIBS="-L$VTK_LIBS -lvtkIO -lvtkCommon -lvtkGraphics -lvtkFiltering"
else
  # This bit is a bit contrived as we might be on a x86_64 system with
  # 32 and 64 bit versions, but it should take the first, so we look in the
  # 64 bit locations first and make sure any error msgs about the dirs not
  # being there are sent to /dev/null
  locations="/sw/lib64/vtk/ /sw/lib64/VTK/ /sw/lib/vtk/ /sw/lib/VTK/ /sw/lib64/ /sw/lib/ /usr/lib64/ /usr/local/lib64/ /usr/lib/ /usr/local/lib/ /sw/VTK/ /sw/vtk/ /usr/VTK/ /usr/vtk/ /usr/local/VTK/ /usr/local/vtk/ /opt/ /usr/opt/"
  dirsfound=""
  for i in $locations
  do
    if test -d "${i}"; then
      dirsfound="$dirsfound ${i}"
    fi
  done
  AC_MSG_CHECKING(for libvtkIO.so in $dirsfound)
  locations=`find $dirsfound -name 'libvtkIO.so' 2>/dev/null`
  if test "x$locations" = "x"; then
    AC_MSG_RESULT(Not found)
    AC_MSG_CHECKING(for libvtkIO.dylib in $dirsfound)
    locations=`find $dirsfound -name 'libvtkIO.dylib' 2>/dev/null`
    if test "x$locations" = "x"; then
      AC_MSG_RESULT(Not found)
      AC_MSG_CHECKING(for libvtkIO.a in $dirsfound)
      locations=`find $dirsfound -name 'libvtkIO.a' 2>/dev/null`
    fi
  fi
  VTK_LIBS=""
  for i in $locations
  do
    VTK_LIBS="$VTK_LIBS -L`dirname ${i}`"
  done
  if test "x$VTK_LIBS" != "x"; then
    VTK_LIBS="$VTK_LIBS -lvtkIO -lvtkCommon -lvtkGraphics -lvtkFiltering"
    AC_MSG_RESULT([ Found: "$VTK_LIBS"])
  else
    AC_MSG_RESULT(Not found!)
  fi
  unset locations
fi

# Test that we have vtk
have_vtk=no
if test "x$VTK_LIBS" != "x"; then
if test "x$VTK_INCLUDE" != "x"; then
cat > configtest.cpp << EOF
#include <vtkVersion.h>
#include <iostream>
using namespace std;
int main(){
  cout<<vtkVersion::GetVTKMajorVersion();
}
EOF
$VTK_CXX $VTK_INCLUDE -o configtest configtest.cpp $VTK_LIBS
if test -f configtest ; then
  mjversion=`./configtest 2>/dev/null`
  if test "x$mjversion" != "x"; then
  if test "$mjversion" -ge "4" ; then
    have_vtk=yes
  fi
  fi
fi
if test "$have_vtk" = "no" ; then
  AC_MSG_NOTICE(WARNING: Failed to compile with VTK - disabling VTK support)
fi
fi
fi
if test "$have_vtk" = "yes" ; then
cat >> confdefs.h << EOF
#define HAVE_VTK 1
EOF
  AC_MSG_NOTICE([VTK looks usable])
else
  VTK_CXX=${CXX}
  VTK_INCLUDE=""
  VTK_LIBS=""
  AC_MSG_NOTICE([WARNING: VTK support is not enabled. If compilation fails
while building tools then set the enviroment variable VTK_CXX to be
the compiler used for compiling VTK, VTK_INCLUDE to be the directory
where the VTK header files are installed and VTK_LIBS to be the
directory where the VTK libraries are installed.])
fi
rm -f configtest configtest.cpp
else
AC_MSG_NOTICE([VTK - you can have too much of a good thing.])
VTK_CXX=${CXX}
# we have to make sure these are blank if we are configuring without vtk
VTK_LIBS=
VTK_INCLUDE=
fi
VTK_CXXFLAGS="${env_cxxflags} $PIC_FLAG"
AC_SUBST(VTK_CXX)
AC_SUBST(VTK_CXXFLAGS)
AC_SUBST(VTK_INCLUDE)
AC_SUBST(VTK_LIBS)

AC_SUBST(ADJOINT)
AC_SUBST(ARFLAGS)

AC_SUBST(LIBFETCH)
AC_SUBST(MODINC_FLAG)
AC_SUBST(MAKE_ERA40)

# It appears this is not good practice but...go sue me
#cat confdefs.h | grep -v std > include/confdefs.h    <-- see below...
cat confdefs.h | grep DOUBLEP > libvtkfortran/confdefs.h
cat confdefs.h | grep F77_FUNC >> libvtkfortran/confdefs.h
cat confdefs.h | grep VTK >> libvtkfortran/confdefs.h
# let's try getting include/confdefs.h a different way...
# (take only lines starting with "#defin" or "#undef" or "#allow" and
# strip out #allow from start if there)
cat confdefs.h | grep "^#[dua][enl][fdl][ieo][nfw]" | sed -e 's/^#allow//' > include/confdefs.h

# this is junk?
#sed -i '/^extern/d' confdefs.h

AC_OUTPUT(Makefile
          source/Makefile
          tools/B3D/source/Makefile)
