/*! \file Y3Dd.h *  \brief Y data base description * *  \todo *  finish documentation * *  Copyright (C) 2008, Queen Mary University of London (QMUL) &  *  Imperial College of Science, Technology and Medicine (ICSTM). *  All rights reserved. Implemented by Prof Antonio Munjiza &  *  Dr Jiansheng Xiang. * *  This code is part of the Virtual Geoscience Workbench (VGW)  *  developed jointly by ICSTM and QMUL through two related parallel  *  projects at ICSTM and QMUL respectively funded by EPSRC.  * *  This code is provided by copyright holders under the GNU Lesser  *  General Public License (LGPL). It is open source code; you can  *  redistribute it and/or modify it under the terms of the GNU Lesser  *  General Public License version 3.   *   *  This code is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty  *  of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See  *  the GNU Lesser General Public License for more details, *  http://www.gnu.org/licenses/lgpl-3.0.txt.  * *  You should have received a copy of the GNU Lesser General Public  *  License along with this code; if not, write to: * *  Dr Jiansheng Xiang   <j.xiang@imperial.ac.uk>    \n *  Prof Antonio Munjiza <a.munjiza@qmul.ac.uk>      \n *  Dr John-Paul Latham  <j.p.latham@imperial.ac.uk> \n * */#ifndef Y3DD_H#define Y3DD_H#include "Ytypes.h"#include "frame.h"/**********************************************************************//**********************************************************************//*! constants structure pointer*/typedef struct YDK_struct *YDK; /*! constants structure*/struct YDK_struct    {   DBL **d2csmm;  /*!< [NNODE][NNODE] consistent mass matrix - Ysd()  */  DBL *d1lpmm;   /*!< [NNODE] lumped mass matrix - Yfd()             */  DBL ***d3dsh;  /*!< [NGRSH][NDIME][NNODE] shape function - Yfd()   */  DBL **d2ka;    /*!< [mbcon] = ydb->d1bnaXYZ[ibcon] + ydc->dcgraXYZ */};/**********************************************************************//**********************************************************************//*! control structure pointer*/typedef struct YDC_struct *YDC; /*! control structure*/struct YDC_struct    {   INT  mcstep;  /*!< maximum number of time steps */  INT  ncstep;  /*!< current number of time steps */  FILE *finp;  FILE *fcheck;    DBL  dcgrax;  /*!< gravity x */  DBL  dcgray;  /*!< gravity y */  DBL  dcgraz;  /*!< gravity z */  DBL  dcsizc;  /*!< size coord */  DBL  dcsizf;  /*!< size force */  DBL  dcsizs;  /*!< size stress */  DBL  dcsizv;  /*!< size velocity */  DBL  dcstec;  /*!< current time step size */  DBL  dctime;  /*!< current time */  DBL  dcurelx; /*!< under relaxation for mass matrix */  INT  initer;  /*!< number of iterations for multi-pass algorithm */  INT  icoutf;  /*!< write output frequency */  INT  icouti;  /*!< current write output No */  INT  icoutp;  /*!< output precision - digits per number */  INT  iwfast;  /*!< fast mode */  INT  isave;   /*!< restart number of loop */  DBL  dcrmpt;  /*!< size coord */  INT irigid;  INT *iflag;};/**********************************************************************//**********************************************************************//*! element description structure pointer*/typedef struct YDE_struct *YDE;  /*! element description structure*/struct YDE_struct{   INT melem; /*!< maximum number of elements                     */  INT nelem; /*!< actual number of elements                      */  INT melst; /*!< maximum number of elemen. states var.          */  INT nelst; /*!< actual number of elemen. states var.           */  INT melno; /*!< maximum number of elemen. nodes                */  INT nelno; /*!< actual number of elemen. nodes                 */  INT *i1elcf;   /*!< [melem] contacting couple first            */   INT *i1elpr;   /*!< [melem] element property                   */  INT *i1elty;   /*[melem]	  element type						 */				 /*3-5:normal, shear, shear rotation; 					2:pre-existing; 1:boundary;		 			*/				 /*0:unbroken; -1:non-joint elemnt				 */  DBL **d2elst;  /*!< [melst][melem] element state               */  INT **i2elto;  /*!< [melem][melno] element topology            */  DBL ***d3tcs;  /*!< [melem][ndime][ndime] Cauchy stress        */  DBL *d1emct;   /*!< [melem] total elemental mass               */  INT *i1elbe;   /*!< [melem] boundary element                   */  INT *i1elbe_h; /*!< [melem] boundary element with at least on face on the boundary for contact heat transfer cj215*/  INT **i2elfr;   /*!< [melem][4] element fracture - contact label                   */  INT *i1eljo;	 /*[melem] joint element property                */  INT **i2eljp;  /*!< [melem][melno] element topology            */  DBL **d2elfs;  /*[melem][3] shear strength at integration point*/  INT *i1elcft;			/* [melem] fem elem failure timestep due to compression */  INT **i2elbnp;                        /* [melem][4] element surface pressure boundary no */  INT nelemi;  DBL **d2xap;  DBL *d1npore;};/**********************************************************************//**********************************************************************/typedef struct YDJ_struct *YDJ;/*! interaction structure*/struct YDJ_struct{ INT   njoint;		  /* number of joint elements				*/  INT  *i1jtid;		  /* joint element index in element topology list 	*/  DBL  *d1jkni;		  /* [mjelem] joint initial normal stiffness	  	*/  DBL  *d1jknc;		  /* [mjelem] joint current normal stiffness	  	*/  DBL  *d1jnst;		  /* [mjelem] joint normal stress			*/  DBL  *d1jsst;		  /* [mjelem] joint shear stress			*/  DBL  *d1japi;		  /* [mjelem] joint initial normal aperture		*/  DBL  *d1japc;		  /* [mjelem] joint current normal aperture		*/  DBL  *d1japh;		  /* [mjelem] joint hydraulic aperture			*/  DBL  *d1jefl;		  /* [mjelem] joint effective fracture length	  	*/  DBL  *d1jfmd;		  /* [mjelem] joint (if new crack) failure mode   	*/  DBL **d2jnrm;		  /* [mjelem][3] joint element unit normal		*/  DBL  *d1jtar;		  /* [mjelem] joint element area			*/}; /**********************************************************************//**********************************************************************//*! interaction structure pointer*/typedef struct YDI_struct *YDI; /*! interaction structure*/struct YDI_struct{   INT micoup;  /*!< maximum possible number of contacting couples  	*/  INT nicoup;  /*!< actual number of contacting couples            	*/  INT iiecff;  /*!< interaction element contact. couple free first 	*/  DBL  diedi;  /*!< travel since last detection                    	*/  DBL  diezon; /*!< buffer zone size                               	*/  DBL *d1iesl; /*!< [mcoup] contact sliding                        	*/  INT *i1iecn; /*!< [mcoup] couple next                            	*/  INT *i1iect; /*!< [mcoup] couple target                          	*/  DBL   *d1deltat1;   /*!<[mcontn] tangential overlap between two elements */  DBL   *d1deltat2;   /*!<[mcontn] tangential overlap between two elements */  DBL   *d1deltan;   /*!<[mcontn] normal overlap between two elements */  DBL   **d2nv;  DBL   **d2t1v;  DBL   **d2t2v;  INT *i1fcstep; 		/* [mcoup] first timestep couple contact due to fracture*/}; /**********************************************************************//**********************************************************************//*! node description structure pointer*/typedef struct YDN_struct *YDN;   /*! node description structure*/struct YDN_struct{   INT mnodim;  /*!< maximum nodal dimensions number                    */  INT nnodim;  /*!< actual nodal dimensions number                     */  INT mnopo;   /*!< maximum number of nodal points                     */  INT nnopo;   /*!< actual number of nodal points                      */  INT nnopi;   /*!< actual number of nodal points                      */  INT *i1ptn;  /*!< [mnopo] node to solid nb for contact heat transfer */  DBL *d1nmct; /*!< [mnopo] nodal mass current translation             */  DBL **d2ncc; /*!< [mnodim][mnopo] nodal coordinate current           */  DBL **d2nci; /*!< [mnodim][mnopo] nodal coordinate initial           */  DBL **d2nfc; /*!< [mnodim][mnopo] nodal force current due to contact */   DBL **d2nft; /*!< [mnodim][mnopo] nodal total current force          */  DBL **d2nvc; /*!< [mnodim][mnopo] nodal velocity current             */  INT *i1nobf; /*!< [mnopo] nodal boundary >0 is boundary              */  INT *i1nopr; /*!< [mnopo] nodal property                             */  INT *i1nind; /*!< [mnopo] nodal super particle index                 */  DBL *d1nti; /*!< [mnopo] nodal temperature initial                   */   DBL *d1ntc; /*!< [mnopo] nodal temperature current                   */  DBL *d1ntp; /*!< [mnopo] nodal temperature current petsc             */  DBL **d2nvt; /*!< [mnodim][mnopo] nodal velocity time-averaged       */  DBL **d2nfp; /*2 d2nft [mnodim][mnopo] nodal bouyancy force     */  DBL **d2nfd;  DBL **d2nfv;  /*2 d2nfc [mnodim][mnopo] nodal drag force current                */  DBL *d1nvct; /*2 d1nvct [mnopo] nodal volume                     */  INT nneigh; /*!< actual number of nodal neighbouring nodes          */  INT **i2nnei;/*!< [mnopo][mneigh] nodal neighbouring nodes           */  INT *i1nei; /*!< [mnopo] neighbour node number                      */  INT *i1ntoC2D; /* CON - DISC topologu */  DBL *d1nvol;};/**********************************************************************//**********************************************************************//*! output description structure pointer*/typedef struct YDO_struct *YDO;   /*! output description structure*/struct YDO_struct{   INT mohys;     /*!<  maximum number of hystory variables             */  INT nohys;     /*!< actual number of hystory variables               */  DBL dohyp;     /*!< output hystory accuracy                          */   DBL *d1ohyf;   /*!< [mohys] output hystory factor to scale state     */  DBL *d1ohyc;   /*!< [mohys] output hystory factor to scale time      */  DBL *d1ohys;   /*!< [mohys] output hystory state                     */  DBL *d1ohyt;   /*!< [mohys] output hystory time                      */  DBL *d1ohyx;   /*!< [mohys] output history x coordinate of the point */  DBL *d1ohyy;   /*!< [mohys] output history y coordinate of the point */  DBL *d1ohyz;   /*!< [mohys] output history z coordinate of the point */  FILE **f2ohyf; /*!< [mohys] output history files                     */  INT *i1ohyt;   /*!< [mohys] output hystory type, i.e. which variable */};/**********************************************************************//**********************************************************************//*! Super particle description structure pointer*/typedef struct YSP_struct *YSP;struct YSP_struct        /*Y_Super-Particle_Dbs_Structure                     */{ INT   mspd,nspd; /*maximum (actual) number of particle*///  INT  *i1elcf;//  INT   *i1speind;  /*[msd]index of sphere                            *///  INT   *i1nopr; /* [msd] discrete property      */  DBL   *d1mass;  DBL   **d2pp;    /*[nnodim][msd] sphere_position_x                     */  DBL   **d2poldp;    /*[nnodim][msd] sphere_position_x                     */  DBL   **d2pvt;     /*[nnodim][msd] sphere_velocity_x              */  DBL   **d2pfd;    /*[nnodim][msd] sphere_normal force_x         */  //DBL   **d2pft1;   /*[nnodim][msd] sphere_tangential force_x1    */  //DBL   **d2pft2;   /*[nnodim][msd] sphere_tangential force_x2    */  DBL   **d2ptfc;    /*[nnodim][msd] sphere_total_contact force_x */  DBL   **d2ptf;    /*[nnodim][msd] sphere_total_force_x */  DBL   **d2pa;     /*[nnodim][msd] sphere_rotation angel_x      */  DBL   **d2pvr;     /*[nnodim][msd] sphere_rotation velocity_x      */  DBL   **d2pm;     /*[nnodim][msd] sphere_moment_x */  DBL   **d2pmd;//  DBL    dsengy;  DBL   **d2prine;  /*[nnodim] pricinple inertia                         */  DBL   **d2prinn1;  /*[nnodim] pricinple axe                         */  DBL   **d2prinn2;  /*[nnodim] pricinple axe                         */  DBL   **d2prinn3;  /*[nnodim] pricinple axe                         */  DBL   **d2poldvr;     /*[nnodim][msd] sphere_rotation velocity_x      */  INT   *i1sppr;  INT   *i1con;};/**********************************************************************//**********************************************************************//*! property description structure pointer*/typedef struct YDP_struct *YDP;  /*! property description structure*/struct YDP_struct{   INT mprop;   /*!< maximum number of properties                         */  INT nprop;   /*!< actual number of properties                          */  DBL *d1pefr; /*!< [mprop] property friction coefficient                */  DBL   *d1pesf; /*!< d1pesf [mprop] property static friction coefficient            */  DBL   *d1pepsf; /*!< d1pepsf [mprop] property pressure friction coefficient         */  DBL   *d1pevf;  /*!< d1pefr [mprop] property velcocity dependent friction sfactor   */  DBL   *d1pepf;  /*!< d1pefr [mprop] property pressure dependent friction sfactor   */  DBL   *d1pefs;  /*[mprop] ultimate shear strength at joint               */  DBL   *d1peft;  /*[mprop] ultimate tensile strength at joint             */  DBL   *d1pegfn;  /*[mprop] ultimate fracture energy mode I at joint            */  DBL   *d1pegfs;  /*[mprop] ultimate fracture energy mode II at joint            */  DBL *d1peks; /*!< [mprop] dpeks=2hbeta*sqrt(E*ro) in 2D or 3D,0<beta<1 */  DBL *d1pela; /*!< [mprop] property lamda - Lame elastic constant       */  DBL *d1pemu; /*!< [mprop] property mu    - Lame elastic constant       */  DBL *d1pepe; /*!< [mprop] property penalty parameter                   */  DBL *d1pero; /*!< [mprop] property ro    - density                     */  INT *i1ptyp; /*!< [mprop] property type                                */  DBL *d1tcon; /*!< [mprop] property thermal conductivity  cj215         */  DBL *d1capa; /*!< [mprop] property specific heat capacity        cj215 */  DBL *d1ctex; /*!< [mprop] Coefficient of thermal expansion        cj215 */  INT   *i1pejp;  /*[mprop] joint property; if<0, no joints              */  INT   *i1pemn;  /*[mprop] number of mesh refinements                   */  INT   *i1psde;  /*[mprop] state damage elastic id  */  DBL   *d1picf;  /*[mprop] internal friction angle                      */  DBL   *d1pcoh;  /*[mprop] cohesion                        */};/**********************************************************************//**********************************************************************//*! boundary condition description structure pointer*/typedef struct YDB_struct *YDB;/*! boundary description structure*/struct YDB_struct{   INT mbcon;   /*!< maximum number of properties            */  INT nbcon;   /*!< actual number of properties             */  DBL *d1bnax; /*!< [mprop] amplitude of acceleration x     */  DBL *d1bnay; /*!< [mprop] amplitude of acceleration y     */  DBL *d1bnaz; /*!< [mprop] amplitude of acceleration z     */  DBL *d1bnfx; /*!< [mprop] amplitude of force x            */  DBL *d1bnfy; /*!< [mprop] amplitude of force y            */  DBL *d1bnfz; /*!< [mprop] amplitude of force z            */  DBL *d1bnvx; /*!< [mprop] amplitude of velocity x         */  DBL *d1bnvy; /*!< [mprop] amplitude of velocity y         */  DBL *d1bnvz; /*!< [mprop] amplitude of velocity z         */  INT *i1bnvx; /*!< [mprop] fixity x direction >0 vel.      */ //Z are these hack-ish?  INT *i1bnvy; /*!< [mprop] fixity y direction >0 vel.      */ //Z are these hack-ish?  INT *i1bnvz; /*!< [mprop] fixity z direction >0 vel.      */ //Z are these hack-ish?   DBL *d1bnap; /*!< [mprop] amplitude of element surface pressure     */ //Added by LGuo  INT *i1bntp; /*!< [mprop] constrained temperature boolean */  DBL *d1bntp; /*!< [mprop] constrained temperature value   */  INT *i1bnhf; /*!< [mprop] heat flux boolean               */  DBL *d1bnhf; /*!< [mprop] heat flux value                 */  INT   *i1bcvt; /*!<  [mprop] Convection condition boolean */  DBL   *d1bcvt; /*!< [mprop] Convection condition value    */  DBL   *d1bcvc; /*!< [mprop] Convection coefficient        */ };/**********************************************************************//**********************************************************************//*! boundary description structure pointer*/typedef struct YPAR_struct *YPAR;/*! Particle description structure*/struct YPAR_struct{   INT ntpar;  INT ngrid;  INT nlpar;  INT nindex;  INT *i1elbe;  INT nelem;   /*!< maximum number of properties            */  INT nnode;   /*!< actual number of properties             */  INT **i2elto;  DBL **d2xyz; /*!< [mprop] amplitude of acceleration x     */  DBL **d2gxyz; /*!< [mprop] amplitude of acceleration x     */  DBL *d1cg;  DBL *d1dst;  DBL radius;  DBL max;  DBL *d1lv;  INT ir;  DBL r;  DBL *d1vc; /*!< [mprop] current velocity     */  };typedef struct YDX_struct *YDX;	/* added by LGuo *//* shell description structure */struct YDX_struct{  INT nelem;			/*!< actual number of elements                      */  INT **i2elto; 		/*!< [melem][melno] element topology            */  DBL *d1nap;			/* [melem][4] element surface pressure boundary value */  //  INT **i2xbto;		/* [melem][melno] surface boundary */  //  INT nsfel;		/* surface triangle element number */  INT nsfel;  INT nsfel_old;  INT nelno;  INT **i2elto_t; 		//固体surface  INT **i2elto_r; 		// shell中间的，element  INT **i2elto_rt;		//shell上方的surface，与i2elto_t对应。但坐标为ring坐标。  INT nelem_t;  INT **i2xbto;  INT **i2xbtosf;  DBL **d2area;  DBL **d2normal;  INT **i2xbtojn;  //INT **i2xbto;		/* [melem][melno] continuum surface boundary */  INT **i2cvto; 		/* [melem][melno] continuum volume topology */  INT **i2elcon; 		/* [melem][melno] continuum fem elem neigbours */  //  INT nsfel;		/* surface triangle element number */  INT ncmel; 			/* (continuum mesh) number of elements */  INT **i2eltoxb;		/* [melem][melno] continuum tet elem neigbour surface tri elem */  INT *i1xbtoel; 		/* [melem] surface triangle connected tetrahedron  */  /*ring data structure */  DBL **d2areaw;  DBL dthick;  INT nnode; 			/* node number */  DBL **d2ncc;  INT *i1r2s;  INT *i1s2r;  DBL *d1nvol;  //	DBL *d1ndrag;  DBL **d2nfv;	DBL *surf_t; 	  /*[melem] surface area of boundary element cj215 */  DBL **norm_t;	  /*[melem] outter normal vecotr of boundary element cj215 */  };typedef struct YDXN_struct *YDXN; /* added by LGuo */struct YDXN_struct{  INT **i2xbjno;		/* [mnopo][100] surface mesh node - joint element node */  INT *i1xbjo;			/* [mnopo] number of joint nodes to one surface node */  INT ncmno;			/* (continuum mesh) number of nodes */  DBL **d2xncc;			/* (continuum mesh) [mnodim][mnopo] node coordinate */  DBL **d2xnvc;			/* (continuum mesh) [mnodim][mnopo] node velocity */  DBL *d1shap;                  /*  [mnopo]shell thickness locally on nodes */  DBL *d1xntc;			/* (continuum mesh) [mnodim][mnopo] current node temperature */};/**********************************************************************//**********************************************************************//*! Y3D database structure pointer*/typedef struct YD_struct *YD;/*! Y3D database structure*/struct YD_struct{   struct YDK_struct ydk; /*!< constants structure */  struct YDC_struct ydc; /*!< control structure */  struct YDE_struct yde; /*!< element structure */  struct YDI_struct ydi; /*!< interaction structure */  struct YDN_struct ydn; /*!< node structure */  struct YDO_struct ydo; /*!< output structure */  struct YDP_struct ydp; /*!< properties structure */  struct YDB_struct ydb; /*!< boundary structure */  struct YPAR_struct ypar; /*!< boundary structure */  struct YSP_struct ysp; /*!< boundary structure */  struct YDX_struct ydx; /*!< surface boundary structure */  struct YDXN_struct ydxn;	/* surface mesh node */};/**********************************************************************//**********************************************************************/#endif /* Y3DD_H *//**********************************************************************//* EOF                                                                *//**********************************************************************/