include "spud_base.rnc"

include "adaptivity_options.rnc"
include "diagnostic_algorithms.rnc"
include "input_output.rnc"
include "solvers.rnc"
include "stabilisation.rnc"
include "reduced_model.rnc"
include "mesh_options.rnc"
include "physical_parameters.rnc"
include "prognostic_field_options.rnc"
include "prescribed_field_options.rnc"
include "spatial_discretisation.rnc"
include "temporal_discretisation.rnc"

start =
   (
      ## The root node of the options dictionary.
      element test_coupler {
         comment,
         ## Model output files are named according to the simulation
         ## name, e.g. [simulation_name]_0.vtu. Non-standard
         ## characters in the simulation name should be avoided.
         element simulation_name {
            anystring
         },
         geometry,
         io,
         material_phase,
         coupling_options?
         }
   )

coupling_options =
   (
      ## These options activate coupling of Fluidity with OASIS.
      ## NB: Currently only works in 2D
      element coupling {
         ## Number of elements in longitude and latitude dimension respectively
         element element_count { integer_dim_vector },
 ## The minimum and maximum longitude of the coupled domain
 element longitude_extent { real_dim_vector },
 ## The minimum and maximum latitude of the coupled domain
 element latitude_extent { real_dim_vector}
      }?
   )

geometry = 
   (
      ## Options dealing with the specification of geometry
      element geometry {
         ## Dimension of the problem.
         ## <b>This can only be set once</b>
         element dimension {
            element integer_value {
               attribute rank {"0"},
               ("3"|"2")
            }
         },
         ## The position mesh
         element mesh {
            attribute name { "CoordinateMesh" },
            mesh_info_fromfile
         },
         ## The tracer mesh
         element mesh {
            attribute name { "TracerMesh" },
            mesh_info_frommesh
         },
         ## Quadrature
         element quadrature {
            ## Quadrature degree
            ## 
            ## note: this specifies the degree of quadrature,
            ## not the number of gauss points
            element degree {
               integer
            },
            ## Surface quadrature degree
            ## 
            ## note: this specifies the degree of surface
            ## quadrature not the number of surface gauss points
            element surface_degree {
               integer
            }?
         }
      }
   )

mesh_choice_coordinate = 
   (
      element mesh {
         attribute name { "CoordinateMesh" }
       }
   )

mesh_choice = 
   (
      (
         element mesh {
            attribute name { "TracerMesh" }
         }|
         element mesh {
            attribute name { "CoordinateMesh" }
         }
      )
   )

mesh_info_fromfile =
   (
      ## Read mesh from file.
      element from_file {
         (
            ## Triangle mesh format.
            ##
            ## Enter the base name without the .edge .ele, .face or
            ## .node extensions, and without process numbers.
            element format {
              attribute name { "triangle" },
              comment
            }|
            ## Read the mesh from a vtu. Note that the mesh will have no 
            ## surface or region IDs.
            element format {
              attribute name { "vtu" },
              comment
            }|
            ## GMSH mesh format
            element format {
               attribute name { "gmsh" },
               comment
            }
         ),
         attribute file_name { xsd:string },
         from_file_mesh_stat_options,
         comment
      }
   )

mesh_info_frommesh =
   (
      ## Make mesh from existing mesh. 
      element from_mesh {
         mesh_choice_coordinate,
         element mesh_shape {
            element polynomial_degree {
               integer
            }?,
            element element_type {
              element string_value{
                 "lagrangian"
              }
            }?
         }?,
         derived_mesh_stat_options,
         comment
      }
   )

material_phase = 
   (
         ## The material phase options
         element material_phase {
            attribute name { "Fluid" },
            element scalar_field {
               attribute rank { "0" },
               attribute name { "Tracer" },
               element prognostic {
                  element mesh {
                     attribute name { "TracerMesh" }      
                  },
                  initial_condition_scalar,
                  element stat { comment },
                  element scalar_field {
                     attribute name { "Source" },
                     attribute rank { "0" },
                     element prescribed {
                        prescribed_scalar_field_no_adapt,
                        recalculation_options?
                     }
                  }?,
                  # If enabled, save the right hand side of the discrete equations.
                  element scalar_field {
                     attribute name { "Rhs" },
                     attribute rank { "0" },
                     element diagnostic {
                        empty
                     }
                  }?
               }
            },
            ## Prescribed or diagnostic scalar fields.
            element scalar_field {
              attribute rank { "0" },
              attribute name { string },
              (
                 element prescribed {
                    mesh_choice,
                    prescribed_scalar_field_no_adapt,
                    recalculation_options?
                 }|
                 element diagnostic {
                    mesh_choice,
                    diagnostic_scalar_field
                 }
              )
            }*
         }
   )

boundary_conditions = 
   (
         ## Boundary conditions
         element boundary_conditions {
            attribute name { string },
            ## Surface id
            element surface_ids {
               integer_vector
            },
            element type {
               attribute name { "dirichlet" },
               input_choice_real
            }
         }
   )

prescribed_output_options = empty
prescribed_detector_options = empty
prescribed_scalar_stat_options = empty
discrete_properties_algorithm_scalar = empty
recalculation_options =                                                                                                                                                                                                                      
   (
      ## Prevent this field from being recalculated at every timestep.
      ## This is cheaper especially if you are enforcing discrete properties on the field.
      element do_not_recalculate {
        empty
      }
   )

diagnostic_scalar_field =
   (
      scalar_python_diagnostic_algorithm,
      element stat { comment },
      recalculation_options?
   )

io =
   ## Options to do with I/O
   element io {
     ## Dump format
     element dump_format { "vtk" },
     ## Dump period, in timesteps. Defaults to 1
     element dump_period_in_timesteps { 
       element constant { integer }
     }?,
     (
        ## The mesh on to which all the fields will be
        ## interpolated for VTK output.
        element output_mesh {
           attribute name { "VelocityMesh" }
        }|
        ## The mesh on to which all the fields will be
        ## interpolated for VTK output.
        element output_mesh {
           attribute name { xsd:string }
        }
     )
  } 
