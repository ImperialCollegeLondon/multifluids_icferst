<?xml version='1.0' encoding='utf-8'?>
<multiphase_options>
  <simulation_name>
    <string_value lines="1">400c_20_dtr0.001_real_const_t</string_value>
  </simulation_name>
  <simulation_type>
    <inertia_dominated/>
  </simulation_type>
  <geometry>
    <dimension>
      <integer_value rank="0">3</integer_value>
    </dimension>
    <mesh name="CoordinateMesh">
      <from_file file_name="cylinder">
        <format name="gmsh"/>
        <stat>
          <include_in_stat/>
        </stat>
      </from_file>
    </mesh>
    <mesh name="VelocityMesh">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <mesh_shape>
          <polynomial_degree>
            <integer_value rank="0">1</integer_value>
          </polynomial_degree>
          <element_type>
            <string_value>lagrangian</string_value>
          </element_type>
        </mesh_shape>
        <mesh_continuity>
          <string_value>discontinuous</string_value>
        </mesh_continuity>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <mesh name="PressureMesh">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <mesh_shape>
          <polynomial_degree>
            <integer_value rank="0">1</integer_value>
          </polynomial_degree>
          <element_type>
            <string_value>lagrangian</string_value>
          </element_type>
        </mesh_shape>
        <mesh_continuity>
          <string_value>continuous</string_value>
        </mesh_continuity>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <mesh name="P0DG">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <mesh_shape>
          <polynomial_degree>
            <integer_value rank="0">0</integer_value>
          </polynomial_degree>
          <element_type>
            <string_value>lagrangian</string_value>
          </element_type>
        </mesh_shape>
        <mesh_continuity>
          <string_value>discontinuous</string_value>
        </mesh_continuity>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <mesh name="VelocityMesh_Continuous">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <mesh_shape>
          <polynomial_degree>
            <integer_value rank="0">1</integer_value>
          </polynomial_degree>
          <element_type>
            <string_value>lagrangian</string_value>
          </element_type>
        </mesh_shape>
        <mesh_continuity>
          <string_value>continuous</string_value>
        </mesh_continuity>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <mesh name="PressureMesh_Continuous">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <mesh_shape>
          <polynomial_degree>
            <integer_value rank="0">1</integer_value>
          </polynomial_degree>
          <element_type>
            <string_value>lagrangian</string_value>
          </element_type>
        </mesh_shape>
        <mesh_continuity>
          <string_value>continuous</string_value>
        </mesh_continuity>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <mesh name="PressureMesh_Discontinuous">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <mesh_shape>
          <polynomial_degree>
            <integer_value rank="0">1</integer_value>
          </polynomial_degree>
          <element_type>
            <string_value>lagrangian</string_value>
          </element_type>
        </mesh_shape>
        <mesh_continuity>
          <string_value>discontinuous</string_value>
        </mesh_continuity>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <quadrature>
      <degree>
        <integer_value rank="0">5</integer_value>
      </degree>
    </quadrature>
  </geometry>
  <io>
    <dump_format>
      <string_value>vtk</string_value>
    </dump_format>
    <dump_period>
      <constant>
        <real_value rank="0">0.1</real_value>
      </constant>
    </dump_period>
    <output_mesh name="P0DG"/>
    <stat/>
  </io>
  <timestepping>
    <current_time>
      <real_value rank="0">0.0</real_value>
    </current_time>
    <timestep>
      <real_value rank="0">5e-2</real_value>
    </timestep>
    <finish_time>
      <real_value rank="0">2000.0</real_value>
    </finish_time>
    <adaptive_timestep>
      <requested_cfl>
        <real_value rank="0">1.0</real_value>
      </requested_cfl>
      <courant_number name="CFLNumber">
        <mesh name="VelocityMesh"/>
      </courant_number>
      <maximum_timestep>
        <real_value rank="0">1.0</real_value>
      </maximum_timestep>
      <increase_tolerance>
        <real_value rank="0">1.05</real_value>
      </increase_tolerance>
    </adaptive_timestep>
  </timestepping>
  <physical_parameters>
    <gravity>
      <magnitude>
        <real_value rank="0">0.0</real_value>
      </magnitude>
      <vector_field name="GravityDirection" rank="1">
        <prescribed>
          <mesh name="CoordinateMesh"/>
          <value name="WholeMesh">
            <constant>
              <real_value shape="3" dim1="dim" rank="1">0.0 0.0 -1.0</real_value>
            </constant>
          </value>
          <output/>
          <stat>
            <include_in_stat/>
          </stat>
          <detectors>
            <exclude_from_detectors/>
          </detectors>
        </prescribed>
      </vector_field>
    </gravity>
  </physical_parameters>
  <material_phase name="phase1">
    <equation_of_state>
      <incompressible>
        <linear>
          <all_equal>
            <real_value rank="0">997.</real_value>
          </all_equal>
        </linear>
      </incompressible>
    </equation_of_state>
    <scalar_field name="Pressure" rank="0">
      <prognostic>
        <mesh name="PressureMesh"/>
        <spatial_discretisation>
          <continuous_galerkin/>
        </spatial_discretisation>
        <symmetric_P/>
        <solver>
          <iterative_method name="gmres">
            <restart>
              <integer_value rank="0">30</integer_value>
            </restart>
          </iterative_method>
          <preconditioner name="hypre">
            <hypre_type name="boomeramg"/>
          </preconditioner>
          <relative_error>
            <real_value rank="0">1.0e-15</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">15904</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <python>
            <string_value lines="20" type="code" language="python">def val(X, t):
 val = 101325.0# - 10000 * 9.8 * (X[2]-0.2)
 return val</string_value>
          </python>
        </initial_condition>
        <boundary_conditions name="top">
          <surface_ids>
            <integer_value shape="1" rank="1">3</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <apply_weakly/>
            <constant>
              <real_value rank="0">101325.0</real_value>
            </constant>
          </type>
        </boundary_conditions>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </prognostic>
    </scalar_field>
    <scalar_field name="Density" rank="0">
      <prognostic>
        <mesh name="PressureMesh"/>
        <spatial_discretisation>
          <continuous_galerkin>
            <stabilisation>
              <no_stabilisation/>
            </stabilisation>
            <advection_terms/>
            <mass_terms/>
          </continuous_galerkin>
          <conservative_advection>
            <real_value rank="0">1.0</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">1.0</real_value>
          </theta>
        </temporal_discretisation>
        <initial_condition name="WholeMesh">
          <constant>
            <real_value rank="0">997.</real_value>
          </constant>
        </initial_condition>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </prognostic>
    </scalar_field>
    <vector_field name="Velocity" rank="1">
      <prognostic>
        <mesh name="VelocityMesh"/>
        <equation name="LinearMomentum"/>
        <spatial_discretisation>
          <discontinuous_galerkin>
            <mass_terms>
              <lump_mass_matrix/>
            </mass_terms>
            <viscosity_scheme>
              <stress_form/>
              <linear_scheme>
                <high_order/>
              </linear_scheme>
            </viscosity_scheme>
            <advection_scheme>
              <upwind/>
              <integrate_advection_by_parts>
                <twice/>
              </integrate_advection_by_parts>
            </advection_scheme>
            <les_model>
              <model>
                <integer_value rank="0">2</integer_value>
                <comment>was 5</comment>
              </model>
              <smagorinsky_coefficient>
                <real_value rank="0">0.1</real_value>
              </smagorinsky_coefficient>
              <tensor_form/>
            </les_model>
          </discontinuous_galerkin>
          <conservative_advection>
            <real_value rank="0">0.0</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">1.0</real_value>
          </theta>
          <relaxation>
            <real_value rank="0">1.0</real_value>
          </relaxation>
        </temporal_discretisation>
        <solver>
          <iterative_method name="gmres">
            <restart>
              <integer_value rank="0">30</integer_value>
            </restart>
          </iterative_method>
          <preconditioner name="hypre">
            <hypre_type name="boomeramg"/>
          </preconditioner>
          <relative_error>
            <real_value rank="0">1.0e-7</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">1666</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <constant>
            <real_value shape="3" dim1="dim" rank="1">0.0 0.0 0.005</real_value>
          </constant>
        </initial_condition>
        <boundary_conditions name="bottom">
          <surface_ids>
            <integer_value shape="1" rank="1">1</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <apply_weakly/>
            <align_bc_with_cartesian>
              <x_component>
                <constant>
                  <real_value rank="0">0.0</real_value>
                </constant>
              </x_component>
              <y_component>
                <constant>
                  <real_value rank="0">0.0</real_value>
                </constant>
              </y_component>
              <z_component>
                <constant>
                  <real_value rank="0">3.754e-3</real_value>
                </constant>
              </z_component>
            </align_bc_with_cartesian>
          </type>
        </boundary_conditions>
        <boundary_conditions name="bottom_momentum">
          <surface_ids>
            <integer_value shape="1" rank="1">1</integer_value>
          </surface_ids>
          <type name="momentum">
            <align_bc_with_cartesian>
              <x_component>
                <constant>
                  <real_value rank="0">0.0</real_value>
                </constant>
              </x_component>
              <y_component>
                <constant>
                  <real_value rank="0">0.0</real_value>
                </constant>
              </y_component>
              <z_component>
                <constant>
                  <real_value rank="0">3.754e-3</real_value>
                </constant>
              </z_component>
            </align_bc_with_cartesian>
          </type>
        </boundary_conditions>
        <boundary_conditions name="sides">
          <surface_ids>
            <integer_value shape="1" rank="1">2</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <apply_weakly/>
            <align_bc_with_cartesian>
              <x_component>
                <constant>
                  <real_value rank="0">0.0</real_value>
                </constant>
              </x_component>
              <y_component>
                <constant>
                  <real_value rank="0">0.0</real_value>
                </constant>
              </y_component>
              <z_component>
                <constant>
                  <real_value rank="0">0.0</real_value>
                </constant>
              </z_component>
            </align_bc_with_cartesian>
          </type>
        </boundary_conditions>
        <boundary_conditions name="sides_momentum">
          <surface_ids>
            <integer_value shape="1" rank="1">2</integer_value>
          </surface_ids>
          <type name="momentum">
            <align_bc_with_cartesian>
              <x_component>
                <constant>
                  <real_value rank="0">0.0</real_value>
                </constant>
              </x_component>
              <y_component>
                <constant>
                  <real_value rank="0">0.0</real_value>
                </constant>
              </y_component>
              <z_component>
                <constant>
                  <real_value rank="0">0.0</real_value>
                </constant>
              </z_component>
            </align_bc_with_cartesian>
          </type>
        </boundary_conditions>
        <boundary_conditions name="top_momentum">
          <surface_ids>
            <integer_value shape="1" rank="1">3</integer_value>
          </surface_ids>
          <type name="momentum">
            <align_bc_with_cartesian>
              <x_component>
                <constant>
                  <real_value rank="0">0.0</real_value>
                </constant>
              </x_component>
              <y_component>
                <constant>
                  <real_value rank="0">0.0</real_value>
                </constant>
              </y_component>
              <z_component>
                <constant>
                  <real_value rank="0">0.0</real_value>
                </constant>
              </z_component>
            </align_bc_with_cartesian>
          </type>
        </boundary_conditions>
        <boundary_conditions name="bottom_advection">
          <surface_ids>
            <integer_value shape="1" rank="1">1</integer_value>
          </surface_ids>
          <type name="dirichlet_advection">
            <apply_weakly/>
            <align_bc_with_cartesian>
              <x_component>
                <constant>
                  <real_value rank="0">0</real_value>
                </constant>
              </x_component>
              <y_component>
                <constant>
                  <real_value rank="0">0</real_value>
                </constant>
              </y_component>
              <z_component>
                <constant>
                  <real_value rank="0">3.754e-3</real_value>
                </constant>
              </z_component>
            </align_bc_with_cartesian>
          </type>
        </boundary_conditions>
        <tensor_field name="Viscosity" rank="2">
          <prescribed>
            <value name="WholeMesh">
              <anisotropic_asymmetric>
                <constant>
                  <real_value symmetric="false" dim2="dim" shape="3 3" dim1="dim" rank="2">3.0e-4 3.0e-4 3.0e-4 3.0e-4 3.0e-4 3.0e-4 3.0e-4 3.0e-4 3.0e-4</real_value>
                </constant>
              </anisotropic_asymmetric>
            </value>
            <output/>
          </prescribed>
        </tensor_field>
        <output/>
        <stat>
          <include_in_stat/>
          <surface_integral type="normal" name="bot">
            <surface_ids>
              <integer_value shape="1" rank="1">1</integer_value>
            </surface_ids>
          </surface_integral>
          <previous_time_step>
            <exclude_from_stat/>
          </previous_time_step>
          <nonlinear_field>
            <exclude_from_stat/>
          </nonlinear_field>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </prognostic>
    </vector_field>
    <scalar_field name="PhaseVolumeFraction" rank="0">
      <prognostic>
        <mesh name="PressureMesh"/>
        <equation name="AdvectionDiffusion"/>
        <spatial_discretisation>
          <control_volumes>
            <face_value name="FiniteElement">
              <limit_face_value>
                <limiter name="Sweby"/>
              </limit_face_value>
            </face_value>
            <diffusion_scheme name="ElementGradient"/>
          </control_volumes>
          <conservative_advection>
            <real_value rank="0">1.0</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">1.0</real_value>
          </theta>
        </temporal_discretisation>
        <solver>
          <iterative_method name="gmres">
            <restart>
              <integer_value rank="0">30</integer_value>
            </restart>
          </iterative_method>
          <preconditioner name="hypre">
            <hypre_type name="boomeramg"/>
          </preconditioner>
          <relative_error>
            <real_value rank="0">1.0e-15</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">500</integer_value>
          </max_iterations>
          <ignore_all_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <python>
            <string_value lines="20" type="code" language="python">def val(X, t):
 val=0.37
 #if (X[2]&lt;0.2): val=0.0
 return val</string_value>
          </python>
        </initial_condition>
        <boundary_conditions name="top">
          <surface_ids>
            <integer_value shape="1" rank="1">3</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <apply_weakly/>
            <constant>
              <real_value rank="0">0.0</real_value>
              <comment>0.9975</comment>
            </constant>
          </type>
        </boundary_conditions>
        <boundary_conditions name="bottom">
          <surface_ids>
            <integer_value shape="1" rank="1">1</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <apply_weakly/>
            <constant>
              <real_value rank="0">1.0</real_value>
            </constant>
          </type>
        </boundary_conditions>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <consistent_interpolation/>
      </prognostic>
    </scalar_field>
    <scalar_field name="CFLNumber" rank="0">
      <diagnostic>
        <algorithm name="Internal" material_phase_support="multiple"/>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field name="CV_Pressure" rank="0">
      <diagnostic>
        <algorithm name="Internal" material_phase_support="multiple"/>
        <mesh name="PressureMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field name="Temperature" rank="0">
      <prognostic>
        <mesh name="PressureMesh"/>
        <equation name="InternalEnergy">
          <density name="MaterialDensity"/>
        </equation>
        <spatial_discretisation>
          <control_volumes>
            <face_value name="FiniteElement">
              <limit_face_value>
                <limiter name="Sweby"/>
              </limit_face_value>
            </face_value>
            <diffusion_scheme name="ElementGradient"/>
          </control_volumes>
          <conservative_advection>
            <real_value rank="0">0.0</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">1.0</real_value>
          </theta>
        </temporal_discretisation>
        <solver>
          <iterative_method name="gmres">
            <restart>
              <integer_value rank="0">30</integer_value>
            </restart>
          </iterative_method>
          <preconditioner name="hypre">
            <hypre_type name="boomeramg"/>
          </preconditioner>
          <relative_error>
            <real_value rank="0">1.0e-15</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">501</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <python>
            <string_value lines="20" type="code" language="python">def val(X,t):
 val=20.0
 return val
# phi=-((X[0])**2+(X[1])**2+(X[2]-0.1)**2-0.000125)
# h=0.005 #smoothing
# if ((phi/h)&gt;1.0): val=1.0
# elif ((phi/h)&lt;-1.0): val=0.0
# else: val=0.5*(1.0+phi/h+1.0/numpy.pi*numpy.sin(numpy.pi*phi/h))
# return (val*10.0+99.9)</string_value>
          </python>
        </initial_condition>
        <boundary_conditions name="bottom">
          <surface_ids>
            <integer_value shape="1" rank="1">1</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <apply_weakly/>
            <constant>
              <real_value rank="0">20.0</real_value>
            </constant>
          </type>
        </boundary_conditions>
        <boundary_conditions name="top">
          <surface_ids>
            <integer_value shape="1" rank="1">3</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <apply_weakly/>
            <constant>
              <real_value rank="0">110.0</real_value>
            </constant>
          </type>
        </boundary_conditions>
        <tensor_field name="Diffusivity" rank="2">
          <prescribed>
            <value name="WholeMesh">
              <isotropic>
                <constant>
                  <real_value rank="0">0.6089</real_value>
                </constant>
              </isotropic>
            </value>
            <output/>
          </prescribed>
        </tensor_field>
        <scalar_field name="HeatCapacity" rank="0">
          <prescribed>
            <value name="WholeMesh">
              <constant>
                <real_value rank="0">4200.0</real_value>
              </constant>
            </value>
            <output/>
            <stat/>
            <detectors>
              <exclude_from_detectors/>
            </detectors>
          </prescribed>
        </scalar_field>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <consistent_interpolation/>
      </prognostic>
    </scalar_field>
    <scalar_field name="density_all" rank="0">
      <diagnostic>
        <algorithm name="scalar_python_diagnostic" material_phase_support="multiple">
          <string_value lines="20" type="code" language="python">Ul     = states["phase1"].vector_fields["U"]
Alphal = states["phase1"].scalar_fields["PhaseVolumeFraction"]
Alphag = states["phase2"].scalar_fields["PhaseVolumeFraction"]
Denl   = states["phase1"].scalar_fields["Density"]
Deng   = states["phase2"].scalar_fields["Density"]
nloc = Ul.ele_loc(1)#Number of the nodes: 4 nodes, nloc=3
for i in range(Ul.element_count):#Loop over the element
 u_ele_nodes = Ul.ele_nodes(i)
 p_ele_nodes =  Alphal.ele_nodes(i)
 for j in range(nloc): #loop over the nodes j=0:3
  unod=u_ele_nodes[j] #number of global index for u nodes
  pnod=p_ele_nodes[j] #number of global index for p nodes
  denl    =   Denl.node_val(pnod)
  deng    =   Deng.node_val(pnod)
  Alpha_l = Alphal.node_val(pnod)
  Alpha_g = Alphag.node_val(pnod)
  val = Alpha_l/(Alpha_l+Alpha_g)*denl+Alpha_g/(Alpha_l+Alpha_g)*deng
  field.set(pnod, val)</string_value>
        </algorithm>
        <mesh name="PressureMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field name="density_to_fetch" rank="0">
      <diagnostic>
        <algorithm source_field_type="scalar" material_phase_support="single" name="scalar_copy" source_field_name="density_all"/>
        <mesh name="P0DG"/>
        <output/>
        <stat/>
        <convergence>
          <exclude_from_convergence/>
        </convergence>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <vector_field name="U" rank="1">
      <diagnostic>
        <algorithm name="Internal" material_phase_support="multiple"/>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat>
          <include_in_stat/>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </vector_field>
    <vector_field name="VSource" rank="1">
      <diagnostic>
        <algorithm name="vector_python_diagnostic" material_phase_support="multiple">
          <string_value lines="20" type="code" language="python">dtr=1e-2
import heat
import math
import steam
Tl = states["phase1"].scalar_fields["Temperature"]
Tg = states["phase2"].scalar_fields["Temperature"]
Alphal = states["phase1"].scalar_fields["PhaseVolumeFraction"]
Alphag = states["phase2"].scalar_fields["PhaseVolumeFraction"]
Denl = states["phase1"].scalar_fields["Density"]
Deng = states["phase2"].scalar_fields["Density"]
Ul = states["phase1"].vector_fields["U"]
Ug = states["phase2"].vector_fields["U"]
P  = states["phase1"].scalar_fields["CV_Pressure"]
nloc = field.ele_loc(1)
for i in range(field.element_count):
 u_ele_nodes = Ul.ele_nodes(i)
 p_ele_nodes = P.ele_nodes(i)
 for j in range(nloc):
  unod=u_ele_nodes[j] #number of global index for u nodes
  pnod=p_ele_nodes[j] #number of global index for p nodes
  p=P.node_val(pnod)
  den_l=Denl.node_val(pnod)
  den_g=Deng.node_val(pnod)
  a_g=Alphag.node_val(pnod)
  a_l=Alphal.node_val(pnod)
  T_l=Tl.node_val(pnod)
  T_g=Tg.node_val(pnod)
  U_l=max(abs(Ul.node_val(unod)[:]))
  U_g=max(abs(Ug.node_val(unod)[:]))
  p=1e5
  Tsat=steam.tsat(p*1e-6,1,1)-273.15
  [Gamma_g,Svap_l,Svap_g,h_l,h_g]=heat.vap(p,den_l,den_g,Tsat,U_l,U_g,T_l,T_g,a_l,a_g,dtr)
  Gamma_l= -Gamma_g
  Sigma = numpy.zeros(3)
  Sigma[0] =    Gamma_l
  Sigma[1] =    Gamma_g
  Sigma[2] =    0.0;
  field.set(pnod, Sigma)</string_value>
        </algorithm>
        <mesh name="PressureMesh"/>
        <output/>
        <stat>
          <include_in_stat/>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </vector_field>
    <vector_field name="TSourcE" rank="1">
      <diagnostic>
        <algorithm name="vector_python_diagnostic" material_phase_support="multiple">
          <string_value lines="20" type="code" language="python">beta=2.5
import SharedArray as sa
import time
S=sa.attach("shm://Source")#Heat source shared
T=sa.attach("shm://Temperature")#Temperature shared
D=sa.attach("shm://Density")#Density shared
fluidity_time=sa.attach("shm://t_fluidity") #fluidity time shared
fetch_time=sa.attach("shm://t_fetch")#fetch time shared
ttt=states["phase1"].scalar_fields["Time"] #Current time step
fluidity_time[0]=ttt[0]
maximum_wait_time=100
for i in range(maximum_wait_time):
  if (fluidity_time&lt;=fetch_time/beta):
     break
  time.sleep(1.00)
  print 'Fluidity','Sleep','Wait for fetch',i+1,'second'
print 'current fluidity time',fluidity_time

#Send Temperature/Density to Fetch
Tp     = states["phase3"].scalar_fields["temperature_to_fetch"]
Dp     = states["phase1"].scalar_fields["density_to_fetch"]
for i in range(Tp.element_count):#Loop over the element
 ele_nodes =  Tp.ele_nodes(i)
 pnod=ele_nodes[0]
 T[i]=Tp.node_val(pnod)#assign the node value to shared memory
 D[i]=Dp.node_val(pnod)#assign the node value to shared memory
# Temperature, density and volume fraction are defined in control volume, no need to change


dtr=1e-2
A1 = states["phase1"].scalar_fields["PhaseVolumeFraction"]
A2 = states["phase2"].scalar_fields["PhaseVolumeFraction"]
A3 = states["phase3"].scalar_fields["PhaseVolumeFraction"]
import heat
import math
import steam
Tl = states["phase1"].scalar_fields["Temperature"]
Tg = states["phase2"].scalar_fields["Temperature"]
Alphal = states["phase1"].scalar_fields["PhaseVolumeFraction"]
Alphag = states["phase2"].scalar_fields["PhaseVolumeFraction"]
Denl = states["phase1"].scalar_fields["Density"]
Deng = states["phase2"].scalar_fields["Density"]
Ul = states["phase1"].vector_fields["U"]
Ug = states["phase2"].vector_fields["U"]
#Only one pressure field, P1
P  = states["phase1"].scalar_fields["CV_Pressure"]
nloc = field.ele_loc(1)
for i in range(field.element_count):
 f_ele_nodes = field.ele_nodes(i)
 a_ele_nodes = Alphal.ele_nodes(i)
 for j in range(nloc):
  unod=f_ele_nodes[j] #number of global index for u nodes
  pnod=a_ele_nodes[j] #number of global index for p nodes
  p=P.node_val(pnod)
  den_l=Denl.node_val(pnod)
  den_g=Deng.node_val(pnod)
  a_g=Alphag.node_val(pnod)
  a_l=Alphal.node_val(pnod)
  T_l=Tl.node_val(pnod)
  T_g=Tg.node_val(pnod)
  U_l=max(abs(Ul.node_val(unod)[:]))
  U_g=max(abs(Ug.node_val(unod)[:]))
  if (p&lt;1.0e4):p=1.0e4
  p=1e5
  Tsat=steam.tsat(p*1e-6,1,1)-273.15
  [Gamma_g,Svap_l,Svap_g,h_l,h_g]=heat.vap(p,den_l,den_g,Tsat,U_l,U_g,T_l,T_g,a_l,a_g,dtr)
  Gamma_l=-Gamma_g
  Sigma = numpy.zeros(3)
  Cp_l=4200.0
  Cp_g=1996.0
  #Sigma[0] = Svap_l*(Tsat-T_l)+Gamma_l*2.26e6+Gamma_l*(h_l-Cp_l*T_l) 
  #Sigma[1] = Svap_g*(Tsat-T_g)+Gamma_g*(h_g-Cp_g*T_g)
  if Gamma_l&lt;0:
   Sigma[0] = Svap_l*Tsat+Gamma_l*h_l+Gamma_l*2.26e6#+Gamma_l*T_l
   Sigma[1] = Svap_g*Tsat+Gamma_g*h_g-Cp_g*Gamma_g*T_g
  else:
   Sigma[0] = Svap_l*Tsat+Gamma_l*h_l+Gamma_l*2.26e6+Gamma_l*T_l
   Sigma[1] = Svap_g*Tsat+Gamma_g*h_g#-Cp_g*Gamma_g*T_g
  
  Sigma[2] = S[pnod]*1e6
  field.set(pnod, Sigma)</string_value>
        </algorithm>
        <mesh name="PressureMesh"/>
        <output/>
        <stat>
          <include_in_stat/>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </vector_field>
    <tensor_field name="UAbsorB" rank="2">
      <nphase>
        <integer_value rank="0">3</integer_value>
      </nphase>
      <diagnostic>
        <algorithm name="tensor_python_diagnostic" material_phase_support="multiple">
          <string_value lines="20" type="code" language="python">d_p=4e-3
d_b=5e-3
import heat
A1 = states["phase1"].scalar_fields["PhaseVolumeFraction"]
A2 = states["phase2"].scalar_fields["PhaseVolumeFraction"]
A3 = states["phase3"].scalar_fields["PhaseVolumeFraction"]
Ul = states["phase1"].vector_fields["U"]
Ug = states["phase2"].vector_fields["U"]
nloc = field.ele_loc(1)
rho_l = 1000.0 ; rho_g = 1.0; rho_s = 7600.0
for i in range(field.element_count):
 f_ele_nodes = field.ele_nodes(i)
 a_ele_nodes = A1.ele_nodes(i)
 for j in range(nloc):
  fnod = f_ele_nodes[j] ; anod = a_ele_nodes[j] 
  U_l=max(abs(Ul.node_val(fnod)[:]))
  U_g=max(abs(Ug.node_val(fnod)[:]))
  a_l = A1.node_val(anod) ; a_g = A2.node_val(anod);a_s = A3.node_val(anod)
  [S_lg_l, S_lg_g, S_ls_l, S_gs_g]=heat.drag_3_phase(1000,0.5, U_l, U_g, 0, a_l, a_g, a_s, d_p, d_b,0.2)
  
  Sigma = numpy.zeros((3, 3))
  #S_lg_l=a_g*1e6
  #S_lg_g=a_l*1e6
  #S_ls_l=a_s*1e6
  #S_gs_g=a_s*1e6
  #                 water                   gas                solid
  Sigma[0][0] =  S_lg_l+S_ls_l; Sigma[0][1] = -S_lg_g;           Sigma[0][2] = -S_ls_l  #water
  Sigma[1][0] = -S_lg_g       ; Sigma[1][1] = S_gs_g+ S_lg_g;   Sigma[1][2] = -S_gs_g  #gas
  Sigma[2][0] =  0.0 ;          Sigma[2][1] = 0.0  ;            Sigma[2][2] =  1e8     #solid
  
  field.set(fnod, Sigma)</string_value>
        </algorithm>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat>
          <include_in_stat/>
        </stat>
      </diagnostic>
    </tensor_field>
    <tensor_field name="TAbsorB" rank="2">
      <nphase>
        <integer_value rank="0">3</integer_value>
      </nphase>
      <diagnostic>
        <algorithm name="tensor_python_diagnostic" material_phase_support="multiple">
          <string_value lines="20" type="code" language="python">dtr=1e-2
d_p=4e-3
d_b=5e-3
import heat
import math
import steam
Tl = states["phase1"].scalar_fields["Temperature"]
Tg = states["phase2"].scalar_fields["Temperature"]
Alphal = states["phase1"].scalar_fields["PhaseVolumeFraction"]
Alphag = states["phase2"].scalar_fields["PhaseVolumeFraction"]
Denl = states["phase1"].scalar_fields["Density"]
Deng = states["phase2"].scalar_fields["Density"]
Ul = states["phase1"].vector_fields["U"]
Ug = states["phase2"].vector_fields["U"]
#Only one pressure field, P1
P  = states["phase1"].scalar_fields["CV_Pressure"]
nloc = field.ele_loc(1)
for i in range(field.element_count):
 f_ele_nodes = field.ele_nodes(i)
 a_ele_nodes = Alphal.ele_nodes(i)
 for j in range(nloc):
  unod=f_ele_nodes[j] #number of global index for u nodes
  pnod=a_ele_nodes[j] #number of global index for p nodes
  p=P.node_val(pnod)
  den_l=Denl.node_val(pnod)
  den_g=Deng.node_val(pnod)
  a_g=Alphag.node_val(pnod)
  a_l=Alphal.node_val(pnod)
  T_l=Tl.node_val(pnod)
  T_g=Tg.node_val(pnod)
  U_l=max(abs(Ul.node_val(unod)[:]))
  U_g=max(abs(Ug.node_val(unod)[:]))
  if (p&lt;1.0e5):p=1.0e5
  p=1e5
  Tsat=steam.tsat(p*1e-6,1,1)-273.15
  [Gamma_g,Svap_l,Svap_g,h_l,h_g]=heat.vap(p,den_l,den_g,Tsat,U_l,U_g,T_l,T_g,a_l,a_g,dtr)
  Gamma_l=-Gamma_g
  #[St_gl,St_sl,St_sg]=heat.tabsorb(den_l,den_g,U_l,U_g,0,4200,1996,1e-3,1e-5,0.6,0.01,d_p,d_b)
  St_gl=1e3
  St_sl=5e4
  St_sg=1e4
  
  Sigma = numpy.zeros((3, 3))
  Cp_l=4200.0
  Cp_g=1996.0
  if Gamma_l&lt;0:
   Sigma[0][0] =  St_gl + St_sl +Svap_l - Cp_l*Gamma_l
   Sigma[1][1] =  St_gl + St_sg +Svap_g# - Cp_g*Gamma_g
  else:
   Sigma[0][0] =  St_gl + St_sl +Svap_l# - Cp_l*Gamma_l
   Sigma[1][1] =  St_gl + St_sg +Svap_g - Cp_g*Gamma_g
  
  if Sigma[0][0]&lt;0: print 'error Sigma00',Sigma[0][0],Gamma_l,'Svap_l',Svap_l,'Svap_g',Svap_g
  if Sigma[1][1]&lt;0: print 'error Sigma11',Sigma[1][1],Gamma_g,'Svap_l',Svap_l,'Svap_g',Svap_g
  
  Sigma[0][1] = -St_gl;    
  Sigma[0][2] = -St_sl  #water
  Sigma[1][0] = -St_gl;     
  Sigma[1][2] = -St_sg  #gas
  Sigma[2][0] = -St_sl ;     
  Sigma[2][1] = -St_sg;    
  Sigma[2][2] =  St_sl + St_sg  #solid
  field.set(unod, Sigma)</string_value>
        </algorithm>
        <mesh name="PressureMesh"/>
        <output/>
        <stat>
          <include_in_stat/>
        </stat>
      </diagnostic>
    </tensor_field>
  </material_phase>
  <material_phase name="phase2">
    <equation_of_state>
      <incompressible>
        <linear>
          <all_equal>
            <real_value rank="0">0.554</real_value>
          </all_equal>
        </linear>
      </incompressible>
    </equation_of_state>
    <scalar_field name="Pressure" rank="0">
      <aliased material_phase_name="phase1" field_name="Pressure"/>
    </scalar_field>
    <scalar_field name="Density" rank="0">
      <prognostic>
        <mesh name="PressureMesh"/>
        <spatial_discretisation>
          <continuous_galerkin>
            <stabilisation>
              <no_stabilisation/>
            </stabilisation>
            <advection_terms/>
            <mass_terms/>
          </continuous_galerkin>
          <conservative_advection>
            <real_value rank="0">1.0</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">1.0</real_value>
          </theta>
        </temporal_discretisation>
        <initial_condition name="WholeMesh">
          <constant>
            <real_value rank="0">0.554</real_value>
          </constant>
        </initial_condition>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </prognostic>
    </scalar_field>
    <vector_field name="Velocity" rank="1">
      <prognostic>
        <mesh name="VelocityMesh"/>
        <equation name="LinearMomentum"/>
        <spatial_discretisation>
          <discontinuous_galerkin>
            <mass_terms>
              <lump_mass_matrix/>
            </mass_terms>
            <viscosity_scheme>
              <stress_form/>
              <linear_scheme>
                <high_order/>
              </linear_scheme>
            </viscosity_scheme>
            <advection_scheme>
              <upwind/>
              <integrate_advection_by_parts>
                <twice/>
              </integrate_advection_by_parts>
            </advection_scheme>
            <les_model>
              <model>
                <integer_value rank="0">2</integer_value>
              </model>
              <smagorinsky_coefficient>
                <real_value rank="0">0.1</real_value>
              </smagorinsky_coefficient>
              <tensor_form/>
            </les_model>
          </discontinuous_galerkin>
          <conservative_advection>
            <real_value rank="0">0.0</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">1.0</real_value>
          </theta>
          <relaxation>
            <real_value rank="0">1.0</real_value>
          </relaxation>
        </temporal_discretisation>
        <solver>
          <iterative_method name="gmres">
            <restart>
              <integer_value rank="0">30</integer_value>
            </restart>
          </iterative_method>
          <preconditioner name="hypre">
            <hypre_type name="boomeramg"/>
          </preconditioner>
          <relative_error>
            <real_value rank="0">1.0e-7</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">1666</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <constant>
            <real_value shape="3" dim1="dim" rank="1">0.0 0.0 0.0</real_value>
          </constant>
        </initial_condition>
        <boundary_conditions name="bottom">
          <surface_ids>
            <integer_value shape="1" rank="1">1</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <apply_weakly/>
            <align_bc_with_cartesian>
              <x_component>
                <constant>
                  <real_value rank="0">0.0</real_value>
                </constant>
              </x_component>
              <y_component>
                <constant>
                  <real_value rank="0">0.0</real_value>
                </constant>
              </y_component>
              <z_component>
                <constant>
                  <real_value rank="0">0.0</real_value>
                </constant>
              </z_component>
            </align_bc_with_cartesian>
          </type>
        </boundary_conditions>
        <boundary_conditions name="bottom_momentum">
          <surface_ids>
            <integer_value shape="1" rank="1">1</integer_value>
          </surface_ids>
          <type name="momentum">
            <align_bc_with_cartesian>
              <x_component>
                <constant>
                  <real_value rank="0">0.0</real_value>
                </constant>
              </x_component>
              <y_component>
                <constant>
                  <real_value rank="0">0.0</real_value>
                </constant>
              </y_component>
              <z_component>
                <constant>
                  <real_value rank="0">0.0</real_value>
                </constant>
              </z_component>
            </align_bc_with_cartesian>
          </type>
        </boundary_conditions>
        <boundary_conditions name="sides">
          <surface_ids>
            <integer_value shape="1" rank="1">2</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <apply_weakly/>
            <align_bc_with_cartesian>
              <x_component>
                <constant>
                  <real_value rank="0">0.0</real_value>
                </constant>
              </x_component>
              <y_component>
                <constant>
                  <real_value rank="0">0.0</real_value>
                </constant>
              </y_component>
              <z_component>
                <constant>
                  <real_value rank="0">0.0</real_value>
                </constant>
              </z_component>
            </align_bc_with_cartesian>
          </type>
        </boundary_conditions>
        <boundary_conditions name="sides_momentum">
          <surface_ids>
            <integer_value shape="1" rank="1">2</integer_value>
          </surface_ids>
          <type name="momentum">
            <align_bc_with_cartesian>
              <x_component>
                <constant>
                  <real_value rank="0">0.0</real_value>
                </constant>
              </x_component>
              <y_component>
                <constant>
                  <real_value rank="0">0.0</real_value>
                </constant>
              </y_component>
              <z_component>
                <constant>
                  <real_value rank="0">0.0</real_value>
                </constant>
              </z_component>
            </align_bc_with_cartesian>
          </type>
        </boundary_conditions>
        <boundary_conditions name="top_momentum">
          <surface_ids>
            <integer_value shape="1" rank="1">3</integer_value>
          </surface_ids>
          <type name="momentum">
            <align_bc_with_cartesian>
              <x_component>
                <constant>
                  <real_value rank="0">0.0</real_value>
                </constant>
              </x_component>
              <y_component>
                <constant>
                  <real_value rank="0">0.0</real_value>
                </constant>
              </y_component>
              <z_component>
                <constant>
                  <real_value rank="0">0.0</real_value>
                </constant>
              </z_component>
            </align_bc_with_cartesian>
          </type>
        </boundary_conditions>
        <tensor_field name="Viscosity" rank="2">
          <prescribed>
            <value name="WholeMesh">
              <anisotropic_asymmetric>
                <constant>
                  <real_value symmetric="false" dim2="dim" shape="3 3" dim1="dim" rank="2">1.0e-4 1.0e-4 1.0e-4 1.0e-4 1.0e-4 1.0e-4 1.0e-4 1.0e-4 1.0e-4</real_value>
                </constant>
              </anisotropic_asymmetric>
            </value>
            <output/>
          </prescribed>
        </tensor_field>
        <output/>
        <stat>
          <include_in_stat/>
          <surface_integral type="normal" name="top">
            <surface_ids>
              <integer_value shape="1" rank="1">3</integer_value>
            </surface_ids>
          </surface_integral>
          <previous_time_step>
            <exclude_from_stat/>
          </previous_time_step>
          <nonlinear_field>
            <exclude_from_stat/>
          </nonlinear_field>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </prognostic>
    </vector_field>
    <scalar_field name="PhaseVolumeFraction" rank="0">
      <prognostic>
        <mesh name="PressureMesh"/>
        <equation name="AdvectionDiffusion"/>
        <spatial_discretisation>
          <control_volumes>
            <face_value name="FiniteElement">
              <limit_face_value>
                <limiter name="Sweby"/>
              </limit_face_value>
            </face_value>
            <diffusion_scheme name="ElementGradient"/>
          </control_volumes>
          <conservative_advection>
            <real_value rank="0">1.0</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">1.0</real_value>
          </theta>
        </temporal_discretisation>
        <solver>
          <iterative_method name="gmres">
            <restart>
              <integer_value rank="0">30</integer_value>
            </restart>
          </iterative_method>
          <preconditioner name="hypre">
            <hypre_type name="boomeramg"/>
          </preconditioner>
          <relative_error>
            <real_value rank="0">1.0e-15</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">500</integer_value>
          </max_iterations>
          <ignore_all_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <python>
            <string_value lines="20" type="code" language="python">def val(X, t):
 #val=1.0-0.01
 val=0.0
 return val</string_value>
          </python>
        </initial_condition>
        <boundary_conditions name="top">
          <surface_ids>
            <integer_value shape="1" rank="1">3</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <apply_weakly/>
            <constant>
              <real_value rank="0">1.0</real_value>
              <comment>0.0025</comment>
            </constant>
          </type>
        </boundary_conditions>
        <boundary_conditions name="bottom">
          <surface_ids>
            <integer_value shape="1" rank="1">1</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <apply_weakly/>
            <constant>
              <real_value rank="0">0.0</real_value>
            </constant>
          </type>
        </boundary_conditions>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <adaptivity_options>
          <absolute_measure>
            <scalar_field name="InterpolationErrorBound" rank="0">
              <prescribed>
                <value name="WholeMesh">
                  <constant>
                    <real_value rank="0">0.01</real_value>
                  </constant>
                </value>
                <output/>
                <stat/>
                <detectors>
                  <exclude_from_detectors/>
                </detectors>
              </prescribed>
            </scalar_field>
          </absolute_measure>
        </adaptivity_options>
        <consistent_interpolation/>
      </prognostic>
    </scalar_field>
    <scalar_field name="CFLNumber" rank="0">
      <diagnostic>
        <algorithm name="Internal" material_phase_support="multiple"/>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field name="Temperature" rank="0">
      <prognostic>
        <mesh name="PressureMesh"/>
        <equation name="InternalEnergy">
          <density name="MaterialDensity"/>
        </equation>
        <spatial_discretisation>
          <control_volumes>
            <face_value name="FiniteElement">
              <limit_face_value>
                <limiter name="Sweby"/>
              </limit_face_value>
            </face_value>
            <diffusion_scheme name="ElementGradient"/>
          </control_volumes>
          <conservative_advection>
            <real_value rank="0">0.0</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">1.0</real_value>
          </theta>
        </temporal_discretisation>
        <solver>
          <iterative_method name="gmres">
            <restart>
              <integer_value rank="0">30</integer_value>
            </restart>
          </iterative_method>
          <preconditioner name="hypre">
            <hypre_type name="boomeramg"/>
          </preconditioner>
          <relative_error>
            <real_value rank="0">1.0e-15</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">501</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <constant>
            <real_value rank="0">20.0</real_value>
          </constant>
        </initial_condition>
        <boundary_conditions name="top">
          <surface_ids>
            <integer_value shape="1" rank="1">3</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <apply_weakly/>
            <constant>
              <real_value rank="0">150</real_value>
            </constant>
          </type>
        </boundary_conditions>
        <boundary_conditions name="bot">
          <surface_ids>
            <integer_value shape="1" rank="1">1</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <apply_weakly/>
            <constant>
              <real_value rank="0">110.0</real_value>
            </constant>
          </type>
        </boundary_conditions>
        <tensor_field name="Diffusivity" rank="2">
          <prescribed>
            <value name="WholeMesh">
              <isotropic>
                <constant>
                  <real_value rank="0">0.025</real_value>
                </constant>
              </isotropic>
            </value>
            <output/>
          </prescribed>
        </tensor_field>
        <scalar_field name="HeatCapacity" rank="0">
          <prescribed>
            <value name="WholeMesh">
              <constant>
                <real_value rank="0">1996.0</real_value>
              </constant>
            </value>
            <output/>
            <stat/>
            <detectors>
              <exclude_from_detectors/>
            </detectors>
          </prescribed>
        </scalar_field>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <consistent_interpolation/>
      </prognostic>
    </scalar_field>
    <vector_field name="U" rank="1">
      <diagnostic>
        <algorithm name="Internal" material_phase_support="multiple"/>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat>
          <include_in_stat/>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </vector_field>
  </material_phase>
  <material_phase name="phase3">
    <equation_of_state>
      <incompressible>
        <linear>
          <all_equal>
            <real_value rank="0">7800</real_value>
          </all_equal>
        </linear>
      </incompressible>
    </equation_of_state>
    <scalar_field name="Pressure" rank="0">
      <aliased material_phase_name="phase1" field_name="Pressure"/>
    </scalar_field>
    <scalar_field name="Density" rank="0">
      <prognostic>
        <mesh name="PressureMesh"/>
        <spatial_discretisation>
          <continuous_galerkin>
            <stabilisation>
              <no_stabilisation/>
            </stabilisation>
            <advection_terms/>
            <mass_terms/>
          </continuous_galerkin>
          <conservative_advection>
            <real_value rank="0">1.0</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">1.0</real_value>
          </theta>
        </temporal_discretisation>
        <initial_condition name="WholeMesh">
          <constant>
            <real_value rank="0">0.0</real_value>
          </constant>
        </initial_condition>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </prognostic>
    </scalar_field>
    <vector_field name="Velocity" rank="1">
      <prognostic>
        <mesh name="VelocityMesh"/>
        <equation name="LinearMomentum"/>
        <spatial_discretisation>
          <discontinuous_galerkin>
            <mass_terms>
              <lump_mass_matrix/>
            </mass_terms>
            <viscosity_scheme>
              <stress_form/>
              <linear_scheme>
                <high_order/>
              </linear_scheme>
            </viscosity_scheme>
            <advection_scheme>
              <upwind/>
              <integrate_advection_by_parts>
                <twice/>
              </integrate_advection_by_parts>
            </advection_scheme>
            <les_model>
              <model>
                <integer_value rank="0">2</integer_value>
              </model>
              <smagorinsky_coefficient>
                <real_value rank="0">0.1</real_value>
              </smagorinsky_coefficient>
              <tensor_form/>
            </les_model>
          </discontinuous_galerkin>
          <conservative_advection>
            <real_value rank="0">0.0</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">1.0</real_value>
          </theta>
          <relaxation>
            <real_value rank="0">1.0</real_value>
          </relaxation>
        </temporal_discretisation>
        <solver>
          <iterative_method name="gmres">
            <restart>
              <integer_value rank="0">30</integer_value>
            </restart>
          </iterative_method>
          <preconditioner name="hypre">
            <hypre_type name="boomeramg"/>
          </preconditioner>
          <relative_error>
            <real_value rank="0">1.0e-7</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">1666</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <constant>
            <real_value shape="3" dim1="dim" rank="1">0.0 0.0 0.0</real_value>
          </constant>
        </initial_condition>
        <boundary_conditions name="bottom">
          <surface_ids>
            <integer_value shape="1" rank="1">1</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <apply_weakly/>
            <align_bc_with_cartesian>
              <x_component>
                <constant>
                  <real_value rank="0">0.0</real_value>
                </constant>
              </x_component>
              <y_component>
                <constant>
                  <real_value rank="0">0.0</real_value>
                </constant>
              </y_component>
              <z_component>
                <constant>
                  <real_value rank="0">0.0</real_value>
                </constant>
              </z_component>
            </align_bc_with_cartesian>
          </type>
        </boundary_conditions>
        <boundary_conditions name="bottom_momentum">
          <surface_ids>
            <integer_value shape="1" rank="1">1</integer_value>
          </surface_ids>
          <type name="momentum">
            <align_bc_with_cartesian>
              <x_component>
                <constant>
                  <real_value rank="0">0.0</real_value>
                </constant>
              </x_component>
              <y_component>
                <constant>
                  <real_value rank="0">0.0</real_value>
                </constant>
              </y_component>
              <z_component>
                <constant>
                  <real_value rank="0">0.0</real_value>
                </constant>
              </z_component>
            </align_bc_with_cartesian>
          </type>
        </boundary_conditions>
        <boundary_conditions name="sides">
          <surface_ids>
            <integer_value shape="1" rank="1">2</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <apply_weakly/>
            <align_bc_with_cartesian>
              <x_component>
                <constant>
                  <real_value rank="0">0.0</real_value>
                </constant>
              </x_component>
              <y_component>
                <constant>
                  <real_value rank="0">0.0</real_value>
                </constant>
              </y_component>
              <z_component>
                <constant>
                  <real_value rank="0">0.0</real_value>
                </constant>
              </z_component>
            </align_bc_with_cartesian>
          </type>
        </boundary_conditions>
        <boundary_conditions name="sides_momentum">
          <surface_ids>
            <integer_value shape="1" rank="1">2</integer_value>
          </surface_ids>
          <type name="momentum">
            <align_bc_with_cartesian>
              <x_component>
                <constant>
                  <real_value rank="0">0.0</real_value>
                </constant>
              </x_component>
              <y_component>
                <constant>
                  <real_value rank="0">0.0</real_value>
                </constant>
              </y_component>
              <z_component>
                <constant>
                  <real_value rank="0">0.0</real_value>
                </constant>
              </z_component>
            </align_bc_with_cartesian>
          </type>
        </boundary_conditions>
        <boundary_conditions name="top_momentum">
          <surface_ids>
            <integer_value shape="1" rank="1">3</integer_value>
          </surface_ids>
          <type name="momentum">
            <align_bc_with_cartesian>
              <x_component>
                <constant>
                  <real_value rank="0">0.0</real_value>
                </constant>
              </x_component>
              <y_component>
                <constant>
                  <real_value rank="0">0.0</real_value>
                </constant>
              </y_component>
              <z_component>
                <constant>
                  <real_value rank="0">0.0</real_value>
                </constant>
              </z_component>
            </align_bc_with_cartesian>
          </type>
        </boundary_conditions>
        <tensor_field name="Viscosity" rank="2">
          <prescribed>
            <value name="WholeMesh">
              <anisotropic_asymmetric>
                <constant>
                  <real_value symmetric="false" dim2="dim" shape="3 3" dim1="dim" rank="2">0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0</real_value>
                </constant>
              </anisotropic_asymmetric>
            </value>
            <output/>
          </prescribed>
        </tensor_field>
        <output/>
        <stat>
          <include_in_stat/>
          <previous_time_step>
            <exclude_from_stat/>
          </previous_time_step>
          <nonlinear_field>
            <exclude_from_stat/>
          </nonlinear_field>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </prognostic>
    </vector_field>
    <scalar_field name="PhaseVolumeFraction" rank="0">
      <prognostic>
        <mesh name="PressureMesh"/>
        <equation name="AdvectionDiffusion"/>
        <spatial_discretisation>
          <control_volumes>
            <face_value name="FiniteElement">
              <limit_face_value>
                <limiter name="Sweby"/>
              </limit_face_value>
            </face_value>
            <diffusion_scheme name="ElementGradient"/>
          </control_volumes>
          <conservative_advection>
            <real_value rank="0">1.0</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">1.0</real_value>
          </theta>
        </temporal_discretisation>
        <solver>
          <iterative_method name="gmres">
            <restart>
              <integer_value rank="0">30</integer_value>
            </restart>
          </iterative_method>
          <preconditioner name="hypre">
            <hypre_type name="boomeramg"/>
          </preconditioner>
          <relative_error>
            <real_value rank="0">1.0e-15</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">500</integer_value>
          </max_iterations>
          <ignore_all_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <python>
            <string_value lines="20" type="code" language="python">def val(X, t):
 #val=0.01
 val=1.0-0.37
 return val</string_value>
          </python>
        </initial_condition>
        <boundary_conditions name="top">
          <surface_ids>
            <integer_value shape="1" rank="1">3</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <apply_weakly/>
            <constant>
              <real_value rank="0">0.0</real_value>
            </constant>
          </type>
        </boundary_conditions>
        <boundary_conditions name="bottom">
          <surface_ids>
            <integer_value shape="1" rank="1">1</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <apply_weakly/>
            <constant>
              <real_value rank="0">0.0</real_value>
            </constant>
          </type>
        </boundary_conditions>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <consistent_interpolation/>
      </prognostic>
    </scalar_field>
    <scalar_field name="CFLNumber" rank="0">
      <diagnostic>
        <algorithm name="Internal" material_phase_support="multiple"/>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field name="Temperature" rank="0">
      <prognostic>
        <mesh name="PressureMesh"/>
        <equation name="InternalEnergy">
          <density name="MaterialDensity"/>
        </equation>
        <spatial_discretisation>
          <control_volumes>
            <face_value name="FiniteElement">
              <limit_face_value>
                <limiter name="Sweby"/>
              </limit_face_value>
            </face_value>
            <diffusion_scheme name="ElementGradient"/>
          </control_volumes>
          <conservative_advection>
            <real_value rank="0">0.0</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">1.0</real_value>
          </theta>
        </temporal_discretisation>
        <solver>
          <iterative_method name="gmres">
            <restart>
              <integer_value rank="0">30</integer_value>
            </restart>
          </iterative_method>
          <preconditioner name="hypre">
            <hypre_type name="boomeramg"/>
          </preconditioner>
          <relative_error>
            <real_value rank="0">1.0e-15</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">501</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <constant>
            <real_value rank="0">20.0</real_value>
          </constant>
        </initial_condition>
        <tensor_field name="Diffusivity" rank="2">
          <prescribed>
            <value name="WholeMesh">
              <isotropic>
                <constant>
                  <real_value rank="0">0.0</real_value>
                </constant>
              </isotropic>
            </value>
            <output/>
          </prescribed>
        </tensor_field>
        <scalar_field name="HeatCapacity" rank="0">
          <prescribed>
            <value name="WholeMesh">
              <constant>
                <real_value rank="0">490.0</real_value>
              </constant>
            </value>
            <output/>
            <stat/>
            <detectors>
              <exclude_from_detectors/>
            </detectors>
          </prescribed>
        </scalar_field>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <consistent_interpolation/>
      </prognostic>
    </scalar_field>
    <scalar_field name="temperature_to_fetch" rank="0">
      <diagnostic>
        <algorithm source_field_type="scalar" material_phase_support="single" name="scalar_copy" source_field_name="Temperature"/>
        <mesh name="P0DG"/>
        <output/>
        <stat/>
        <convergence>
          <exclude_from_convergence/>
        </convergence>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </diagnostic>
    </scalar_field>
    <vector_field name="U" rank="1">
      <diagnostic>
        <algorithm name="Internal" material_phase_support="multiple"/>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat>
          <include_in_stat/>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </vector_field>
  </material_phase>
</multiphase_options>
