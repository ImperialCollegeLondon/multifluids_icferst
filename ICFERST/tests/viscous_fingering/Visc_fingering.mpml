<?xml version='1.0' encoding='utf-8'?>
<icferst_options>
  <simulation_name>
    <string_value lines="1">Visc_fingering</string_value>
  </simulation_name>
  <porous_media_simulator />
  <geometry>
    <dimension>
      <integer_value rank="0">2</integer_value>
    </dimension>
    <mesh name="CoordinateMesh">
      <from_file file_name="MeshQ-Pert">
        <format name="gmsh" />
        <stat>
          <include_in_stat />
        </stat>
      </from_file>
    </mesh>
    <simulation_quality>
      <string_value>balanced</string_value>
    </simulation_quality>
  </geometry>
  <solver_options>
    <Non_Linear_Solver>
      <integer_value rank="0">15</integer_value>
      <Fixed_Point_Iteration>
        <real_value rank="0">5e-2</real_value>
        <Infinite_norm_tol>
          <real_value rank="0">0.05</real_value>
          <adaptive_non_linear_iterations>
            <integer_value rank="0">5</integer_value>
          </adaptive_non_linear_iterations>
        </Infinite_norm_tol>
        <Backtracking_factor>
          <real_value rank="0">1</real_value>
        </Backtracking_factor>
        <Vanishing_relaxation>
          <real_value rank="0">0</real_value>
          <Vanishing_for_transport>
            <real_value rank="0">0</real_value>
          </Vanishing_for_transport>
        </Vanishing_relaxation>
      </Fixed_Point_Iteration>
    </Non_Linear_Solver>
  </solver_options>
  <io>
    <dump_format>
      <string_value>vtk</string_value>
    </dump_format>
    <dump_units_SI/>
    <dump_period_in_timesteps>
      <constant>
        <integer_value rank="0">1</integer_value>
      </constant>
    </dump_period_in_timesteps>
    <Courant_number />
    <dump_boundaryflux>
      <surface_ids>
        <integer_value rank="1" shape="2">1 2</integer_value>
      </surface_ids>
    </dump_boundaryflux>
  </io>
  <timestepping>
    <current_time>
      <real_value rank="0">0.0</real_value>
    </current_time>
    <timestep>
      <real_value rank="0">0.01</real_value>
    </timestep>
    <finish_time>
      <real_value rank="0">0.1</real_value>
    </finish_time>
    <adaptive_timestep>
      <requested_cfl>
        <real_value rank="0">0.05</real_value>
      </requested_cfl>
      <courant_number name="CFLNumber">
        <mesh name="VelocityMesh" />
      </courant_number>
      <minimum_timestep>
        <real_value rank="0">0.01</real_value>
      </minimum_timestep>
    </adaptive_timestep>
  </timestepping>
  <physical_parameters />
  <material_phase name="phase1">
    <phase_properties>
      <Density>
        <incompressible>
          <real_value rank="0">1000</real_value>
        </incompressible>
      </Density>
      <Viscosity>
        <tensor_field name="Viscosity" rank="2">
          <diagnostic>
            <algorithm name="tensor_python_diagnostic" material_phase_support="single">
              <string_value type="code" language="python" lines="20">

import math

Concentration = state.scalar_fields["Concentration"]
R = 5 

#Loop over all the nodes of the input field
for i in range(field.node_count):
 c = Concentration.node_val(i)
 
 #Formula
 val2 = math.exp(R*(1.-c))#Your formula for example
 viscosity =  [[val2, 0],[0, val2]]
 
 #Assign the dummy field
 field.set( i, viscosity )
</string_value>
              <comment>import math
#Pressure = state.scalar_fields["Pressure"]
Concentration = state.scalar_fields["SoluteMassFraction"]
#R = -0.301029996
R = 0.5

for i in range(field.node_count):#Loop over all the nodes of the input field
 c = Concentration.node_val(i)
 #Put your formula here
 val2 = math.exp(R*(1.-c))#Your formula for example
 viscosity =  [[val2, 0],[0, val2]]
 
 #FOR 3D#viscosity =  [[val2, 0, 0],[0, val2, 0],[0, 0, val2]]
 field.set( i, viscosity ) #Assign the value val2 into the field, here it will be into the dummy field


=================


import math

Concentration = state.scalar_fields["SoluteMassFraction"]
R = 5 

#Loop over all the nodes of the input field
for i in range(field.node_count):
 c = Concentration.node_val(i)
 
 #Formula
 val2 = math.exp(R*(1.-c))#Your formula for example
 viscosity =  [[val2, 0],[0, val2]]
 
 #Assign the dummy field
 field.set( i, viscosity )</comment>
            </algorithm>
            <mesh name="PressureMesh" />
            <stat>
              <include_in_stat />
            </stat>
          </diagnostic>
        </tensor_field>
        <viscosity_scheme>
          <tensor_form />
          <nonlinear_scheme />
        </viscosity_scheme>
      </Viscosity>
    </phase_properties>
    <scalar_field rank="0" name="Pressure">
      <prognostic>
        <mesh name="PressureMesh" />
        <initial_condition name="WholeMesh">
          <constant>
            <real_value rank="0">0.0</real_value>
          </constant>
        </initial_condition>
        <boundary_conditions name="outlet">
          <surface_ids>
            <integer_value rank="1" shape="1">2</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <apply_weakly />
            <constant>
              <real_value rank="0">0.0</real_value>
            </constant>
          </type>
        </boundary_conditions>
        <detectors>
          <exclude_from_detectors />
        </detectors>
        <galerkin_projection>
          <continuous>
            <solver />
          </continuous>
        </galerkin_projection>
        <output />
      </prognostic>
    </scalar_field>
    <vector_field rank="1" name="Velocity">
      <prognostic>
        <mesh name="VelocityMesh" />
        <initial_condition name="WholeMesh">
          <constant>
            <real_value rank="1" dim1="dim" shape="2">0 0</real_value>
          </constant>
        </initial_condition>
        <boundary_conditions name="sides">
          <surface_ids>
            <integer_value rank="1" shape="1">3</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <apply_weakly />
            <align_bc_with_cartesian>
              <x_component>
                <constant>
                  <real_value rank="0">0</real_value>
                </constant>
              </x_component>
              <y_component>
                <constant>
                  <real_value rank="0">0</real_value>
                </constant>
              </y_component>
            </align_bc_with_cartesian>
          </type>
        </boundary_conditions>
        <boundary_conditions name="inlet">
          <surface_ids>
            <integer_value rank="1" shape="1">1</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <apply_weakly />
            <align_bc_with_cartesian>
              <x_component>
                <python>
                  <string_value type="code" language="python" lines="20">def val(X,t):  
   import math
   
   Vabs =  5.4e-6  # Radial velocity value
 
   theta = math.atan2(X[1], X[0])
   val   = Vabs*math.cos(theta)
           
   return val</string_value>
                </python>
              </x_component>
              <y_component>
                <python>
                  <string_value type="code" language="python" lines="20">def val(X,t):  
   import math
   
   Vabs = 5.4e-6   # Max velocity value
        
   theta = math.atan2(X[1], X[0])       
   val   = Vabs*math.sin(theta)
      
   return val</string_value>
                </python>
              </y_component>
            </align_bc_with_cartesian>
          </type>
        </boundary_conditions>
        <detectors>
          <include_in_detectors />
        </detectors>
        <galerkin_projection>
          <continuous>
            <solver />
          </continuous>
        </galerkin_projection>
        <output />
      </prognostic>
    </vector_field>
    <scalar_field rank="0" name="PhaseVolumeFraction">
      <prognostic>
        <mesh name="PressureMesh" />
        <initial_condition name="WholeMesh">
          <constant>
            <real_value rank="0">1</real_value>
          </constant>
        </initial_condition>
        <boundary_conditions name="all">
          <surface_ids>
            <integer_value rank="1" shape="3">1 2 3</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <apply_weakly />
            <constant>
              <real_value rank="0">1</real_value>
            </constant>
          </type>
        </boundary_conditions>
        <detectors>
          <include_in_detectors />
        </detectors>
        <galerkin_projection>
          <continuous>
            <solver />
          </continuous>
        </galerkin_projection>
      </prognostic>
    </scalar_field>
    <scalar_field rank="0" name="Concentration">
      <prognostic>
        <mesh name="PressureMesh" />
        <Impose_min_max>
          <automatic_min_limit />
          <automatic_max_limit />
        </Impose_min_max>
        <tensor_field name="Diffusivity" rank="2">
          <prescribed>
            <value name="WholeMesh">
              <isotropic>
                <constant>
                  <real_value rank="0">2.55e-9</real_value>
                </constant>
              </isotropic>
            </value>
            <output />
          </prescribed>
        </tensor_field>
        <initial_condition name="WholeMesh">
          <python>
            <string_value type="code" language="python" lines="20">def val(X,t):
 import math
 import numpy
 import sys
 
 const  = 10e-4 
 theta  = math.atan2(X[1],X[0])
 radius = math.sqrt(X[0]**2 + X[1]**2)
 cosmult= math.cos(60*theta)
 C1     = 2* ( (radius-0.15)/0.05  )
 C2     = 1+ (((radius-0.15)/0.05  )**2)
 c      = const*((C1/C2)**6)*cosmult
   
 val = c
 return val</string_value>
          </python>
        </initial_condition>
        <boundary_conditions name="inlet">
          <surface_ids>
            <integer_value rank="1" shape="1">1</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <apply_weakly />
            <constant>
              <real_value rank="0">1</real_value>
            </constant>
          </type>
        </boundary_conditions>
        <boundary_conditions name="rest">
          <surface_ids>
            <integer_value rank="1" shape="2">2 3</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <apply_weakly />
            <constant>
              <real_value rank="0">0.00001</real_value>
            </constant>
          </type>
        </boundary_conditions>
        <detectors>
          <include_in_detectors />
        </detectors>
        <galerkin_projection>
          <continuous>
            <solver />
          </continuous>
        </galerkin_projection>
      </prognostic>
    </scalar_field>
    <scalar_field rank="0" name="Dummy">
      <diagnostic>
        <algorithm name="Internal" material_phase_support="multiple" />
        <mesh name="PressureMesh" />
        <stat />
        <convergence>
          <include_in_convergence />
        </convergence>
        <detectors>
          <include_in_detectors />
        </detectors>
        <steady_state>
          <include_in_steady_state />
        </steady_state>
      </diagnostic>
    </scalar_field>
  </material_phase>
  <porous_media>
    <scalar_field name="Porosity">
      <prescribed>
        <mesh name="P0DG" />
        <value name="WholeMesh">
          <constant>
            <real_value rank="0">0.2</real_value>
          </constant>
        </value>
        <stat />
        <detectors>
          <exclude_from_detectors />
        </detectors>
        <output />
      </prescribed>
    </scalar_field>
    <tensor_field name="Permeability">
      <prescribed>
        <mesh name="P0DG" />
        <value name="WholeMesh">
          <isotropic>
            <constant>
              <real_value rank="0">2e-12</real_value>
            </constant>
          </isotropic>
        </value>
        <output />
      </prescribed>
    </tensor_field>
  </porous_media>
</icferst_options>