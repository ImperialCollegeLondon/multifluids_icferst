# -*- coding: utf-8 -*-
"""
Created on Fri Apr 25 12:16:07 2014

@author: pablo
"""

import sys
import numpy as np
import matplotlib.pyplot as plt
from scipy import interpolate
from scipy.interpolate import interp1d

#This function calculates the analytical value in the same coordinates than the input position
#THE INTERPOLATION IS LINEAR...THAT HAS TO BE INCREASED TO AT LEAST QUADRATIC

def getAnalytical_interpolated( Analytical_X, Analytical_Y, position):
    #Returns the physical line and line to which certain edge belong
    getAnalytical_interpolated = -1
    k = 0
    #Values are ordered in an increase fashion
    for i in range(len(Analytical_X)):
        if (Analytical_X[i]>=position):
            k = i
            break

    a = (Analytical_Y[k-1] - Analytical_Y[k])/(Analytical_X[k-1] - Analytical_X[k])    
    getAnalytical_interpolated = a * (position-Analytical_X[k-1]) + Analytical_Y[k-1]
    
    return getAnalytical_interpolated 

#Look for -h to show help
auxS = [s for s in sys.argv if '-h'in s]
if len(auxS)>0:
   print 'This script requires two files:' 
   print 'One with analytical data with only numbers, where the first '
   print 'column is the x coordinate and the second contains the value'
   print 'And a second file with the experimental data. Example:'
   print '0.1 12'
   print '0.2 15'
   print 'Also we consider that the coordinate data is stored in an increase fashion'
   print ''
   print 'Example of usage:'
   print 'python CalculateNorms.py Analytical Experimental'
   print ''
   print 'If not input files are introduced then Analytical and Experimental are the considered files'
    
    
if len(sys.argv)>2:
    Analy = sys.argv[1]
    Expe = sys.argv[2]
else:
    Analy = 'Analytical'
    Expe = 'Experimental'


Analytical_X = []
Analytical_Y = []
Analytical=file(Analy,'r')


while True:
    cadena=Analytical.readline()

    if len(cadena) ==0:
        break # EOF
    if len(cadena) <2:
        continue # If a line is empty       
    lista = cadena.split()
    Analytical_X.append(float(lista[0]))
    Analytical_Y.append(float(lista[1]))

Analytical.close

#Create spline curve
#tck = interpolate.splrep(Analytical_X, Analytical_Y, s=0.08)
f = interp1d(Analytical_X, Analytical_Y,kind ='linear')

#ynew = interpolate.splev(Analytical_X, tck, der=0)
#print ynew
Experimental_X = []
Experimental_Y = []
Experimental=file(Expe,'r')


while True:
    cadena=Experimental.readline()

    if len(cadena) ==0:
        break # EOF
    if len(cadena) <2:
        continue # If a line is empty       
    lista = cadena.split()
    Experimental_X.append(float(lista[0]))
    Experimental_Y.append(float(lista[1]))
    
Experimental.close

if len(Experimental_X) < len(Analytical_X):
    print 'We consider that are more or equal experimental data than analytical'
    exit

L1_sum = 0.0
L2_sum = 0.0
L1_sum_shock_front = 0.0
L2_sum_shock_front = 0.0
N_shock = 0
Infinite_Norm = 0.0
for i in range(len(Experimental_X)):
    if (i==0):#The first position is exact, so no need to interpolate
        L1_sum = L1_sum + abs(Analytical_Y[i] - Experimental_Y[i])
        L2_sum = L2_sum + (Analytical_Y[i] - Experimental_Y[i])**2
        continue
    
    position = Experimental_X[i]
#    x = getAnalytical_interpolated( Analytical_X, Analytical_Y, position)
    x = f(position)
    if (x==-1):
        print 'The size of the Experimental and Analytical experiments is different'
        quit

    if (abs(x - Experimental_Y[i])> Infinite_Norm):
        Infinite_Norm = abs(x - Experimental_Y[i])
    L1_sum = L1_sum + abs(x - Experimental_Y[i])
    L2_sum = L2_sum + (x - Experimental_Y[i])**2
    if (abs(x - Experimental_Y[i])>1/100000000):
        N_shock = N_shock + 1
        L1_sum_shock_front = L1_sum_shock_front + abs(x - Experimental_Y[i])
        L2_sum_shock_front = L2_sum_shock_front + (x - Experimental_Y[i])**2      
        
        
print 'L1 norm is:',  L1_sum / len(Experimental_X) 
print 'L2 norm is:',  L2_sum**0.5 / len(Experimental_X)    
#print 'Infinite norm is:', Infinite_Norm
print 'Only considering points with non-zero error:'
print 'L1 norm is:',  L1_sum_shock_front / N_shock 
print 'L2 norm is:',  L2_sum_shock_front**0.5 / N_shock    
print 'To Copy/Paste'
print   L1_sum / len(Experimental_X)
print   L2_sum**0.5 / len(Experimental_X)
print L1_sum_shock_front / N_shock
print L2_sum_shock_front**0.5 / N_shock  
    
    
    
    
