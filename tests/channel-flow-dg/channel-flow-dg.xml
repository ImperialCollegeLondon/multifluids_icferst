<?xml version='1.0' encoding='utf-8'?>
<testproblem>
  <name>channel-flow-dg</name>
  <owner userid="dham"/>
  <problem_definition length="medium" nprocs="1">
    <command_line>for layers in 4 8 16; do cp ./src/chan$layers.msh ./channel.msh; fluidity -v3 -l channel_viscous.flml; cp fluidity.log-0 channel-flow-dg-$layers.log-0; cp fluidity.err-0 channel-flow-dg-$layers.err-0; cp channel-flow-dg.stat channel-flow-dg-$layers.stat; done</command_line>
<!--     <command_line>for layers in 16 32 64; do ./generate_mesh $layers; fluidity channel_viscous.flml; cp channel-flow-dg.stat channel-flow-dg-$layers.stat; done</command_line> -->
  </problem_definition>
  <variables>
    <variable name="convergence" language="python">import numpy
from fluidity_tools import stat_parser
layers=numpy.array([ 4, 8, 16])
error=[]
for layer in layers:
        s=stat_parser("channel-flow-dg-"+`layer`+".stat")
        error.append((s["Water"]['AnalyticUVelocitySolutionError']['l2norm'][-1],
        s["Water"]['AnalyticPressureSolutionError']['l2norm'][-1]))

error=numpy.array(error)
convergence=numpy.log(error[:-1,:]/error[1:,:])/numpy.log(numpy.matrix(layers[1:]/layers[:-1]).T*numpy.matrix([1,1]))</variable>
  </variables>
  <pass_tests>
    <test name="VelocityConvergesToSecondOrder" language="python">import numpy
assert(numpy.all(convergence[:,1]&gt;1.9))</test>
    <test name="PressureConvergesToSecondOrder" language="python">import numpy
assert(numpy.all(convergence[:,0]&gt;1.9))</test>
  </pass_tests>
</testproblem>
