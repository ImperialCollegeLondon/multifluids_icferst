<?xml version='1.0' encoding='utf8'?>
<shallow_water_options>
    <simulation_name>
        <string_value lines="1">wave_B</string_value>
    </simulation_name>
    <geometry>
        <dimension>
            <integer_value rank="0">3</integer_value>
        </dimension>
        <mesh name="CoordinateMesh">
            <from_file file_name="src/mesh_B">
                <format name="triangle"/>
                <dimension>
                    <integer_value rank="0">1</integer_value>
                </dimension>
                <stat>
                    <include_in_stat/>
                </stat>
            </from_file>
        </mesh>
        <mesh name="VelocityMesh">
            <from_mesh>
                <mesh name="PeriodicMesh"/>
                <mesh_continuity>
                    <string_value>discontinuous</string_value>
                </mesh_continuity>
                <stat>
                    <exclude_from_stat/>
                </stat>
            </from_mesh>
        </mesh>
        <mesh name="PressureMesh">
            <from_mesh>
                <mesh name="PeriodicMesh"/>
                <mesh_shape>
                    <polynomial_degree>
                        <integer_value rank="0">2</integer_value>
                    </polynomial_degree>
                </mesh_shape>
                <stat>
                    <exclude_from_stat/>
                </stat>
            </from_mesh>
        </mesh>
        <mesh name="PeriodicMesh">
            <from_mesh>
                <mesh name="CoordinateMesh"/>
                <periodic_boundary_conditions name="periodicity">
                    <physical_boundary_ids>
                        <integer_value rank="1" shape="1">1</integer_value>
                    </physical_boundary_ids>
                    <aliased_boundary_ids>
                        <integer_value rank="1" shape="1">2</integer_value>
                    </aliased_boundary_ids>
                    <coordinate_map>
                        <string_value lines="20" type="python">def val(X,t):
  result = list(X)
  result[0]=result[0]-1.0
  return result</string_value>
                    </coordinate_map>
                </periodic_boundary_conditions>
                <stat>
                    <exclude_from_stat/>
                </stat>
            </from_mesh>
        </mesh>
        <quadrature>
            <degree>
                <integer_value rank="0">4</integer_value>
            </degree>
        </quadrature>
    </geometry>
    <io>
        <dump_format>
            <string_value>vtk</string_value>
        </dump_format>
        <dump_period_in_timesteps>
            <constant>
                <integer_value rank="0">1</integer_value>
            </constant>
        </dump_period_in_timesteps>
        <output_mesh name="CoordinateMesh"/>
    </io>
    <timestepping>
        <current_time>
            <real_value rank="0">0</real_value>
        </current_time>
        <timestep>
            <real_value rank="0">0.125</real_value>
        </timestep>
        <nonlinear_iterations>
            <integer_value rank="0">1</integer_value>
        </nonlinear_iterations>
        <finish_time>
            <real_value rank="0">1</real_value>
        </finish_time>
    </timestepping>
    <physical_parameters>
        <gravity>
            <magnitude>
                <real_value rank="0">1</real_value>
            </magnitude>
            <vector_field name="GravityDirection" rank="1">
                <prescribed>
                    <mesh name="CoordinateMesh"/>
                    <value name="WholeMesh">
                        <constant>
                            <real_value rank="1" shape="3" dim1="dim">0 0 -1</real_value>
                        </constant>
                    </value>
                    <output/>
                    <stat>
                        <include_in_stat/>
                    </stat>
                    <detectors>
                        <exclude_from_detectors/>
                    </detectors>
                    <adjoint_storage>
                        <exists_in_forward/>
                    </adjoint_storage>
                </prescribed>
            </vector_field>
        </gravity>
    </physical_parameters>
    <material_phase name="Fluid">
        <vector_field name="Velocity" rank="1">
            <prognostic>
                <mesh name="VelocityMesh"/>
                <equation name="ShallowWater"/>
                <spatial_discretisation>
                    <discontinuous_galerkin>
                        <advection_scheme>
                            <none/>
                        </advection_scheme>
                    </discontinuous_galerkin>
                    <conservative_advection>
                        <real_value rank="0">0</real_value>
                    </conservative_advection>
                </spatial_discretisation>
                <solver>
                    <iterative_method name="preonly"/>
                    <preconditioner name="lu"/>
                    <relative_error>
                        <real_value rank="0">1e-07</real_value>
                    </relative_error>
                    <max_iterations>
                        <integer_value rank="0">500</integer_value>
                    </max_iterations>
                    <never_ignore_solver_failures/>
                    <diagnostics>
                        <monitors/>
                    </diagnostics>
                </solver>
                <initial_condition name="WholeMesh">
                    <python>
                        <string_value lines="20" type="python">def val(X, t):
  import shallow_water_optimisation_bounds as constants
  return constants.u_exact(X[0], t)</string_value>
                    </python>
                </initial_condition>
                <output/>
                <stat>
                    <include_in_stat/>
                    <previous_time_step>
                        <exclude_from_stat/>
                    </previous_time_step>
                    <nonlinear_field>
                        <exclude_from_stat/>
                    </nonlinear_field>
                </stat>
                <convergence>
                    <include_in_convergence/>
                </convergence>
                <detectors>
                    <include_in_detectors/>
                </detectors>
                <steady_state>
                    <include_in_steady_state/>
                </steady_state>
                <consistent_interpolation/>
            </prognostic>
        </vector_field>
        <scalar_field name="LayerThickness" rank="0">
            <prognostic>
                <mesh name="PressureMesh"/>
                <spatial_discretisation>
                    <continuous_galerkin>
                        <advection_terms>
                            <exclude_advection_terms/>
                        </advection_terms>
                    </continuous_galerkin>
                    <conservative_advection>
                        <real_value rank="0">0</real_value>
                    </conservative_advection>
                </spatial_discretisation>
                <temporal_discretisation>
                    <theta>
                        <real_value rank="0">0.5</real_value>
                    </theta>
                    <relaxation>
                        <real_value rank="0">1</real_value>
                    </relaxation>
                </temporal_discretisation>
                <solver>
                    <iterative_method name="preonly"/>
                    <preconditioner name="lu"/>
                    <relative_error>
                        <real_value rank="0">1e-07</real_value>
                    </relative_error>
                    <max_iterations>
                        <integer_value rank="0">500</integer_value>
                    </max_iterations>
                    <never_ignore_solver_failures/>
                    <cache_solver_context/>
                    <diagnostics>
                        <monitors/>
                    </diagnostics>
                </solver>
                <initial_condition name="WholeMesh">
                    <python>
                        <string_value lines="20" type="python">def val(X, t):
  import shallow_water_optimisation_bounds as constants
  #return constants.eta_exact(X[0], t)
  # Instead of prescribing the exact eta we will optimise to it
  return 0.0</string_value>
                    </python>
                </initial_condition>
                <mean_layer_thickness>
                    <real_value rank="0">1</real_value>
                </mean_layer_thickness>
                <output/>
                <stat/>
                <consistent_interpolation/>
            </prognostic>
        </scalar_field>
        <scalar_field name="AnalyticalLayerThickness" rank="0">
            <prescribed>
                <mesh name="PressureMesh"/>
                <value name="WholeMesh">
                    <python>
                        <string_value lines="20" type="python">def val(X,t):
 import shallow_water_optimisation_bounds as constants
 x=X[0]
 return constants.eta_exact(x, t)</string_value>
                    </python>
                </value>
                <output/>
                <stat/>
                <detectors>
                    <exclude_from_detectors/>
                </detectors>
                <adjoint_storage>
                    <exists_in_forward/>
                </adjoint_storage>
            </prescribed>
        </scalar_field>
        <scalar_field name="LayerThicknessError" rank="0">
            <diagnostic>
                <algorithm name="scalar_difference" source_field_2_type="scalar" source_field_1_name="LayerThickness" source_field_2_name="AnalyticalLayerThickness" material_phase_support="single" source_field_1_type="scalar">
                    <absolute_difference/>
                </algorithm>
                <mesh name="PressureMesh"/>
                <output/>
                <stat/>
                <convergence>
                    <include_in_convergence/>
                </convergence>
                <detectors>
                    <include_in_detectors/>
                </detectors>
                <steady_state>
                    <include_in_steady_state/>
                </steady_state>
                <adjoint_storage>
                    <exists_in_forward/>
                </adjoint_storage>
            </diagnostic>
        </scalar_field>
        <scalar_field name="InitEta_UpperBound" rank="0">
            <prescribed>
                <mesh name="PressureMesh"/>
                <value name="WholeMesh">
                    <constant>
                        <real_value rank="0">1.1</real_value>
                    </constant>
                </value>
                <output/>
                <stat/>
                <detectors>
                    <exclude_from_detectors/>
                </detectors>
                <adjoint_storage>
                    <exists_in_forward/>
                </adjoint_storage>
            </prescribed>
        </scalar_field>
        <scalar_field name="InitEta_LowerBound" rank="0">
            <prescribed>
                <mesh name="PressureMesh"/>
                <value name="WholeMesh">
                    <constant>
                        <real_value rank="0">-1.1</real_value>
                    </constant>
                </value>
                <output/>
                <stat/>
                <detectors>
                    <exclude_from_detectors/>
                </detectors>
                <adjoint_storage>
                    <exists_in_forward/>
                </adjoint_storage>
            </prescribed>
        </scalar_field>
        <vector_field name="AnalyticalVelocity" rank="1">
            <prescribed>
                <mesh name="VelocityMesh"/>
                <value name="WholeMesh">
                    <python>
                        <string_value lines="20" type="python">def val(X,t):
 import shallow_water_optimisation_bounds as constants
 x = X[0]
 return constants.u_exact(x, t)</string_value>
                    </python>
                </value>
                <output/>
                <stat>
                    <include_in_stat/>
                </stat>
                <detectors>
                    <exclude_from_detectors/>
                </detectors>
                <adjoint_storage>
                    <exists_in_forward/>
                </adjoint_storage>
            </prescribed>
        </vector_field>
        <vector_field name="VelocityError" rank="1">
            <diagnostic>
                <algorithm name="vector_difference" source_field_2_type="vector" source_field_1_name="Velocity" source_field_2_name="AnalyticalVelocity" material_phase_support="single" source_field_1_type="vector">
                    <absolute_difference/>
                </algorithm>
                <mesh name="VelocityMesh"/>
                <output/>
                <stat>
                    <include_in_stat/>
                </stat>
                <convergence>
                    <include_in_convergence/>
                </convergence>
                <detectors>
                    <include_in_detectors/>
                </detectors>
                <steady_state>
                    <include_in_steady_state/>
                </steady_state>
                <adjoint_storage>
                    <exists_in_forward/>
                </adjoint_storage>
            </diagnostic>
        </vector_field>
    </material_phase>
    <adjoint>
        <functional name="integral_eta_t1">
            <functional_value>
                <algorithm name="functional_value">
                    <string_value lines="20" type="python">J = 0.0
T = 1.0 # the time at which to evaluate
if time &lt; T &lt;= time+dt:
  import numpy
  eta_prev = states[n-1]["Fluid"].scalar_fields["LayerThickness"]
  eta      = states[n]["Fluid"].scalar_fields["LayerThickness"]
  eta_exact_prev = states[n-1]["Fluid"].scalar_fields["AnalyticalLayerThickness"]
  eta_exact      = states[n]["Fluid"].scalar_fields["AnalyticalLayerThickness"]
    
  # We want to temporally interpolate to evaluate eta at t=1.0
  alpha = (time + dt - T) / dt
  assert 0 &lt;= alpha &lt; 1
  tmp_eta = alpha * (eta_prev.val - eta_exact_prev.val) + (1-alpha) * (eta.val - eta_exact.val)
  
  # Now we want to integrate that over space
  coord = states[0]["Fluid"].vector_fields["Coordinate"]
  assert eta.element_count == eta_prev.element_count == coord.element_count
  for ele in range(coord.element_count):
    t = Transform(ele, coord)
    shape = eta_prev.ele_shape(ele)
    mass = t.shape_shape(shape, shape)
    nodes = eta_prev.ele_nodes(ele)
    J = J + numpy.dot(tmp_eta[nodes], numpy.dot(mass, tmp_eta[nodes]))</string_value>
                </algorithm>
                <reduction>
                    <sum/>
                </reduction>
            </functional_value>
            <functional_dependencies>
                <algorithm name="functional_dependencies">
                    <string_value lines="20" type="python">def dependencies(times, timestep):
  if times[0] &lt; 1.0 &lt;= times[1]:
    return {"Fluid::Coordinate": [0],
            "Fluid::LayerThickness": [timestep-1, timestep],
            "Fluid::AnalyticalLayerThickness": [timestep-1, timestep]
            }
  else:
    return {}</string_value>
                </algorithm>
            </functional_dependencies>
        </functional>
        <controls>
            <control name="InitEta">
                <type name="initial_condition" field_name="Fluid::LayerThickness"/>
                <bounds>
                    <upper_bound field_name="Fluid::InitEta_UpperBound"/>
                    <lower_bound field_name="Fluid::InitEta_LowerBound"/>
                </bounds>
            </control>
            <load_controls/>
        </controls>
        <debug>
            <html_output/>
        </debug>
    </adjoint>
</shallow_water_options>