<?xml version='1.0' encoding='utf-8'?>
<burgers_equation>
  <simulation_name>
    <string_value lines="1">mms_adjoint_E</string_value>
  </simulation_name>
  <geometry>
    <dimension>
      <integer_value rank="0">1</integer_value>
    </dimension>
    <mesh name="CoordinateMesh">
      <from_file file_name="mms_E">
        <format name="triangle"/>
        <stat>
          <include_in_stat/>
        </stat>
      </from_file>
    </mesh>
    <mesh name="VelocityMesh">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <quadrature>
      <degree>
        <integer_value rank="0">4</integer_value>
      </degree>
    </quadrature>
  </geometry>
  <io>
    <dump_format>vtk</dump_format>
    <dump_period_in_timesteps>
      <constant>
        <integer_value rank="0">1</integer_value>
      </constant>
    </dump_period_in_timesteps>
    <output_mesh name="VelocityMesh"/>
  </io>
  <timestepping>
    <current_time>
      <real_value rank="0">0</real_value>
    </current_time>
    <timestep>
      <real_value rank="0">1</real_value>
    </timestep>
    <finish_time>
      <real_value rank="0">1</real_value>
    </finish_time>
    <nonlinear_iterations>
      <integer_value rank="0">1</integer_value>
    </nonlinear_iterations>
  </timestepping>
  <material_phase name="Fluid">
    <scalar_field name="Velocity" rank="0">
      <prognostic>
        <mesh name="VelocityMesh"/>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">0.5</real_value>
          </theta>
          <relaxation>
            <real_value rank="0">0.5</real_value>
          </relaxation>
        </temporal_discretisation>
        <solver>
          <iterative_method name="preonly"/>
          <preconditioner name="lu"/>
          <relative_error>
            <real_value rank="0">1e-16</real_value>
          </relative_error>
          <absolute_error>
            <real_value rank="0">1e-12</real_value>
          </absolute_error>
          <max_iterations>
            <integer_value rank="0">10000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <remove_advection_term/>
        <initial_condition name="WholeMesh">
          <python>
            <string_value lines="20" type="python">def val(X, t):
  from math import sin, cos
  x = X[0]
  return sin(x) + cos(x)</string_value>
          </python>
        </initial_condition>
        <boundary_conditions name="bc">
          <surface_ids>
            <integer_value shape="2" rank="1">1 2</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <python>
              <string_value lines="20" type="python">def val(X, t):
  from math import sin, cos
  x = X[0]
  return sin(x) + cos(x)</string_value>
            </python>
          </type>
        </boundary_conditions>
        <viscosity>
          <real_value rank="0">1</real_value>
        </viscosity>
        <stat/>
        <adjoint_storage>
          <exists_in_both/>
        </adjoint_storage>
        <scalar_field name="Source" rank="0">
          <prescribed>
            <value name="WholeMesh">
              <python>
                <string_value lines="20" type="python">def val(X, t):
  from math import sin, cos
  x = X[0]
  y = sin(x) + cos(x)
  return y</string_value>
              </python>
            </value>
          </prescribed>
        </scalar_field>
      </prognostic>
    </scalar_field>
    <scalar_field name="AnalyticalSolution" rank="0">
      <prescribed>
        <mesh name="VelocityMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value lines="20" type="python">def val(X, t):
  from math import sin, cos
  x = X[0]
  return sin(x) + cos(x)</string_value>
          </python>
        </value>
        <adjoint_storage>
          <exists_in_forward/>
        </adjoint_storage>
      </prescribed>
    </scalar_field>
    <scalar_field name="Error" rank="0">
      <diagnostic>
        <mesh name="VelocityMesh"/>
        <algorithm name="scalar_python_diagnostic" material_phase_support="single">
          <string_value lines="20" type="python">soln = state.scalar_fields["Velocity"]
exact = state.scalar_fields["AnalyticalSolution"]

for i in range(field.node_count):
  field.set(i, abs(soln.node_val(i) - exact.node_val(i)))</string_value>
        </algorithm>
        <stat/>
        <adjoint_storage>
          <exists_in_forward/>
        </adjoint_storage>
      </diagnostic>
    </scalar_field>
    <scalar_field name="funct_derivative" rank="0">
      <diagnostic>
        <mesh name="VelocityMesh"/>
        <algorithm name="scalar_python_diagnostic" material_phase_support="single">
          <string_value lines="20" type="python">field.val[:] = 0.0
if time == 1.0:
  coord = state.vector_fields['Coordinate']
  adj_u = state.scalar_fields['AdjointVelocity']
  #print "Adjoint velocity(t=1.0): ", adj_u.val
  for ele in range(coord.element_count):
    t = Transform(ele, coord)
    shape = adj_u.ele_shape(ele)
    mass = t.shape_shape(shape, shape)
    field.addto(adj_u.ele_nodes(ele), numpy.dot(mass, adj_u.ele_val(ele)))
    
#print "Funct_derivative (diagnostic): ", field.val</string_value>
        </algorithm>
        <stat/>
        <adjoint_storage>
          <exists_in_adjoint/>
        </adjoint_storage>
      </diagnostic>
    </scalar_field>
  </material_phase>
  <adjoint>
    <functional name="time_integral_ad">
      <functional_value>
        <algorithm name="functional_value">
          <string_value lines="20" type="python">import numpy

J = 0.0

if time == 0.0:
  coord = states[1]["Fluid"].vector_fields["Coordinate"]
  u = states[1]["Fluid"].scalar_fields["Velocity"]
  
  #print "u(t=0): ", states[0]["Fluid"].scalar_fields["Velocity"].val
  #print "u(t=1): ", states[1]["Fluid"].scalar_fields["Velocity"].val

  for ele in range(coord.element_count):
    t = Transform(ele, coord)
    shape = u.ele_shape(ele)
    mass = t.shape_shape(shape, shape)
    J = J + 0.5 * numpy.dot(u.ele_val(ele), numpy.dot(mass, u.ele_val(ele)))
#  print "Got functional value: ", J
    
#if hasattr(J, "nominal_value"):
#  print "u.val: ", u.val
#  print "delJ/delu: ", [J.derivatives[x] for x in u.val]
#  print "J.nominal_value: ", J.nominal_value</string_value>
        </algorithm>
        <reduction>
          <sum/>
        </reduction>
      </functional_value>
      <functional_dependencies>
        <algorithm name="functional_dependencies">
          <string_value lines="20" type="python">def dependencies(times, timestep):
  if times[0] &lt;= 1.0 &lt;= times[1]:
    return {"Fluid::Coordinate": [1],
            "Fluid::Velocity": [1]}
  else:
    return {}</string_value>
        </algorithm>
      </functional_dependencies>
    </functional>
    <controls>
      <control name="Source">
        <type field_name="Fluid::VelocitySource" name="source_term"/>
      </control>
    </controls>
    <debug>
      <replay_forward_run/>
      <check_action_transposes/>
    </debug>
  </adjoint>
</burgers_equation>
