<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE testproblem SYSTEM "regressiontest.dtd">
<testproblem>
  <name>p1p1-cg LES convergence test</name>
  <owner userid="jbull"/>
  <tags>flml</tags>
  <problem_definition length="special" nprocs="1">
    <command_line>pwd</command_line>
  </problem_definition>
  <variables>
    <variable name="dissipation_error" language="python">
from fluidity_tools import stat_parser as stat
from math import log, pi
import vortex_tools as vt
import numpy

# background viscosity
nu=0.01

# time
timep_12 = stat("stats/taylor-green-vortex-3d-periodic-12.stat")["ElapsedTime"]["value"]
timep_24 = stat("stats/taylor-green-vortex-3d-periodic-24.stat")["ElapsedTime"]["value"]
timep_48 = stat("stats/taylor-green-vortex-3d-periodic-48.stat")["ElapsedTime"]["value"]
timep_64 = stat("stats/taylor-green-vortex-3d-periodic-64.stat")["ElapsedTime"]["value"]
timedynlesp_12 = stat("stats/taylor-green-vortex-3d-dynles-periodic-12.stat")["ElapsedTime"]["value"]
timedynlesp_24 = stat("stats/taylor-green-vortex-3d-dynles-periodic-24.stat")["ElapsedTime"]["value"]
timedynlesp_48 = stat("stats/taylor-green-vortex-3d-dynles-periodic-48.stat")["ElapsedTime"]["value"]
timedynlesp_64 = stat("stats/taylor-green-vortex-3d-dynles-periodic-64.stat")["ElapsedTime"]["value"]
timedynlesap_12 = stat("stats/taylor-green-vortex-3d-dynles-aniso-periodic-12.stat")["ElapsedTime"]["value"]
timedynlesap_24 = stat("stats/taylor-green-vortex-3d-dynles-aniso-periodic-24.stat")["ElapsedTime"]["value"]
timean_12 = stat("stats/taylor-green-vortex-3d-analytical-periodic-12.stat")["ElapsedTime"]["value"]

# vorticity L2 norm = sqrt(vort_x**2+vort_y**2+vort_z**2)
# volume-average dissipation rate = nu*(vort_x**2+vort_y**2+vort_z**2)/volume
vort_p_12 = stat("stats/taylor-green-vortex-3d-periodic-12.stat")["Fluid"]["DissipationRate"]["l2norm"]
vort_p_24 = stat("stats/taylor-green-vortex-3d-periodic-24.stat")["Fluid"]["DissipationRate"]["l2norm"]
vort_p_48 = stat("stats/taylor-green-vortex-3d-periodic-48.stat")["Fluid"]["DissipationRate"]["l2norm"]
vort_p_64 = stat("stats/taylor-green-vortex-3d-periodic-64.stat")["Fluid"]["DissipationRate"]["l2norm"]
vort_dynlesp_12 = stat("stats/taylor-green-vortex-3d-dynles-periodic-12.stat")["Fluid"]["DissipationRate"]["l2norm"]
vort_dynlesp_24 = stat("stats/taylor-green-vortex-3d-dynles-periodic-24.stat")["Fluid"]["DissipationRate"]["l2norm"]
vort_dynlesp_48 = stat("stats/taylor-green-vortex-3d-dynles-periodic-48.stat")["Fluid"]["DissipationRate"]["l2norm"]
vort_dynlesp_64 = stat("stats/taylor-green-vortex-3d-dynles-periodic-64.stat")["Fluid"]["DissipationRate"]["l2norm"]
vort_dynlesap_12 = stat("stats/taylor-green-vortex-3d-dynles-aniso-periodic-12.stat")["Fluid"]["DissipationRate"]["l2norm"]
vort_dynlesap_24 = stat("stats/taylor-green-vortex-3d-dynles-aniso-periodic-24.stat")["Fluid"]["DissipationRate"]["l2norm"]
#vort_dynlesap_48 = stat("stats/taylor-green-vortex-3d-dynles-aniso-periodic-48.stat")["Fluid"]["DissipationRate"]["l2norm"]
#vort_dynlesap_64 = stat("stats/taylor-green-vortex-3d-dynles-aniso-periodic-64.stat")["Fluid"]["DissipationRate"]["l2norm"]

# Analytical solution
vort_an_12 = stat("stats/taylor-green-vortex-3d-analytical-periodic-12.stat")["Fluid"]["DissipationRate"]["l2norm"]

tarrays=(timep_12,timep_24,timep_48,timep_64,
timedynlesp_12,timedynlesp_24,timedynlesp_48,timedynlesp_64,
timedynlesap_12,timedynlesap_24,
timean_12)

varrays=(vort_p_12,vort_p_24,vort_p_48,vort_p_64,
vort_dynlesp_12,vort_dynlesp_24,vort_dynlesp_48,vort_dynlesp_64,
vort_dynlesap_12,vort_dynlesap_24,
vort_an_12)

# Integrals over time
integrals = vt.integrate(tarrays,varrays)
print 'integrals ', integrals
print 'integral of Goldstein approximation ', integrals[-1]
# Convergence
#convrates = vt.convergence_rate(integrals,int_gold)
# IS THIS THE CORRECT WAY TO MEASURE CONVERGENCE?
conv_p_12_24 = abs((integrals[0]-integrals[-1])/(integrals[1]-integrals[-1]))
conv_p_24_48 = abs((integrals[1]-integrals[-1])/(integrals[2]-integrals[-1]))
conv_p_48_64 = abs((integrals[2]-integrals[-1])/(integrals[3]-integrals[-1]))
conv_dynlesp_12_24 = abs((integrals[4]-integrals[-1])/(integrals[5]-integrals[-1]))
conv_dynlesp_24_48 = abs((integrals[5]-integrals[-1])/(integrals[6]-integrals[-1]))
conv_dynlesp_48_64 = abs((integrals[6]-integrals[-1])/(integrals[7]-integrals[-1]))
conv_dynlesap_12_24 = abs((integrals[8]-integrals[-1])/(integrals[9]-integrals[-1]))
conv_dynlesap_24_48 = abs((integrals[9]-integrals[-1])/(integrals[10]-integrals[-1]))
print 'conv_p_12_24 ', conv_p_12_24
print 'conv_dynlesp_12_24 ', conv_dynlesp_12_24
print 'conv_dynlesap_12_24 ', conv_dynlesap_12_24

# Finally, plot the normalised dissipation rates vs. theory:
vt.print_dims(varrays)
vt.normalise(varrays)
vt.plot_dissipation(tarrays,varrays)
pt=([1,1,1])
time=numpy.linspace(0.,100.,100)
vt.plot_velo(pt,time)

int_vort_p_12 = sum(vort_p_12*timep_12)
int_vort_p_24 = sum(vort_p_24*timep_24)
int_vort_p_48 = sum(vort_p_48*timep_48)
int_vort_p_64 = sum(vort_p_64*timep_64)
int_vort_dynlesp_12 = sum(vort_dynlesp_12*timedynlesp_12)
int_vort_dynlesp_24 = sum(vort_dynlesp_24*timedynlesp_24)
int_vort_dynlesp_48 = sum(vort_dynlesp_48*timedynlesp_48)
int_vort_dynlesp_64 = sum(vort_dynlesp_64*timedynlesp_64)
int_vort_dynlesap_12 = sum(vort_dynlesap_12*timedynlesap_12)
int_vort_dynlesap_24 = sum(vort_dynlesap_24*timedynlesap_24)

print 'integrals of simulated dissipation rates ',
int_vort_p_12,int_vort_p_24,int_vort_p_48,int_vort_p_64,
int_vort_dynlesp_12,int_vort_dynlesp_24,int_vort_dynlesp_48,int_vort_dynlesp_64,
int_vort_dynlesap_12,int_vort_dynlesap_24

# Write convergence stats to file
output=open('output.log','w')
output.write('convergence_p_12_24 '+str(log(conv_p_12_24,2))+'\n')
output.write('convergence_p_24_48 '+str(log(conv_p_24_48,2))+'\n')
output.write('convergence_p_48_64 '+str(log(conv_p_12_24,2))+'\n')
output.write('convergence_dynlesp_12_24 '+str(log(conv_dynlesp_12_24,2))+'\n')
output.write('convergence_dynlesp_24_48 '+str(log(conv_dynlesp_24_48,2))+'\n')
output.write('convergence_dynlesp_48_64 '+str(log(conv_dynlesp_48_64,2))+'\n')
output.write('convergence_dynlesap_12_24 '+str(log(conv_dynlesap_12_24,2))+'\n')
output.write('convergence_dynlesap_24_48 '+str(log(conv_dynlesap_24_48,2))+'\n')
output.close()

dissipation_error = [log(conv_p_12_24,2),log(conv_p_24_48,2),log(conv_dynlesp_12_24,2),log(conv_dynlesp_24_48,2),log(conv_dynlesap_12_24,2)]
    </variable>
  </variables>
  <pass_tests>
    <test name="convergence-DNS-12-24" language="python">
assert(dissipation_error[0]>2.)
    </test>
    <test name="convergence-DNS-24-48" language="python">
assert(dissipation_error[1]>2.)
    </test>
    <test name="convergence-DNS-p-12-24" language="python">
assert(dissipation_error[2]>2.)
    </test>
    <test name="convergence-dynlesp-12-24" language="python">
assert(dissipation_error[3]>2.)
    </test>
    <test name="convergence-dynlesap-12-24" language="python">
assert(dissipation_error[4]>2.)
    </test>
  </pass_tests>
  <warn_tests>
  </warn_tests>
</testproblem>

