<?xml version='1.0' encoding='utf-8'?>
<testproblem>
  <name>Balanced shallow water, with adaptivity</name>
  <owner userid="cjc1"/>
  <tags>flml</tags>
  <problem_definition length="medium" nprocs="1">
    <command_line>make clean-run; shallow_water_legacy -v 2 balanced.swlml &gt; sw.log</command_line>
  </problem_definition>
  <variables>
    <variable name="timesteps" language="python">import fluidity_tools
s = fluidity_tools.stat_parser("balanced.stat")
timesteps = len(s["ElapsedTime"]["value"])</variable>
    <variable name="solversConverged" language="python">import os
files = os.listdir("./")
solversConverged = not "matrixdump" in files and not "matrixdump.info" in files</variable>
    <variable name="deltaUs" language="python">import numpy
import vtktools

deltaUs = numpy.empty((19))
for i in range(1, 20):
  try:
    start_v = vtktools.vtu("geostrophic_interpolation_new_" + str(i - 1) + ".vtu")
    end_v = vtktools.vtu("geostrophic_interpolation_old_" + str(i) + ".vtu")
    deltaUs[i - 1] = abs(start_v.GetVectorField("Velocity")-end_v.GetVectorField("Velocity")).max()
  except:
    deltaUs[i - 1] = float("nan")
  print deltaUs[i - 1]</variable>
    <variable name="deltaU" language="python">import vtktools

try:
  start_v = vtktools.vtu("balanced_0.vtu")
  end_v = vtktools.vtu("balanced_101.vtu")
  deltaU = abs(start_v.GetVectorField("Velocity")-end_v.GetVectorField("Velocity")).max()
except:
  deltaU = float("nan")</variable>
    <variable name="velocityDivergenceMax" language="python">import fluidity_tools

s = fluidity_tools.stat_parser("balanced.stat")
velocityDivergenceMax = s["Fluid"]["Div"]["max"]</variable>
    <variable name="imbalanceVelocityL2Norm" language="python">import fluidity_tools

s = fluidity_tools.stat_parser("balanced.stat")
imbalanceVelocityL2Norm = s["Fluid"]["Imbal%magnitude"]["l2norm"]</variable>
  </variables>
  <pass_tests>
    <test name="SimulationCompleted" language="python">assert(timesteps == 101)</test>
    <test name="SolversConverged" language="python">assert(solversConverged)</test>
    <test name="DeltaUs" language="python">maxval = abs(deltaUs).max()
print maxval
assert maxval &lt; 2.0e-13</test>
    <test name="DeltaU" language="python">print abs(deltaU)
assert abs(deltaU) &lt; 2.0e-3</test>
    <test name="VelocityDivergence" language="python">maxval = abs(velocityDivergenceMax).max()
print maxval
assert maxval &lt; 3.0e-15</test>
    <test name="ImbalancedVelocity" language="python">maxval = abs(imbalanceVelocityL2Norm).max()
print maxval
assert maxval &lt; 1.0e-7</test>
  </pass_tests>
  <warn_tests/>
</testproblem>
