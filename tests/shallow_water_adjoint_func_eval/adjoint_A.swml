<?xml version='1.0' encoding='utf-8'?>
<shallow_water_options>
  <simulation_name>
    <string_value lines="1">wave_A</string_value>
  </simulation_name>
  <geometry>
    <dimension>
      <integer_value rank="0">3</integer_value>
    </dimension>
    <mesh name="CoordinateMesh">
      <from_file file_name="src/mesh_A">
        <format name="triangle"/>
        <dimension>
          <integer_value rank="0">1</integer_value>
        </dimension>
        <stat>
          <include_in_stat/>
        </stat>
      </from_file>
    </mesh>
    <mesh name="VelocityMesh">
      <from_mesh>
        <mesh name="PeriodicMesh"/>
        <mesh_continuity>
          <string_value>discontinuous</string_value>
        </mesh_continuity>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <mesh name="PressureMesh">
      <from_mesh>
        <mesh name="PeriodicMesh"/>
        <mesh_shape>
          <polynomial_degree>
            <integer_value rank="0">2</integer_value>
          </polynomial_degree>
        </mesh_shape>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <mesh name="PeriodicMesh">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <periodic_boundary_conditions name="periodicity">
          <physical_boundary_ids>
            <integer_value shape="1" rank="1">1</integer_value>
          </physical_boundary_ids>
          <aliased_boundary_ids>
            <integer_value shape="1" rank="1">2</integer_value>
          </aliased_boundary_ids>
          <coordinate_map>
            <string_value lines="20" type="python">def val(X,t):
  result = list(X)
  result[0]=result[0]-1.0
  return result</string_value>
          </coordinate_map>
        </periodic_boundary_conditions>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <quadrature>
      <degree>
        <integer_value rank="0">4</integer_value>
      </degree>
    </quadrature>
  </geometry>
  <io>
    <dump_format>
      <string_value>vtk</string_value>
    </dump_format>
    <dump_period_in_timesteps>
      <constant>
        <integer_value rank="0">1</integer_value>
      </constant>
    </dump_period_in_timesteps>
    <output_mesh name="CoordinateMesh"/>
  </io>
  <timestepping>
    <current_time>
      <real_value rank="0">0</real_value>
    </current_time>
    <timestep>
      <real_value rank="0">0.125</real_value>
    </timestep>
    <nonlinear_iterations>
      <integer_value rank="0">1</integer_value>
    </nonlinear_iterations>
    <finish_time>
      <real_value rank="0">2.0</real_value>
    </finish_time>
  </timestepping>
  <physical_parameters>
    <gravity>
      <magnitude>
        <real_value rank="0">9.81</real_value>
      </magnitude>
      <vector_field name="GravityDirection" rank="1">
        <prescribed>
          <mesh name="CoordinateMesh"/>
          <value name="WholeMesh">
            <constant>
              <real_value shape="3" dim1="dim" rank="1">0.0 0.0 -1.0</real_value>
            </constant>
          </value>
          <output/>
          <stat>
            <include_in_stat/>
          </stat>
          <detectors>
            <exclude_from_detectors/>
          </detectors>
          <adjoint_storage>
            <exists_in_forward/>
          </adjoint_storage>
        </prescribed>
      </vector_field>
    </gravity>
  </physical_parameters>
  <material_phase name="Fluid">
    <vector_field name="Velocity" rank="1">
      <prognostic>
        <mesh name="VelocityMesh"/>
        <equation name="ShallowWater"/>
        <spatial_discretisation>
          <discontinuous_galerkin>
            <advection_scheme>
              <none/>
            </advection_scheme>
          </discontinuous_galerkin>
          <conservative_advection>
            <real_value rank="0">0</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <solver>
          <iterative_method name="preonly"/>
          <preconditioner name="lu"/>
          <relative_error>
            <real_value rank="0">1.0e-7</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">500</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <python>
            <string_value lines="20" type="python">def val(X, t):
  import constants_func_eval
  return constants_func_eval.u_exact(X, 0.0)</string_value>
          </python>
        </initial_condition>
        <vector_field name="Source" rank="1">
          <prescribed>
            <value name="WholeMesh">
              <python>
                <string_value lines="20" type="python">def val(X, t):
  import constants_func_eval
  return constants_func_eval.u_src(X, t)</string_value>
              </python>
            </value>
            <output/>
            <stat>
              <include_in_stat/>
            </stat>
            <detectors>
              <exclude_from_detectors/>
            </detectors>
            <adjoint_storage>
              <exists_in_forward/>
            </adjoint_storage>
          </prescribed>
        </vector_field>
        <output/>
        <stat>
          <include_in_stat/>
          <previous_time_step>
            <exclude_from_stat/>
          </previous_time_step>
          <nonlinear_field>
            <exclude_from_stat/>
          </nonlinear_field>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </prognostic>
    </vector_field>
    <scalar_field name="LayerThickness" rank="0">
      <prognostic>
        <mesh name="PressureMesh"/>
        <spatial_discretisation>
          <continuous_galerkin>
            <advection_terms>
              <exclude_advection_terms/>
            </advection_terms>
          </continuous_galerkin>
          <conservative_advection>
            <real_value rank="0">0</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">0.5</real_value>
          </theta>
          <relaxation>
            <real_value rank="0">1</real_value>
          </relaxation>
        </temporal_discretisation>
        <solver>
          <iterative_method name="preonly"/>
          <preconditioner name="lu"/>
          <relative_error>
            <real_value rank="0">1.0e-7</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">500</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <cache_solver_context/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <python>
            <string_value lines="20" type="python">def val(X, t):
  import constants_func_eval
  return constants_func_eval.eta_exact(X, 0.0)</string_value>
          </python>
        </initial_condition>
        <mean_layer_thickness>
          <real_value rank="0">5.5</real_value>
        </mean_layer_thickness>
        <scalar_field name="Source">
          <prescribed>
            <value name="WholeMesh">
              <python>
                <string_value lines="20" type="python">def val(X, t):
  import constants_func_eval
  return constants_func_eval.eta_src(X, t)</string_value>
              </python>
            </value>
            <output/>
            <stat/>
            <detectors>
              <exclude_from_detectors/>
            </detectors>
            <adjoint_storage>
              <exists_in_forward/>
            </adjoint_storage>
          </prescribed>
        </scalar_field>
        <output/>
        <stat/>
        <consistent_interpolation/>
      </prognostic>
    </scalar_field>
    <scalar_field name="AnalyticalLayerThickness" rank="0">
      <prescribed>
        <mesh name="PressureMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value lines="20" type="python">def val(X,t):
 import constants_func_eval
 return constants_func_eval.eta_exact(X, t)</string_value>
          </python>
        </value>
        <output/>
        <stat/>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <adjoint_storage>
          <exists_in_forward/>
        </adjoint_storage>
      </prescribed>
    </scalar_field>
    <scalar_field name="LayerThicknessError" rank="0">
      <diagnostic>
        <algorithm source_field_2_type="scalar" name="scalar_difference" source_field_1_name="LayerThickness" source_field_2_name="AnalyticalLayerThickness" material_phase_support="single" source_field_1_type="scalar">
          <absolute_difference/>
        </algorithm>
        <mesh name="PressureMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <adjoint_storage>
          <exists_in_forward/>
        </adjoint_storage>
      </diagnostic>
    </scalar_field>
    <scalar_field name="LayerThicknessSource" rank="0">
      <diagnostic>
        <algorithm name="scalar_python_diagnostic" material_phase_support="single">
          <string_value lines="20" type="python">import constants_func_eval
import numpy, numpy.linalg 

coord  = state.vector_fields["Coordinate"]
eta_mesh = state.meshes["PressureMesh"]
u_mesh = state.meshes["VelocityMesh"]
timeprime = time + constants_func_eval.theta*dt

field.val[:] = 0.0

for ele in range(coord.ele_count):
  t = Transform(ele, coord)
  shape = field.ele_shape(ele)
  eta_mass = t.shape_shape(shape, shape)
  u_shape = u_mesh.shape
  u_mass = t.shape_shape(u_shape, u_shape)
     
  if time == 0.0:
    source = numpy.dot(eta_mass, [constants_func_eval.eta_exact(x, 0.0) for x in coord.remap_ele(ele, field.mesh)])
  else:
    # First, the eta source term contribution
    source = numpy.dot(eta_mass, [constants_func_eval.eta_src(x, timeprime)*abs(dt) for x in coord.remap_ele(ele, field.mesh)])
      
    # Now, the u source term contribution
    #####Linv_Musrc = numpy.dot(numpy.linalg.inv(u_mass), # + coriolis matrix in here!!!!
    #####            numpy.dot(u_mass, [constants_func_eval.u_src(x, timeprime) for x in coord.remap_ele(ele, u_mesh)]))
    Linv_Musrc = numpy.array([constants_func_eval.u_src(x, timeprime) for x in coord.remap_ele(ele, u_mesh)])

    u_dshape = t.grad(u_mesh.shape)
    cT = t.shape_dshape(shape, u_dshape)
    for dim in range(cT.shape[2]):
      source += numpy.dot(cT[:,:,dim], Linv_Musrc[:,dim]) * (dt**2 * constants_func_eval.d0 * constants_func_eval.theta)
  field.addto(field.ele_nodes(ele), source)</string_value>
        </algorithm>
        <mesh name="PressureMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <adjoint_storage>
          <exists_in_adjoint/>
        </adjoint_storage>
      </diagnostic>
    </scalar_field>
    <scalar_field name="adj_J" rank="0">
      <diagnostic>
        <algorithm name="scalar_python_diagnostic" material_phase_support="single">
          <string_value lines="20" type="python">import fluidity.state_types
import numpy

eta_src = state.scalar_fields["LayerThicknessSource"]
u_src = state.vector_fields["VelocitySource"]

if time == 0.0:
  adj_eta = state.scalar_fields["AdjointLayerThickness"]
  adj_u = state.vector_fields["AdjointVelocity"]
  J = numpy.dot(adj_eta.val, eta_src.val) 
  J = J + numpy.dot([component[0] for component in adj_u.val], [component[0] for component in u_src.val])
else:
  adj_eta_delta = state.scalar_fields["AdjointLayerThicknessDelta"]
  adj_u_delta = state.vector_fields["AdjointLocalVelocityDelta"]
  J = numpy.dot(adj_eta_delta.val, eta_src.val) 
  J = J + numpy.dot([-1.0*component[0] for component in adj_u_delta.val], [component[0] for component in u_src.val])
    
field.val[:] = J</string_value>
          <depends>
            <string_value lines="1">LayerThicknessSource,VelocitySource</string_value>
          </depends>
        </algorithm>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <adjoint_storage>
          <exists_in_adjoint/>
        </adjoint_storage>
      </diagnostic>
    </scalar_field>
    <scalar_field name="J" rank="0">
      <diagnostic>
        <algorithm name="scalar_python_diagnostic" material_phase_support="single">
          <string_value lines="20" type="python">import fluidity.state_types
import numpy

coord = state.vector_fields["Coordinate"]
eta = state.scalar_fields["LayerThickness"]
u = state.vector_fields["Velocity"]
functional_vector_eta = state.scalar_fields["FunctionalVectorEta"]
functional_vector_u = state.vector_fields["FunctionalVectorVelocity"]

J = numpy.dot(functional_vector_eta.val, eta.val) 
J = J + numpy.dot([component[0] for component in functional_vector_u.val], [component[0] for component in u.val])
    
field.val[:] = J</string_value>
          <depends>
            <string_value lines="1">VelocitySource,LayerThicknessSource,FunctionalVectorVelocity,FunctionalVectorEta</string_value>
          </depends>
        </algorithm>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <adjoint_storage>
          <exists_in_forward/>
        </adjoint_storage>
      </diagnostic>
    </scalar_field>
    <scalar_field name="FunctionalVectorEta" rank="0">
      <prescribed>
        <mesh name="PressureMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value lines="20" type="python">def val(X, t):
  import constants_func_eval
  return constants_func_eval.functional_vector_eta(X, t)</string_value>
          </python>
        </value>
        <output/>
        <stat/>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <adjoint_storage>
          <exists_in_both/>
        </adjoint_storage>
      </prescribed>
    </scalar_field>
    <vector_field name="AnalyticalVelocity" rank="1">
      <prescribed>
        <mesh name="VelocityMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value lines="20" type="python">def val(X,t):
 import constants_func_eval
 return constants_func_eval.u_exact(X, t)</string_value>
          </python>
        </value>
        <output/>
        <stat>
          <include_in_stat/>
        </stat>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <adjoint_storage>
          <exists_in_forward/>
        </adjoint_storage>
      </prescribed>
    </vector_field>
    <vector_field name="VelocityError" rank="1">
      <diagnostic>
        <algorithm source_field_2_type="vector" name="vector_difference" source_field_1_name="Velocity" source_field_2_name="AnalyticalVelocity" material_phase_support="single" source_field_1_type="vector">
          <absolute_difference/>
        </algorithm>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat>
          <include_in_stat/>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <adjoint_storage>
          <exists_in_forward/>
        </adjoint_storage>
      </diagnostic>
    </vector_field>
    <vector_field name="VelocitySource" rank="1">
      <diagnostic>
        <algorithm name="vector_python_diagnostic" material_phase_support="single">
          <string_value lines="20" type="python">import constants_func_eval
import numpy, numpy.linalg

coord  = state.vector_fields["Coordinate"]
u_mesh = state.meshes["VelocityMesh"]
timeprime = time + constants_func_eval.theta*dt

field.val[:] = 0.0

for ele in range(coord.ele_count):
  t = Transform(ele, coord)
  u_shape = u_mesh.shape
  u_mass = t.shape_shape(u_shape, u_shape)

  if time == 0.0:
    source = numpy.dot(u_mass, [constants_func_eval.u_exact(x, 0.0) for x in coord.remap_ele(ele, field.mesh)])
  else:
    # Add the u source term contribution
    source = numpy.dot(u_mass, [constants_func_eval.u_src(x, timeprime)*abs(dt) for x in coord.remap_ele(ele, field.mesh)])
    #print "Final u_src: ", source
  field.addto(field.ele_nodes(ele), source)</string_value>
        </algorithm>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat>
          <include_in_stat/>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <adjoint_storage>
          <exists_in_adjoint/>
        </adjoint_storage>
      </diagnostic>
    </vector_field>
    <vector_field name="FunctionalVectorVelocity" rank="1">
      <prescribed>
        <mesh name="VelocityMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value lines="20" type="python">def val(X, t):
  import constants_func_eval
  return constants_func_eval.functional_vector_u(X, t)</string_value>
          </python>
        </value>
        <output/>
        <stat>
          <include_in_stat/>
        </stat>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <adjoint_storage>
          <exists_in_both/>
        </adjoint_storage>
      </prescribed>
    </vector_field>
  </material_phase>
  <adjoint>
    <functional name="integral_eta_t1">
      <functional_derivative>
        <algorithm name="functional_derivative">
          <string_value lines="20" type="python">import numpy
derivative.val[:] = 0.0
if derivative.name == "Fluid::LayerThickness":
  functional_vector = states[n]["Fluid"].scalar_fields["FunctionalVectorEta"]
  assert(len(derivative.val[:]) == len(functional_vector.val[:]))
  derivative.val[:] = functional_vector.val[:]
elif derivative.name == "Fluid::Velocity":
  functional_vector = states[n]["Fluid"].vector_fields["FunctionalVectorVelocity"]
  assert(len(derivative.val[:]) == len(functional_vector.val[:]))
  derivative.val[:] = functional_vector.val[:]</string_value>
        </algorithm>
      </functional_derivative>
      <functional_dependencies>
        <algorithm name="functional_dependencies">
          <string_value lines="20" type="python">def dependencies(times, timestep):
  return { "Fluid::LayerThickness": [timestep], "Fluid::FunctionalVectorEta": [timestep], "Fluid::Velocity": [timestep], "Fluid::FunctionalVectorVelocity": [timestep]}</string_value>
        </algorithm>
      </functional_dependencies>
    </functional>
  </adjoint>
</shallow_water_options>
