<?xml version='1.0' encoding='utf-8'?>
<burgers_equation>
  <simulation_name>
    <string_value lines="1">mms_gaussian_D</string_value>
  </simulation_name>
  <geometry>
    <dimension>
      <integer_value rank="0">1</integer_value>
    </dimension>
    <mesh name="CoordinateMesh">
      <from_file file_name="mms_D">
        <format name="triangle"/>
        <stat>
          <include_in_stat/>
        </stat>
      </from_file>
    </mesh>
    <mesh name="VelocityMesh">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <quadrature>
      <degree>
        <integer_value rank="0">4</integer_value>
      </degree>
    </quadrature>
  </geometry>
  <io>
    <dump_format>vtk</dump_format>
    <output_mesh name="VelocityMesh"/>
  </io>
  <timestepping>
    <current_time>
      <real_value rank="0">0.0</real_value>
    </current_time>
    <timestep>
      <real_value rank="0">10.0</real_value>
    </timestep>
    <finish_time>
      <real_value rank="0">10000.0</real_value>
    </finish_time>
    <steady_state>
      <tolerance>
        <real_value rank="0">1.0e-16</real_value>
      </tolerance>
    </steady_state>
  </timestepping>
  <material_phase name="Fluid">
    <scalar_field name="Velocity" rank="0">
      <prognostic>
        <mesh name="VelocityMesh"/>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">1.0</real_value>
          </theta>
          <relaxation>
            <real_value rank="0">1.0</real_value>
          </relaxation>
        </temporal_discretisation>
        <solver>
          <iterative_method name="gmres">
            <restart>
              <integer_value rank="0">30</integer_value>
            </restart>
          </iterative_method>
          <preconditioner name="sor"/>
          <relative_error>
            <real_value rank="0">1.0e-16</real_value>
          </relative_error>
          <absolute_error>
            <real_value rank="0">1.0e-12</real_value>
          </absolute_error>
          <max_iterations>
            <integer_value rank="0">1000000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <python>
            <string_value lines="20" type="code" language="python">def val(X, t):
  from math import sqrt, exp, pi
  x = X[0]
  return 0.0
  return 1/sqrt(2*pi) * exp(-x**2 / 2)</string_value>
          </python>
        </initial_condition>
        <boundary_conditions name="zero">
          <surface_ids>
            <integer_value shape="2" rank="1">1 2</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <constant>
              <real_value rank="0">0.0</real_value>
            </constant>
          </type>
        </boundary_conditions>
        <viscosity>
          <real_value rank="0">1.0</real_value>
        </viscosity>
        <stat/>
        <adjoint_storage>
          <exists_in_both/>
        </adjoint_storage>
        <scalar_field name="Source" rank="0">
          <prescribed>
            <value name="WholeMesh">
              <python>
                <string_value lines="20" type="code" language="python">def val(X, t):
  from math import sqrt, exp, pi
  x = X[0]
  return -0.5*sqrt(2)*x**2*exp(-0.5*x**2)/sqrt(pi) + 0.5*sqrt(2)*exp(-0.5*x**2)/sqrt(pi) - 0.5*x*exp(-x**2)/pi</string_value>
              </python>
            </value>
          </prescribed>
        </scalar_field>
      </prognostic>
    </scalar_field>
    <scalar_field name="AnalyticalSolution" rank="0">
      <prescribed>
        <mesh name="VelocityMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value lines="20" type="code" language="python">def val(X, t):
  from math import sqrt, exp, pi
  x = X[0]
  return 1.0/sqrt(2*pi) * exp(-x**2 / 2)</string_value>
          </python>
        </value>
        <adjoint_storage>
          <exists_in_both/>
        </adjoint_storage>
      </prescribed>
    </scalar_field>
    <scalar_field name="Error" rank="0">
      <diagnostic>
        <mesh name="VelocityMesh"/>
        <algorithm name="scalar_python_diagnostic" material_phase_support="single">
          <string_value lines="20" type="code" language="python">soln = state.scalar_fields["Velocity"]
exact = state.scalar_fields["AnalyticalSolution"]

for i in range(field.node_count):
  field.set(i, soln.node_val(i) - exact.node_val(i))</string_value>
        </algorithm>
        <stat/>
        <adjoint_storage>
          <exists_in_both/>
        </adjoint_storage>
      </diagnostic>
    </scalar_field>
  </material_phase>
</burgers_equation>
