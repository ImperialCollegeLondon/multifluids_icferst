<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE testproblem SYSTEM "regressiontest.dtd">
<testproblem>
  <name>Burgers Equation MMS</name>
  <owner userid="pef"/>
  <tags>burgers</tags>
  <problem_definition length="medium" nprocs="1">
    <command_line>burgers_equation mms_A.bml; burgers_equation mms_B.bml; burgers_equation mms_C.bml; burgers_equation mms_D.bml; burgers_equation mms_E.bml</command_line>
  </problem_definition>
  <variables>
    <variable name="ab_error" language="python">
from fluidity_tools import stat_parser as stat
from math import log

a_error = stat("mms_gaussian_A.stat")["Fluid"]["Error"]["l2norm"][-1]
b_error = stat("mms_gaussian_B.stat")["Fluid"]["Error"]["l2norm"][-1]

ab_ratio = a_error / b_error

ab_error = [log(ab_ratio, 2)]
    </variable>
    <variable name="bc_error" language="python">
from fluidity_tools import stat_parser as stat
from math import log

b_error = stat("mms_gaussian_B.stat")["Fluid"]["Error"]["l2norm"][-1]
c_error = stat("mms_gaussian_C.stat")["Fluid"]["Error"]["l2norm"][-1]

bc_ratio = b_error / c_error
bc_error = [log(bc_ratio, 2)]
    </variable>
    <variable name="cd_error" language="python">
from fluidity_tools import stat_parser as stat
from math import log

c_error = stat("mms_gaussian_C.stat")["Fluid"]["Error"]["l2norm"][-1]
d_error = stat("mms_gaussian_D.stat")["Fluid"]["Error"]["l2norm"][-1]

cd_ratio = c_error / d_error
cd_error = [log(cd_ratio, 2)]
    </variable>
    <variable name="de_error" language="python">
from fluidity_tools import stat_parser as stat
from math import log

d_error = stat("mms_gaussian_D.stat")["Fluid"]["Error"]["l2norm"][-1]
e_error = stat("mms_gaussian_E.stat")["Fluid"]["Error"]["l2norm"][-1]

de_ratio = d_error / e_error
de_error = [log(de_ratio, 2)]
    </variable>
  </variables>
  <pass_tests>
    <test name="ab_convergence: L2 order >= 1.9" language="python">
assert abs(ab_error[0]) >= 1.9
    </test>
    <test name="bc_convergence: L2 order >= 1.9" language="python">
assert abs(bc_error[0]) >= 1.9
    </test>
    <test name="cd_convergence: L2 order >= 1.9" language="python">
assert abs(cd_error[0]) >= 1.9
    </test>
    <test name="de_convergence: L2 order >= 1.9" language="python">
assert abs(de_error[0]) >= 1.9
    </test>
  </pass_tests>
  <warn_tests>
  </warn_tests>
</testproblem>

