<?xml version='1.0' encoding='utf-8'?>
<testproblem>
  <name>Shallow Water Equation Optimisation 2d</name>
  <owner userid="sf1409"/>
  <tags>swml adjoint optimisation</tags>
  <problem_definition length="special" nprocs="1">
    <command_line>time ../../bin/shallow_water_equation optimiser_A.oml; time ../../bin/shallow_water_equation optimiser_B.oml; time ../../bin/shallow_water_equation optimiser_C.oml;</command_line>
  </problem_definition>
  <variables>
    <variable name="u_error_order_final" language="python">from fluidity_tools import stat_parser as stat
import numpy      
import math
sims = ["_A", "_B", "_C"]
u_error = numpy.zeros(len(sims))
for i, sim in enumerate(sims):
  u_error[i] = stat("wave%s.stat" % sim)["Fluid"]["VelocityError%magnitude"]["max"][-1]

u_error_order_final = numpy.zeros(len(sims)-1) 
for i in range(len(sims)-1):
  u_error_order_final[i] = math.log(u_error[i]/u_error[i+1], 2)
</variable>
    <variable name="eta_error_order_final" language="python">from fluidity_tools import stat_parser as stat
import numpy      
import math
sims = ["_A", "_B", "_C"]
eta_error = numpy.zeros(len(sims))
for i, sim in enumerate(sims):
  eta_error[i] = stat("wave%s.stat" % sim)["Fluid"]["LayerThicknessError"]["max"][-1]

eta_error_order_final = numpy.zeros(len(sims)-1)
for i in range(len(sims)-1):
  eta_error_order_final[i] = math.log(eta_error[i]/eta_error[i+1], 2)
</variable>
  </variables>
  <pass_tests>
    <test name="u_error_order_final_test" language="python">assert min(u_error_order_final) &gt; 1.8</test>
    <test name="eta_error_order_final_test" language="python">assert min(eta_error_order_final) &gt; 1.8</test>
  </pass_tests>
  <warn_tests/>
</testproblem>
