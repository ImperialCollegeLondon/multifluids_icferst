<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE testproblem SYSTEM "regressiontest.dtd">
<testproblem>
  <name>p1p1-cg inverse Helmholtz filter convergence test</name>
  <owner userid="jbull"/>
  <tags>flml</tags>
  <problem_definition length="short" nprocs="1">
    <command_line>fluidity -v2 -l MMS_A_Helmiso.flml &amp;&amp; fluidity MMS_B_Helmiso.flml &amp;&amp; fluidity MMS_C_Helmiso.flml &amp;&amp; fluidity MMS_D_Helmiso.flml &amp;&amp; fluidity MMS_E_Helmiso.flml</command_line>
  </problem_definition>
  <variables>
    <variable name="ab_convergence_vel_f" language="python">
from fluidity_tools import stat_parser as stat
from math import log
output=open('output.log','w')

a_error_x = stat("MMS_A_Helmiso.stat")["NS"]["FilterDiffAvg%1"]["l2norm"][-1]
b_error_x = stat("MMS_B_Helmiso.stat")["NS"]["FilterDiffAvg%1"]["l2norm"][-1]
a_error_y = stat("MMS_A_Helmiso.stat")["NS"]["FilterDiffAvg%2"]["l2norm"][-1]
b_error_y = stat("MMS_B_Helmiso.stat")["NS"]["FilterDiffAvg%2"]["l2norm"][-1]

a_error_inf_x = stat("MMS_A_Helmiso.stat")["NS"]["FilterDiffAvg%1"]["max"][-1]
b_error_inf_x = stat("MMS_B_Helmiso.stat")["NS"]["FilterDiffAvg%1"]["max"][-1]
a_error_inf_y = stat("MMS_A_Helmiso.stat")["NS"]["FilterDiffAvg%2"]["max"][-1]
b_error_inf_y = stat("MMS_B_Helmiso.stat")["NS"]["FilterDiffAvg%2"]["max"][-1]

ab_ratio_x = a_error_x / b_error_x
ab_ratio_y = a_error_y / b_error_y
ab_ratio_inf_x = a_error_inf_x / b_error_inf_x
ab_ratio_inf_y = a_error_inf_y / b_error_inf_y

output.write('ab_convergence_vel_f '+str(log(ab_ratio_x, 2))+' '+str(log(ab_ratio_inf_x, 2))+' '+str(log(ab_ratio_y, 2))+' '+str(log(ab_ratio_inf_y, 2))+'\n')
output.close()

ab_convergence_vel_f = [[log(ab_ratio_x, 2), log(ab_ratio_inf_x, 2)], [log(ab_ratio_y, 2), log(ab_ratio_inf_y, 2)]]
    </variable>
    <variable name="ab_convergence_vel_if" language="python">
from fluidity_tools import stat_parser as stat
from math import log
output=open('output.log','a')

a_error_x = stat("MMS_A_Helmiso.stat")["NS"]["IsoFilterDiffAvg%1"]["l2norm"][-1]
b_error_x = stat("MMS_B_Helmiso.stat")["NS"]["IsoFilterDiffAvg%1"]["l2norm"][-1]
a_error_y = stat("MMS_A_Helmiso.stat")["NS"]["IsoFilterDiffAvg%2"]["l2norm"][-1]
b_error_y = stat("MMS_B_Helmiso.stat")["NS"]["IsoFilterDiffAvg%2"]["l2norm"][-1]

a_error_inf_x = stat("MMS_A_Helmiso.stat")["NS"]["IsoFilterDiffAvg%1"]["max"][-1]
b_error_inf_x = stat("MMS_B_Helmiso.stat")["NS"]["IsoFilterDiffAvg%1"]["max"][-1]
a_error_inf_y = stat("MMS_A_Helmiso.stat")["NS"]["IsoFilterDiffAvg%2"]["max"][-1]
b_error_inf_y = stat("MMS_B_Helmiso.stat")["NS"]["IsoFilterDiffAvg%2"]["max"][-1]

ab_ratio_x = a_error_x / b_error_x
ab_ratio_y = a_error_y / b_error_y
ab_ratio_inf_x = a_error_inf_x / b_error_inf_x
ab_ratio_inf_y = a_error_inf_y / b_error_inf_y

output.write('ab_convergence_vel_if '+str(log(ab_ratio_x, 2))+' '+str(log(ab_ratio_inf_x, 2))+' '+str(log(ab_ratio_y, 2))+' '+str(log(ab_ratio_inf_y, 2))+'\n')
output.close()

ab_convergence_vel_if = [[log(ab_ratio_x, 2), log(ab_ratio_inf_x, 2)], [log(ab_ratio_y, 2), log(ab_ratio_inf_y, 2)]]
    </variable>
    <variable name="ab_convergence_div" language="python">
from fluidity_tools import stat_parser as stat
from math import log
output=open('output.log','a')

a_error = stat("MMS_A_Helmiso.stat")["NS"]["CVDivAvg"]["l2norm"][-1]
b_error = stat("MMS_B_Helmiso.stat")["NS"]["CVDivAvg"]["l2norm"][-1]

a_error_inf = stat("MMS_A_Helmiso.stat")["NS"]["CVDivAvg"]["max"][-1]
b_error_inf = stat("MMS_B_Helmiso.stat")["NS"]["CVDivAvg"]["max"][-1]

ab_ratio = a_error / b_error
ab_ratio_inf = a_error_inf / b_error_inf

output.write('ab_convergence_div '+str(log(ab_ratio, 2))+' '+str(log(ab_ratio_inf, 2))+'\n')
output.close()

ab_convergence_div = [log(ab_ratio, 2), log(ab_ratio_inf, 2)]
    </variable>
    <variable name="bc_convergence_vel_f" language="python">
from fluidity_tools import stat_parser as stat
from math import log
output=open('output.log','a')

a_error_x = stat("MMS_B_Helmiso.stat")["NS"]["FilterDiffAvg%1"]["l2norm"][-1]
b_error_x = stat("MMS_C_Helmiso.stat")["NS"]["FilterDiffAvg%1"]["l2norm"][-1]
a_error_y = stat("MMS_B_Helmiso.stat")["NS"]["FilterDiffAvg%2"]["l2norm"][-1]
b_error_y = stat("MMS_C_Helmiso.stat")["NS"]["FilterDiffAvg%2"]["l2norm"][-1]

a_error_inf_x = stat("MMS_B_Helmiso.stat")["NS"]["FilterDiffAvg%1"]["max"][-1]
b_error_inf_x = stat("MMS_C_Helmiso.stat")["NS"]["FilterDiffAvg%1"]["max"][-1]
a_error_inf_y = stat("MMS_B_Helmiso.stat")["NS"]["FilterDiffAvg%2"]["max"][-1]
b_error_inf_y = stat("MMS_C_Helmiso.stat")["NS"]["FilterDiffAvg%2"]["max"][-1]

ab_ratio_x = a_error_x / b_error_x
ab_ratio_y = a_error_y / b_error_y
ab_ratio_inf_x = a_error_inf_x / b_error_inf_x
ab_ratio_inf_y = a_error_inf_y / b_error_inf_y

output.write('bc_convergence_vel_f '+str(log(ab_ratio_x, 2))+' '+str(log(ab_ratio_inf_x, 2))+' '+str(log(ab_ratio_y, 2))+' '+str(log(ab_ratio_inf_y, 2))+'\n')
output.close()

bc_convergence_vel_f = [[log(ab_ratio_x, 2), log(ab_ratio_inf_x, 2)], [log(ab_ratio_y, 2), log(ab_ratio_inf_y, 2)]]
    </variable>
    <variable name="bc_convergence_vel_if" language="python">
from fluidity_tools import stat_parser as stat
from math import log
output=open('output.log','a')

a_error_x = stat("MMS_B_Helmiso.stat")["NS"]["IsoFilterDiffAvg%1"]["l2norm"][-1]
b_error_x = stat("MMS_C_Helmiso.stat")["NS"]["IsoFilterDiffAvg%1"]["l2norm"][-1]
a_error_y = stat("MMS_B_Helmiso.stat")["NS"]["IsoFilterDiffAvg%2"]["l2norm"][-1]
b_error_y = stat("MMS_C_Helmiso.stat")["NS"]["IsoFilterDiffAvg%2"]["l2norm"][-1]

a_error_inf_x = stat("MMS_B_Helmiso.stat")["NS"]["IsoFilterDiffAvg%1"]["max"][-1]
b_error_inf_x = stat("MMS_C_Helmiso.stat")["NS"]["IsoFilterDiffAvg%1"]["max"][-1]
a_error_inf_y = stat("MMS_B_Helmiso.stat")["NS"]["IsoFilterDiffAvg%2"]["max"][-1]
b_error_inf_y = stat("MMS_C_Helmiso.stat")["NS"]["IsoFilterDiffAvg%2"]["max"][-1]

ab_ratio_x = a_error_x / b_error_x
ab_ratio_y = a_error_y / b_error_y
ab_ratio_inf_x = a_error_inf_x / b_error_inf_x
ab_ratio_inf_y = a_error_inf_y / b_error_inf_y

output.write('bc_convergence_vel_if '+str(log(ab_ratio_x, 2))+' '+str(log(ab_ratio_inf_x, 2))+' '+str(log(ab_ratio_y, 2))+' '+str(log(ab_ratio_inf_y, 2))+'\n')
output.close()

bc_convergence_vel_if = [[log(ab_ratio_x, 2), log(ab_ratio_inf_x, 2)], [log(ab_ratio_y, 2), log(ab_ratio_inf_y, 2)]]
    </variable>
    <variable name="bc_convergence_div" language="python">
from fluidity_tools import stat_parser as stat
from math import log
output=open('output.log','a')

a_error = stat("MMS_B_Helmiso.stat")["NS"]["CVDivAvg"]["l2norm"][-1]
b_error = stat("MMS_C_Helmiso.stat")["NS"]["CVDivAvg"]["l2norm"][-1]

a_error_inf = stat("MMS_B_Helmiso.stat")["NS"]["CVDivAvg"]["max"][-1]
b_error_inf = stat("MMS_C_Helmiso.stat")["NS"]["CVDivAvg"]["max"][-1]

ab_ratio = a_error / b_error
ab_ratio_inf = a_error_inf / b_error_inf

output.write('bc_convergence_div '+str(log(ab_ratio, 2))+' '+str(log(ab_ratio_inf, 2))+'\n')
output.close()

bc_convergence_div = [log(ab_ratio, 2), log(ab_ratio_inf, 2)]
    </variable>
    <variable name="cd_convergence_vel_f" language="python">
from fluidity_tools import stat_parser as stat
from math import log
output=open('output.log','a')

a_error_x = stat("MMS_C_Helmiso.stat")["NS"]["FilterDiffAvg%1"]["l2norm"][-1]
b_error_x = stat("MMS_D_Helmiso.stat")["NS"]["FilterDiffAvg%1"]["l2norm"][-1]
a_error_y = stat("MMS_C_Helmiso.stat")["NS"]["FilterDiffAvg%2"]["l2norm"][-1]
b_error_y = stat("MMS_D_Helmiso.stat")["NS"]["FilterDiffAvg%2"]["l2norm"][-1]

a_error_inf_x = stat("MMS_C_Helmiso.stat")["NS"]["FilterDiffAvg%1"]["max"][-1]
b_error_inf_x = stat("MMS_D_Helmiso.stat")["NS"]["FilterDiffAvg%1"]["max"][-1]
a_error_inf_y = stat("MMS_C_Helmiso.stat")["NS"]["FilterDiffAvg%2"]["max"][-1]
b_error_inf_y = stat("MMS_D_Helmiso.stat")["NS"]["FilterDiffAvg%2"]["max"][-1]

ab_ratio_x = a_error_x / b_error_x
ab_ratio_y = a_error_y / b_error_y
ab_ratio_inf_x = a_error_inf_x / b_error_inf_x
ab_ratio_inf_y = a_error_inf_y / b_error_inf_y

output.write('cd_convergence_vel_f '+str(log(ab_ratio_x, 2))+' '+str(log(ab_ratio_inf_x, 2))+' '+str(log(ab_ratio_y, 2))+' '+str(log(ab_ratio_inf_y, 2))+'\n')
output.close()

cd_convergence_vel_f = [[log(ab_ratio_x, 2), log(ab_ratio_inf_x, 2)], [log(ab_ratio_y, 2), log(ab_ratio_inf_y, 2)]]
    </variable>
    <variable name="cd_convergence_vel_if" language="python">
from fluidity_tools import stat_parser as stat
from math import log
output=open('output.log','a')

a_error_x = stat("MMS_C_Helmiso.stat")["NS"]["IsoFilterDiffAvg%1"]["l2norm"][-1]
b_error_x = stat("MMS_D_Helmiso.stat")["NS"]["IsoFilterDiffAvg%1"]["l2norm"][-1]
a_error_y = stat("MMS_C_Helmiso.stat")["NS"]["IsoFilterDiffAvg%2"]["l2norm"][-1]
b_error_y = stat("MMS_D_Helmiso.stat")["NS"]["IsoFilterDiffAvg%2"]["l2norm"][-1]

a_error_inf_x = stat("MMS_C_Helmiso.stat")["NS"]["IsoFilterDiffAvg%1"]["max"][-1]
b_error_inf_x = stat("MMS_D_Helmiso.stat")["NS"]["IsoFilterDiffAvg%1"]["max"][-1]
a_error_inf_y = stat("MMS_C_Helmiso.stat")["NS"]["IsoFilterDiffAvg%2"]["max"][-1]
b_error_inf_y = stat("MMS_D_Helmiso.stat")["NS"]["IsoFilterDiffAvg%2"]["max"][-1]

ab_ratio_x = a_error_x / b_error_x
ab_ratio_y = a_error_y / b_error_y
ab_ratio_inf_x = a_error_inf_x / b_error_inf_x
ab_ratio_inf_y = a_error_inf_y / b_error_inf_y

output.write('cd_convergence_vel_if '+str(log(ab_ratio_x, 2))+' '+str(log(ab_ratio_inf_x, 2))+' '+str(log(ab_ratio_y, 2))+' '+str(log(ab_ratio_inf_y, 2))+'\n')
output.close()

cd_convergence_vel_if = [[log(ab_ratio_x, 2), log(ab_ratio_inf_x, 2)], [log(ab_ratio_y, 2), log(ab_ratio_inf_y, 2)]]
    </variable>
    <variable name="cd_convergence_div" language="python">
from fluidity_tools import stat_parser as stat
from math import log
output=open('output.log','a')

a_error = stat("MMS_C_Helmiso.stat")["NS"]["CVDivAvg"]["l2norm"][-1]
b_error = stat("MMS_D_Helmiso.stat")["NS"]["CVDivAvg"]["l2norm"][-1]

a_error_inf = stat("MMS_C_Helmiso.stat")["NS"]["CVDivAvg"]["max"][-1]
b_error_inf = stat("MMS_D_Helmiso.stat")["NS"]["CVDivAvg"]["max"][-1]

ab_ratio = a_error / b_error
ab_ratio_inf = a_error_inf / b_error_inf

output.write('cd_convergence_div '+str(log(ab_ratio, 2))+' '+str(log(ab_ratio_inf, 2))+'\n')
output.close()

cd_convergence_div = [log(ab_ratio, 2), log(ab_ratio_inf, 2)]
    </variable>
    <variable name="de_convergence_vel_f" language="python">
from fluidity_tools import stat_parser as stat
from math import log
output=open('output.log','a')

a_error_x = stat("MMS_D_Helmiso.stat")["NS"]["FilterDiffAvg%1"]["l2norm"][-1]
b_error_x = stat("MMS_E_Helmiso.stat")["NS"]["FilterDiffAvg%1"]["l2norm"][-1]
a_error_y = stat("MMS_D_Helmiso.stat")["NS"]["FilterDiffAvg%2"]["l2norm"][-1]
b_error_y = stat("MMS_E_Helmiso.stat")["NS"]["FilterDiffAvg%2"]["l2norm"][-1]

a_error_inf_x = stat("MMS_D_Helmiso.stat")["NS"]["FilterDiffAvg%1"]["max"][-1]
b_error_inf_x = stat("MMS_E_Helmiso.stat")["NS"]["FilterDiffAvg%1"]["max"][-1]
a_error_inf_y = stat("MMS_D_Helmiso.stat")["NS"]["FilterDiffAvg%2"]["max"][-1]
b_error_inf_y = stat("MMS_E_Helmiso.stat")["NS"]["FilterDiffAvg%2"]["max"][-1]

ab_ratio_x = a_error_x / b_error_x
ab_ratio_y = a_error_y / b_error_y
ab_ratio_inf_x = a_error_inf_x / b_error_inf_x
ab_ratio_inf_y = a_error_inf_y / b_error_inf_y

output.write('de_convergence_vel_f '+str(log(ab_ratio_x, 2))+' '+str(log(ab_ratio_inf_x, 2))+' '+str(log(ab_ratio_y, 2))+' '+str(log(ab_ratio_inf_y, 2))+'\n')
output.close()

de_convergence_vel_f = [[log(ab_ratio_x, 2), log(ab_ratio_inf_x, 2)], [log(ab_ratio_y, 2), log(ab_ratio_inf_y, 2)]]
    </variable>
    <variable name="de_convergence_vel_if" language="python">
from fluidity_tools import stat_parser as stat
from math import log
output=open('output.log','a')

a_error_x = stat("MMS_D_Helmiso.stat")["NS"]["IsoFilterDiffAvg%1"]["l2norm"][-1]
b_error_x = stat("MMS_E_Helmiso.stat")["NS"]["IsoFilterDiffAvg%1"]["l2norm"][-1]
a_error_y = stat("MMS_D_Helmiso.stat")["NS"]["IsoFilterDiffAvg%2"]["l2norm"][-1]
b_error_y = stat("MMS_E_Helmiso.stat")["NS"]["IsoFilterDiffAvg%2"]["l2norm"][-1]

a_error_inf_x = stat("MMS_D_Helmiso.stat")["NS"]["IsoFilterDiffAvg%1"]["max"][-1]
b_error_inf_x = stat("MMS_E_Helmiso.stat")["NS"]["IsoFilterDiffAvg%1"]["max"][-1]
a_error_inf_y = stat("MMS_D_Helmiso.stat")["NS"]["IsoFilterDiffAvg%2"]["max"][-1]
b_error_inf_y = stat("MMS_E_Helmiso.stat")["NS"]["IsoFilterDiffAvg%2"]["max"][-1]

ab_ratio_x = a_error_x / b_error_x
ab_ratio_y = a_error_y / b_error_y
ab_ratio_inf_x = a_error_inf_x / b_error_inf_x
ab_ratio_inf_y = a_error_inf_y / b_error_inf_y

output.write('de_convergence_vel_if '+str(log(ab_ratio_x, 2))+' '+str(log(ab_ratio_inf_x, 2))+' '+str(log(ab_ratio_y, 2))+' '+str(log(ab_ratio_inf_y, 2))+'\n')
output.close()

de_convergence_vel_if = [[log(ab_ratio_x, 2), log(ab_ratio_inf_x, 2)], [log(ab_ratio_y, 2), log(ab_ratio_inf_y, 2)]]
    </variable>
    <variable name="de_convergence_div" language="python">
from fluidity_tools import stat_parser as stat
from math import log
output=open('output.log','a')

a_error = stat("MMS_D_Helmiso.stat")["NS"]["CVDivAvg"]["l2norm"][-1]
b_error = stat("MMS_E_Helmiso.stat")["NS"]["CVDivAvg"]["l2norm"][-1]

a_error_inf = stat("MMS_D_Helmiso.stat")["NS"]["CVDivAvg"]["max"][-1]
b_error_inf = stat("MMS_E_Helmiso.stat")["NS"]["CVDivAvg"]["max"][-1]

ab_ratio = a_error / b_error
ab_ratio_inf = a_error_inf / b_error_inf

output.write('de_convergence_div '+str(log(ab_ratio, 2))+' '+str(log(ab_ratio_inf, 2))+'\n')
output.close()

de_convergence_div = [log(ab_ratio, 2), log(ab_ratio_inf, 2)]
    </variable>
  </variables>
  <pass_tests>
    <test name="ab_convergence_vel_f_x: L2 order > 1.0" language="python">
assert(ab_convergence_vel_f[0][0] &gt; 1.0)
    </test>
    <test name="ab_convergence_vel_f_y: L2 order > 1.0" language="python">
assert(ab_convergence_vel_f[1][0] &gt; 1.0)
    </test>
    <test name="bc_convergence_vel_f_x: L2 order > 1.0" language="python">
assert(bc_convergence_vel_f[0][0] &gt; 1.0)
    </test>
    <test name="bc_convergence_vel_f_y: L2 order > 1.0" language="python">
assert(bc_convergence_vel_f[1][0] &gt; 1.0)
    </test>
    <test name="cd_convergence_vel_f_x: L2 order > 1.0" language="python">
assert(cd_convergence_vel_f[0][0] &gt; 1.0)
    </test>
    <test name="cd_convergence_vel_f_y: L2 order > 1.0" language="python">
assert(cd_convergence_vel_f[1][0] &gt; 1.0)
    </test>
    <test name="de_convergence_vel_f_x: L2 order > 1.0" language="python">
assert(de_convergence_vel_f[0][0] &gt; 1.0)
    </test>
    <test name="de_convergence_vel_f_y: L2 order > 1.0" language="python">
assert(de_convergence_vel_f[1][0] &gt; 1.0)
    </test>
    <test name="ab_convergence_vel_if_x: L2 order > 1.0" language="python">
assert(ab_convergence_vel_if[0][0] &gt; 1.0)
    </test>
    <test name="ab_convergence_vel_if_y: L2 order > 1.0" language="python">
assert(ab_convergence_vel_if[1][0] &gt; 1.0)
    </test>
    <test name="bc_convergence_vel_if_x: L2 order > 1.0" language="python">
assert(bc_convergence_vel_if[0][0] &gt; 1.0)
    </test>
    <test name="bc_convergence_vel_if_y: L2 order > 1.0" language="python">
assert(bc_convergence_vel_if[1][0] &gt; 1.0)
    </test>
    <test name="cd_convergence_vel_if_x: L2 order > 1.0" language="python">
assert(cd_convergence_vel_if[0][0] &gt; 1.0)
    </test>
    <test name="cd_convergence_vel_if_y: L2 order > 1.0" language="python">
assert(cd_convergence_vel_if[1][0] &gt; 1.0)
    </test>
    <test name="de_convergence_vel_if_x: L2 order > 1.0" language="python">
assert(de_convergence_vel_if[0][0] &gt; 1.0)
    </test>
    <test name="de_convergence_vel_if_y: L2 order > 1.0" language="python">
assert(de_convergence_vel_if[1][0] &gt; 1.0)
    </test>
    <test name="ab_convergence_div: L2 order > 0" language="python">
assert(ab_convergence_div[0] &gt; 0.)
    </test>
    <test name="bc_convergence_div: L2 order > 0" language="python">
assert(bc_convergence_div[0] &gt; 0.)
    </test>
    <test name="cd_convergence_div: L2 order > 0" language="python">
assert(cd_convergence_div[0] &gt; 0.)
    </test>
    <test name="de_convergence_div: L2 order > 0" language="python">
assert(de_convergence_div[0] &gt; 0.)
    </test>
  </pass_tests>
  <warn_tests>
  </warn_tests>
</testproblem>

