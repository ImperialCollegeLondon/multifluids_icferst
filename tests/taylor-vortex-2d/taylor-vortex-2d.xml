<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE testproblem SYSTEM "regressiontest.dtd">
<testproblem>
  <name>p1p1-cg LES convergence test</name>
  <owner userid="jbull"/>
  <tags>flml</tags>
  <problem_definition length="special" nprocs="1">
    <command_line>pwd</command_line>
  </problem_definition>
  <variables>
    <variable name="dissipation_error" language="python">
from fluidity_tools import stat_parser as stat
from math import log, pi
import vortex_tools as vt
import numpy

# background viscosity
nu=0.01

# kinetic energy L2 norm

#DNS
timep12 = stat("taylor-green-vortex-2d-periodic_12.stat")["ElapsedTime"]["value"]
tkep12 = stat("taylor-green-vortex-2d-periodic_12.stat")["fluid"]["TKE"]["l2norm"]
dtkep12 = stat("taylor-green-vortex-2d-periodic_12.stat")["fluid"]["TKEDiff"]["l2norm"]
timep24 = stat("taylor-green-vortex-2d-periodic_24.stat")["ElapsedTime"]["value"]
tkep24 = stat("taylor-green-vortex-2d-periodic_24.stat")["fluid"]["TKE"]["l2norm"]
dtkep24 = stat("taylor-green-vortex-2d-periodic_24.stat")["fluid"]["TKEDiff"]["l2norm"]
timep48 = stat("taylor-green-vortex-2d-periodic_48.stat")["ElapsedTime"]["value"]
tkep48 = stat("taylor-green-vortex-2d-periodic_48.stat")["fluid"]["TKE"]["l2norm"]
dtkep48 = stat("taylor-green-vortex-2d-periodic_48.stat")["fluid"]["TKEDiff"]["l2norm"]

#LES

#dynamic LES
timedlp12 = stat("taylor-green-vortex-2d-dynles-periodic_12.stat")["ElapsedTime"]["value"]
tkedlp12 = stat("taylor-green-vortex-2d-dynles-periodic_12.stat")["fluid"]["TKE"]["l2norm"]
dtkedlp12 = stat("taylor-green-vortex-2d-dynles-periodic_12.stat")["fluid"]["TKEDiff"]["l2norm"]
timedlp24 = stat("taylor-green-vortex-2d-dynles-periodic_24.stat")["ElapsedTime"]["value"]
tkedlp24 = stat("taylor-green-vortex-2d-dynles-periodic_24.stat")["fluid"]["TKE"]["l2norm"]
dtkedlp24 = stat("taylor-green-vortex-2d-dynles-periodic_24.stat")["fluid"]["TKEDiff"]["l2norm"]
timedlp48 = stat("taylor-green-vortex-2d-dynles-periodic_48.stat")["ElapsedTime"]["value"]
tkedlp48 = stat("taylor-green-vortex-2d-dynles-periodic_48.stat")["fluid"]["TKE"]["l2norm"]
dtkedlp48 = stat("taylor-green-vortex-2d-dynles-periodic_48.stat")["fluid"]["TKEDiff"]["l2norm"]

timedlap12 = stat("taylor-green-vortex-2d-dynles-aniso-periodic_12.stat")["ElapsedTime"]["value"]
tkedlap12 = stat("taylor-green-vortex-2d-dynles-aniso-periodic_12.stat")["fluid"]["TKE"]["l2norm"]
dtkedlap12 = stat("taylor-green-vortex-2d-dynles-aniso-periodic_12.stat")["fluid"]["TKEDiff"]["l2norm"]
timedlap24 = stat("taylor-green-vortex-2d-dynles-aniso-periodic_24.stat")["ElapsedTime"]["value"]
tkedlap24 = stat("taylor-green-vortex-2d-dynles-aniso-periodic_24.stat")["fluid"]["TKE"]["l2norm"]
dtkedlap24 = stat("taylor-green-vortex-2d-dynles-aniso-periodic_24.stat")["fluid"]["TKEDiff"]["l2norm"]
timedlap48 = stat("taylor-green-vortex-2d-dynles-aniso-periodic_48.stat")["ElapsedTime"]["value"]
tkedlap48 = stat("taylor-green-vortex-2d-dynles-aniso-periodic_48.stat")["fluid"]["TKE"]["l2norm"]
dtkedlap48 = stat("taylor-green-vortex-2d-dynles-aniso-periodic_48.stat")["fluid"]["TKEDiff"]["l2norm"]

# Analytical solution
exact = stat("taylor-green-vortex-2d-periodic_48.stat")["fluid"]["ExactTKE"]["l2norm"]
texact = timep48

times=(timep12,timep24,timep48,timedlp12,timedlp24,timedlp48,timedlap12,timedlap24,timedlap48,texact)
tke=(tkep12,tkep24,tkep48,tkedlp12,tkedlp24,tkedlp48,tkedlap12,tkedlap24,tkedlap48,exact)
error=(dtkep12,dtkep24,dtkep48,dtkedlp12,dtkedlp24,dtkedlp48,dtkedlap12,dtkedlap24,dtkedlap48)

# Time derivative of TKE
dissiprates = vt.differentiate(times,tke)
vt.plot_dissipation(times,dissiprates)

# Error plot
vt.plot_tke(times,error)

# Integrals over time
integrals = vt.integrate(times,error)
print 'integrals ', integrals

# IS THIS THE CORRECT WAY TO MEASURE CONVERGENCE?
conv1224 = abs(integrals[0]/integrals[1])
conv2448 = abs(integrals[1]/integrals[2])

convdlp1224 = abs(integrals[3]/integrals[4])
convdlp2448 = abs(integrals[4]/integrals[5])

convdlap1224 = abs(integrals[6]/integrals[7])
convdlap2448 = abs(integrals[7]/integrals[8])

# Write convergence stats to file
output=open('output.log','w')
output.write('convergence_periodic_12_24 '+str(log(conv1224,2))+'\n')
output.write('convergence_periodic_24_48 '+str(log(conv2448,2))+'\n')
output.write('convergence_dynles_periodic_12_24 '+str(log(convdlp1224,2))+'\n')
output.write('convergence_dynles_periodic_24_48 '+str(log(convdlp2448,2))+'\n')
output.write('convergence_dynles_aniso_periodic_12_24 '+str(log(convdlap1224,2))+'\n')
output.write('convergence_dynles_aniso_periodic_24_48 '+str(log(convdlap2448,2))+'\n')
output.close()

dissipation_error = [log(conv1224,2),log(conv2448,2),log(convdlp1224,2),log(convdlp2448,2),log(convdlap1224,2),log(convdlap2448,2)]
    </variable>
  </variables>
  <pass_tests>
    <test name="convergence-DNS-12-24" language="python">
assert(dissipation_error[0]>1.9)
    </test>
    <test name="convergence-DNS-24-48" language="python">
assert(dissipation_error[1]>1.9)
    </test>
    <test name="convergence-dynles-12-24" language="python">
assert(dissipation_error[2]>1.9)
    </test>
    <test name="convergence-dynles-24-48" language="python">
assert(dissipation_error[3]>1.9)
    </test>
  </pass_tests>
  <warn_tests>
  </warn_tests>
</testproblem>

