<?xml version="1.0" encoding="UTF-8" ?>

<testproblem>
  <name>k_epsilon_buoyancy_cv</name>
  <owner userid="sp911"/>
  <tags>flml k-epsilon test</tags>
  <problem_definition length="short" nprocs="1">
    <command_line>fluidity k_epsilon_buoyancy_cv.flml</command_line>
    <!-- check k_epsilon source terms are as expected -->
</problem_definition>
  <variables>   
    <variable name="kk_S_error" language="python">
from vtktools import *
from numpy import *
data = vtu('k_epsilon_buoyancy_cv_0.vtu')

ST = 4.0
EV = data.GetField("ScalarEddyViscosity")
kk_S_expected = ST*EV

data = vtu('KK_src_abs_terms_1.vtu')
kk_S_actual = data.GetField("KK_P_EV_SRC")

kk_S_error = (abs(kk_S_expected - kk_S_actual)/kk_S_expected).max()
    </variable>  
    <variable name="kk_A_error" language="python">
from vtktools import *
from numpy import *
data = vtu('k_epsilon_buoyancy_cv_0.vtu')

eps = data.GetField("TurbulentDissipation")
kk = data.GetField("TurbulentKineticEnergy")
kk_A_expected = eps/kk

data = vtu('KK_src_abs_terms_1.vtu')
kk_A_actual = data.GetField("KK_EPS_ABS")

kk_A_error = (abs(kk_A_expected - kk_A_actual)/kk_A_expected).max()
    </variable>  
    <variable name="kk_B_error" language="python">
from vtktools import *
from numpy import *
data = vtu('k_epsilon_buoyancy_cv_0.vtu')

EV = data.GetField("ScalarEddyViscosity")
kk = data.GetField("TurbulentKineticEnergy")
B_vect = -1.0
B_scalar = 1.0/kk * 1.0 * 10.0 * EV / 1.0
kk_B_expected = B_vect * B_scalar

data = vtu('KK_src_abs_terms_1.vtu')
kk_B_actual = data.GetField("KK_BUOY_ABS")

kk_B_error = (abs(kk_B_expected - kk_B_actual)/kk_B_expected).max()
    </variable>    
    <variable name="keps_S_error" language="python">
from vtktools import *
from numpy import *
data = vtu('k_epsilon_buoyancy_cv_0.vtu')

ST = 4.0
EV = data.GetField("ScalarEddyViscosity")
eps = data.GetField("TurbulentDissipation")
kk = data.GetField("TurbulentKineticEnergy")
keps_S_expected = 1.44*eps/kk*ST*EV

data = vtu('EPS_src_abs_terms_1.vtu')
keps_S_actual = data.GetField("EPS_P_EV_SRC")

keps_S_error = (abs(keps_S_expected - keps_S_actual)/keps_S_expected).max()
    </variable>  
    <variable name="keps_A_error" language="python">
from vtktools import *
from numpy import *
data = vtu('k_epsilon_buoyancy_cv_0.vtu')

eps = data.GetField("TurbulentDissipation")
kk = data.GetField("TurbulentKineticEnergy")
keps_A_expected = 1.92*eps/kk

data = vtu('EPS_src_abs_terms_1.vtu')
keps_A_actual = data.GetField("EPS_EPS_ABS")

keps_A_error = (abs(keps_A_expected - keps_A_actual)/keps_A_expected).max()
    </variable>  
    <variable name="keps_B_error" language="python">
from vtktools import *
from numpy import *
data = vtu('k_epsilon_buoyancy_cv_0.vtu')

EV = data.GetField("ScalarEddyViscosity")
kk = data.GetField("TurbulentKineticEnergy")
u = data.GetField("Velocity")
g_dir = data.GetField("GravityDirection")
u_z = u*abs(g_dir)
u_xy = u - u_z
u_z_norm = zeros([len(u_z),1])
u_xy_norm = zeros([len(u_xy),1])

for i in range(len(u_z)):
  u_z_norm[i,0] = linalg.norm(u_z[i])
  u_xy_norm[i,0] = max(linalg.norm(u_xy[i]), 1e-10)

c_eps_3 = tanh(u_z_norm/u_xy_norm)
B_vect = -1.0
B_scalar = 1.0/kk * 1.44 * c_eps_3 * 1.0 * 10.0 * EV / 1.0
keps_B_expected = B_vect * B_scalar

data = vtu('EPS_src_abs_terms_1.vtu')
keps_B_actual = data.GetField("EPS_BUOY_ABS")

keps_B_error= abs((keps_B_expected - keps_B_actual)/keps_B_expected)
keps_B_error[keps_B_error>=100] = 1e-15
keps_B_error = keps_B_error.mean()
    </variable>  
  </variables>
  <pass_tests>
    <!-- kinetic energy source term is as expected -->
    <test name="kinetic energy source term is as expected, error less than 0.01%" language="python">
assert(kk_S_error &lt; 0.0001)
    </test>
    <!-- kinetic energy absorbtion term is as expected -->
    <test name="kinetic energy absorbtion term is as expected, error less than 0.01%" language="python">
assert(kk_A_error &lt; 0.0001)
    </test>
    <!-- kinetic energy buoyancy term is as expected -->
    <test name="kinetic energy buoyancy term is as expected, error less than 0.01%" language="python">
assert(kk_B_error &lt; 0.0001)
    </test>
    <!-- dissipation source term is as expected -->
    <test name="dissipation source term is as expected, error less than 0.01%" language="python">
assert(keps_S_error &lt; 0.0001)
    </test>
    <!-- dissipation absorbtion term is as expected -->
    <test name="dissipation absorbtion term is as expected, error less than 0.01%" language="python">
assert(keps_A_error &lt; 0.0001)
    </test>
    <!-- dissipation buoyancy term is as expected -->
    <test name="dissipation buoyancy term is as expected, error less than 1% - higher than other because of movement of scalar field during non-linear iterations and differences in calculation" language="python">
assert(keps_B_error &lt; 0.01)
    </test>
  </pass_tests>
  <warn_tests>
  </warn_tests>
</testproblem>
