<?xml version="1.0" encoding="UTF-8" ?>

<testproblem>
  <name>p1dgp2-test-cty-cv-rhop1dg multi-material flow test</name>
  <owner userid="btollit"/>
  <tags>flml</tags>
    <problem_definition length="medium" nprocs="1">
    <command_line>fluidity -v1 -l 2material-droplet-p1dgp2-test-cty-cv-rhop1dg.flml </command_line>
  </problem_definition>  
  <variables>  
    <variable name="endtime" language="python">
from fluidity_tools import stat_parser as stat
endtime=stat("2material-droplet-p1dgp2-test-cty-cv-rhop1dg.stat")["ElapsedTime"]["value"][-1]
    </variable>
    <variable name="endtimestep" language="python">
from fluidity_tools import stat_parser as stat
endtimestep=stat("2material-droplet-p1dgp2-test-cty-cv-rhop1dg.stat")["dt"]["value"][-1]
    </variable>
    <variable name="mindivergence" language="python">
from fluidity_tools import stat_parser as stat
mindivergence=max(abs(stat("2material-droplet-p1dgp2-test-cty-cv-rhop1dg.stat")["Water"]["ControlVolumeDivergence"]["min"]))
    </variable>
    <variable name="maxdivergence" language="python">
from fluidity_tools import stat_parser as stat
maxdivergence=max(stat("2material-droplet-p1dgp2-test-cty-cv-rhop1dg.stat")["Water"]["ControlVolumeDivergence"]["max"])
    </variable>
     <variable name="vfracintwater0" language="python"> 
import fluidity_tools
vfracintwater0 = fluidity_tools.stat_parser("2material-droplet-p1dgp2-test-cty-cv-rhop1dg.stat")['Water']['MaterialVolumeFraction']['cv_integral'][0]
    </variable>    
     <variable name="vfracintwater" language="python"> 
import fluidity_tools
vfracintwater = fluidity_tools.stat_parser("2material-droplet-p1dgp2-test-cty-cv-rhop1dg.stat")['Water']['MaterialVolumeFraction']['cv_integral'][-1]
    </variable>    
     <variable name="mxvfracwater" language="python"> 
import fluidity_tools
mxvfracwater = min(fluidity_tools.stat_parser("2material-droplet-p1dgp2-test-cty-cv-rhop1dg.stat")['Water']['MaterialVolumeFraction']['max'])
    </variable>    
     <variable name="mnvfracwater" language="python"> 
import fluidity_tools
mnvfracwater = min(fluidity_tools.stat_parser("2material-droplet-p1dgp2-test-cty-cv-rhop1dg.stat")['Water']['MaterialVolumeFraction']['min'])
    </variable>    
     <variable name="mxvfracair" language="python"> 
import fluidity_tools
mxvfracair = max(fluidity_tools.stat_parser("2material-droplet-p1dgp2-test-cty-cv-rhop1dg.stat")['Air']['MaterialVolumeFraction']['max'])
    </variable>    
     <variable name="mnvfracair" language="python"> 
import fluidity_tools
mnvfracair = min(fluidity_tools.stat_parser("2material-droplet-p1dgp2-test-cty-cv-rhop1dg.stat")['Air']['MaterialVolumeFraction']['min'])
    </variable>    
  </variables>
    <pass_tests>  
    <test name="check end time" language="python">
assert endtime &gt; 0.36
    </test>
    <test name="check end timestep" language="python">
assert endtimestep &gt; 0.002
    </test>
    <test name="check water volume fraction was conserved" language="python">
print 'conservation error = ', abs(vfracintwater0-vfracintwater)
assert abs(vfracintwater0-vfracintwater) &lt; max(maxdivergence, mindivergence)
    </test>
    <test name="check that reasonable tolerance is being used to test conservation" language="python">
print 'divergence tolerance = ', max(maxdivergence, mindivergence)
assert max(maxdivergence, mindivergence) &lt; 1.E-8
    </test>
    <test name="check minimum water volume fraction is 0.0" language="python">
assert abs(mnvfracwater) &lt; 1e-10
    </test>
    <test name="check maximum water volume fraction is 1.0" language="python">
assert abs(mxvfracwater-1.0) &lt; 1e-10
    </test>
    <test name="check minimum air volume fraction is 0.0" language="python">
assert abs(mnvfracair) &lt; 1e-10
    </test>
    <test name="check maximum air volume fraction is 1.0" language="python">
assert abs(mxvfracair-1.0) &lt; 1e-10
    </test>
  </pass_tests>
  <warn_tests>
  </warn_tests>
</testproblem>
