<?xml version="1.0" encoding="UTF-8" ?>
<testproblem>
  <name>Shallow Water Equation MMS Controls 2d</name>
  <owner userid="sf1409"/>
  <tags>swml adjoint</tags>
  <problem_definition length="medium" nprocs="1">
    <command_line> time shallow_water adjoint_A.swml; time shallow_water adjoint_B.swml; time shallow_water adjoint_C.swml;</command_line>
  </problem_definition>
  <variables>
    <variable name="mms_u_passed" language="python">
import adjoint_controls_convergence_rate_2d as convergence_rate
convergence_rate.print_convergence_rates("wave_[A-C].stat", ["VelocityError%1"])
mms_u_passed = convergence_rate.test_convergence_rates(1.7, "wave_[A-C].stat", ["VelocityError%1"])
    </variable>
    <variable name="mms_eta_passed" language="python">
import adjoint_controls_convergence_rate_2d as convergence_rate
convergence_rate.print_convergence_rates("wave_[A-C].stat", ["LayerThicknessError"])
mms_eta_passed = convergence_rate.test_convergence_rates(1.8, "wave_[A-C].stat", ["LayerThicknessError"])
    </variable>
    <variable name="functional_convergence" language="python">
import numpy
import math
import shallow_water_adjoint_default_controls_2d as constants

from fluidity_tools import stat_parser as stat
sims = ["_A", "_B", "_C"]
funcs = numpy.zeros(len(sims))
for i, sim in enumerate(sims):
  funcs[i] = stat("wave%s.stat" % sim)["integral_eta_t1"]["value"][-1]
errors = numpy.abs(constants.functional - funcs) # true value is computed using sage

functional_convergence = numpy.zeros(len(sims)-1)
for i in range(len(sims)-1):
  functional_convergence[i] = math.log(errors[i]/errors[i+1], 2)
    </variable>
    <variable name="dJdh_convergence" language="python">
import glob
import numpy
from fluidity_tools import stat_parser
import math
import shallow_water_adjoint_default_controls_2d as constants

files = glob.glob("wave_[A-C]_adjoint_integral_eta_t1.stat")
dJdh = [sum(stat_parser(file)["Fluid"]["dJdh"]["min"]) for file in sorted(files)]

print 'dJdh', dJdh

errors = abs(numpy.array(dJdh) - constants.dfunctional)
dJdh_convergence = numpy.zeros(len(errors)-1)
for i in range(len(errors)-1):
  dJdh_convergence[i] = math.log(errors[i]/errors[i+1], 2)
    </variable>
  </variables>
  <pass_tests>
    <test name="mms_eta convergence" language="python">
assert mms_eta_passed
    </test>
    <test name="mms_u convergence" language="python">
assert mms_u_passed
    </test>
    <test name="functional_convergence" language="python">
for order in functional_convergence[1:]:
  assert order &gt; 1.95
    </test>
    <test name="dJdh" language="python">
for order in dJdh_convergence[1:]:
  assert order &gt; 2.0
    </test>
  </pass_tests>
  <warn_tests>
  </warn_tests>
</testproblem>
