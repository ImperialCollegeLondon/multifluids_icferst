<?xml version="1.0" encoding="UTF-8" ?>

<testproblem>

  <name>mphase_mms_p2p1_compressible_ie</name>
  <owner userid="ctj10"/>
  <tags>flml</tags>
  
  <problem_definition length="long" nprocs="1">
    <command_line>make run</command_line>
  </problem_definition>
  
  <variables>
  
    <variable name="ab_convergence_vel" language="python">
from fluidity_tools import stat_parser as stat
from math import log

print "Calculating errors for Phase1 Velocity in A-B convergence test"
a_error_x = stat("MMS_A.stat")["Phase1"]["VelocityError%1"]["l2norm"][-1]
a_error_y = stat("MMS_A.stat")["Phase1"]["VelocityError%2"]["l2norm"][-1]
b_error_x = stat("MMS_B.stat")["Phase1"]["VelocityError%1"]["l2norm"][-1]
b_error_y = stat("MMS_B.stat")["Phase1"]["VelocityError%2"]["l2norm"][-1]

print a_error_x
print a_error_y
print b_error_x
print b_error_y

ab_ratio_x = a_error_x / b_error_x
ab_ratio_y = a_error_y / b_error_y
ab_ratio_f1 = [log(ab_ratio_x, 2), log(ab_ratio_y, 2)]

print "Calculating errors for Phase2 Velocity in A-B convergence test"
a_error_x = stat("MMS_A.stat")["Phase2"]["VelocityError%1"]["l2norm"][-1]
a_error_y = stat("MMS_A.stat")["Phase2"]["VelocityError%2"]["l2norm"][-1]
b_error_x = stat("MMS_B.stat")["Phase2"]["VelocityError%1"]["l2norm"][-1]
b_error_y = stat("MMS_B.stat")["Phase2"]["VelocityError%2"]["l2norm"][-1]

print a_error_x
print a_error_y
print b_error_x
print b_error_y

ab_ratio_x = a_error_x / b_error_x
ab_ratio_y = a_error_y / b_error_y
ab_ratio_f2 = [log(ab_ratio_x, 2), log(ab_ratio_y, 2)]

ab_convergence_vel = [ab_ratio_f1, ab_ratio_f2]
    </variable>
    
    <variable name="ab_convergence_p" language="python">
from fluidity_tools import stat_parser as stat
from math import log

print "Calculating errors for common Pressure in A-B convergence test"
a_error = stat("MMS_A.stat")["Phase1"]["PressureError"]["l2norm"][-1]
b_error = stat("MMS_B.stat")["Phase1"]["PressureError"]["l2norm"][-1]

print a_error
print b_error

ab_ratio = a_error / b_error
ab_convergence_p = log(ab_ratio, 2)
    </variable>
    
<!--    <variable name="ab_convergence_density" language="python">
from fluidity_tools import stat_parser as stat
from math import log

print "Calculating errors for Density in A-B convergence test"
a_error = stat("MMS_A.stat")["Phase1"]["DensityError"]["l2norm"][-1]
b_error = stat("MMS_B.stat")["Phase1"]["DensityError"]["l2norm"][-1]

print a_error
print b_error

ab_ratio = a_error / b_error
ab_convergence_p = log(ab_ratio, 2)
    </variable>-->
    
    <variable name="ab_convergence_ie" language="python">
from fluidity_tools import stat_parser as stat
from math import log

print "Calculating errors for InternalEnergy in A-B convergence test"
a_error = stat("MMS_A.stat")["Phase1"]["InternalEnergyError"]["l2norm"][-1]
b_error = stat("MMS_B.stat")["Phase1"]["InternalEnergyError"]["l2norm"][-1]

print a_error
print b_error

ab_ratio_f1 = a_error / b_error

a_error = stat("MMS_A.stat")["Phase2"]["ScalarAbsoluteDifference"]["l2norm"][-1]
b_error = stat("MMS_B.stat")["Phase2"]["ScalarAbsoluteDifference"]["l2norm"][-1]

print a_error
print b_error

ab_ratio_f2 = a_error / b_error

ab_convergence_ie = [ab_ratio_f1, ab_ratio_f2]
    </variable>
 
    <variable name="bc_convergence_vel" language="python">
from fluidity_tools import stat_parser as stat
from math import log

print "Calculating errors for Phase1 Velocity in A-B convergence test"
a_error_x = stat("MMS_B.stat")["Phase1"]["VelocityError%1"]["l2norm"][-1]
a_error_y = stat("MMS_B.stat")["Phase1"]["VelocityError%2"]["l2norm"][-1]
b_error_x = stat("MMS_C.stat")["Phase1"]["VelocityError%1"]["l2norm"][-1]
b_error_y = stat("MMS_C.stat")["Phase1"]["VelocityError%2"]["l2norm"][-1]

print a_error_x
print a_error_y
print b_error_x
print b_error_y

ab_ratio_x = a_error_x / b_error_x
ab_ratio_y = a_error_y / b_error_y
ab_ratio_f1 = [log(ab_ratio_x, 2), log(ab_ratio_y, 2)]

print "Calculating errors for Phase2 Velocity in A-B convergence test"
a_error_x = stat("MMS_B.stat")["Phase2"]["VelocityError%1"]["l2norm"][-1]
a_error_y = stat("MMS_B.stat")["Phase2"]["VelocityError%2"]["l2norm"][-1]
b_error_x = stat("MMS_C.stat")["Phase2"]["VelocityError%1"]["l2norm"][-1]
b_error_y = stat("MMS_C.stat")["Phase2"]["VelocityError%2"]["l2norm"][-1]

print a_error_x
print a_error_y
print b_error_x
print b_error_y

ab_ratio_x = a_error_x / b_error_x
ab_ratio_y = a_error_y / b_error_y
ab_ratio_f2 = [log(ab_ratio_x, 2), log(ab_ratio_y, 2)]

bc_convergence_vel = [ab_ratio_f1, ab_ratio_f2]
    </variable>
    
    <variable name="bc_convergence_p" language="python">
from fluidity_tools import stat_parser as stat
from math import log

print "Calculating errors for common Pressure in A-B convergence test"
a_error = stat("MMS_B.stat")["Phase1"]["PressureError"]["l2norm"][-1]
b_error = stat("MMS_C.stat")["Phase1"]["PressureError"]["l2norm"][-1]

print a_error
print b_error

ab_ratio = a_error / b_error
bc_convergence_p = log(ab_ratio, 2)
    </variable>
    
<!--    <variable name="ab_convergence_density" language="python">
from fluidity_tools import stat_parser as stat
from math import log

print "Calculating errors for Density in A-B convergence test"
a_error = stat("MMS_B.stat")["Phase1"]["DensityError"]["l2norm"][-1]
b_error = stat("MMS_C.stat")["Phase1"]["DensityError"]["l2norm"][-1]

print a_error
print b_error

ab_ratio = a_error / b_error
ab_convergence_p = log(ab_ratio, 2)
    </variable>-->
    
    <variable name="bc_convergence_ie" language="python">
from fluidity_tools import stat_parser as stat
from math import log

print "Calculating errors for InternalEnergy in A-B convergence test"
a_error = stat("MMS_B.stat")["Phase1"]["InternalEnergyError"]["l2norm"][-1]
b_error = stat("MMS_C.stat")["Phase1"]["InternalEnergyError"]["l2norm"][-1]

print a_error
print b_error

ab_ratio_f1 = a_error / b_error

a_error = stat("MMS_B.stat")["Phase2"]["ScalarAbsoluteDifference"]["l2norm"][-1]
b_error = stat("MMS_C.stat")["Phase2"]["ScalarAbsoluteDifference"]["l2norm"][-1]

print a_error
print b_error

ab_ratio_f2 = a_error / b_error

bc_convergence_ie = [ab_ratio_f1, ab_ratio_f2]
    </variable>
    
    <variable name="solvers_converged" language="python">
import os
files = os.listdir("./")
solvers_converged = not "matrixdump" in files and not "matrixdump.info" in files
    </variable>
  </variables>
  
  <pass_tests>
    <test name="ab_convergence_vel_x for Phase1: L2 order > 2.0" language="python">
assert(ab_convergence_vel[0][0] &gt; 2.0)
    </test>
    <test name="ab_convergence_vel_y for Phase1: L2 order > 2.0" language="python">
assert(ab_convergence_vel[0][1] &gt; 2.0)
    </test>
    
    <test name="ab_convergence_vel_x for Phase2: L2 order > 2.0" language="python">
assert(ab_convergence_vel[1][0] &gt; 2.0)
    </test>
    <test name="ab_convergence_vel_y for Phase2: L2 order > 2.0" language="python">
assert(ab_convergence_vel[1][1] &gt; 2.0)
    </test>
    
    <test name="ab_convergence_p: L2 order > 1.8" language="python">
assert(ab_convergence_p &gt; 1.8)
    </test>
    
<!--    <test name="ab_convergence_density: L2 order > 1.8" language="python">
assert(ab_convergence_density &gt; 1.8)
    </test>-->
    
    <test name="ab_convergence_ie for Phase1: L2 order > 1.8" language="python">
assert(ab_convergence_ie[0] &gt; 1.8)
    </test>

    <test name="ab_convergence_ie for Phase2: L2 order > 1.8" language="python">
assert(ab_convergence_ie[1] &gt; 1.8)
    </test>
    
    <test name="bc_convergence_vel_x for Phase1: L2 order > 2.0" language="python">
assert(bc_convergence_vel[0][0] &gt; 2.0)
    </test>
    <test name="bc_convergence_vel_y for Phase1: L2 order > 2.0" language="python">
assert(bc_convergence_vel[0][1] &gt; 2.0)
    </test>
    
    <test name="bc_convergence_vel_x for Phase2: L2 order > 2.0" language="python">
assert(bc_convergence_vel[1][0] &gt; 2.0)
    </test>
    <test name="bc_convergence_vel_y for Phase2: L2 order > 2.0" language="python">
assert(bc_convergence_vel[1][1] &gt; 2.0)
    </test>
    
    <test name="bc_convergence_p: L2 order > 1.8" language="python">
assert(bc_convergence_p &gt; 1.8)
    </test>
    
<!--    <test name="ab_convergence_density: L2 order > 1.8" language="python">
assert(ab_convergence_density &gt; 1.8)
    </test>-->
    
    <test name="bc_convergence_ie for Phase1: L2 order > 1.8" language="python">
assert(bc_convergence_ie[0] &gt; 1.8)
    </test>

    <test name="bc_convergence_ie for Phase2: L2 order > 1.8" language="python">
assert(bc_convergence_ie[1] &gt; 1.8)
    </test>
    
    <test name="Solvers converged" language="python">
assert(solvers_converged)
    </test>
    
  </pass_tests>
  
  <warn_tests>
  </warn_tests>
  
</testproblem>

