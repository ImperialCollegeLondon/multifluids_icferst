<?xml version="1.0" encoding="UTF-8" ?>

<testproblem>
  <name>Control volume, multi-material surface integral pressure check</name>
  <owner userid="cwilson"/>
  <tags>flml zoltan parallel</tags>
    <problem_definition length="special" nprocs="1">
    <command_line>mpiexec -n 2 ../../bin/fluidity -v2 -l column_under_gravity.flml</command_line>
  </problem_definition>  
  <variables>  
    <variable name="finish_time" language="python">
from fluidity_tools import stat_parser
s = stat_parser("column_under_gravity.stat")
finish_time = s["ElapsedTime"]["value"][-1]
    </variable>
    <variable name="no_nodes" language="python">
from fluidity_tools import stat_parser
s = stat_parser("column_under_gravity.stat")
no_nodes = s["CoordinateMesh"]["nodes"]
    </variable>
    <variable name="pressure" language="python">
import fluidity_tools
pressure = fluidity_tools.stat_parser("column_under_gravity.stat")['Material1']['Pressure']['max']
    </variable>    
    <variable name="minpressure" language="python">
import fluidity_tools
minpressure = fluidity_tools.stat_parser("column_under_gravity.stat")['Material1']['Pressure']['min']
    </variable>    
    <variable name="velocity" language="python">
import fluidity_tools
velocity = fluidity_tools.stat_parser("column_under_gravity.stat")['Material1']['Velocity%magnitude']['max']
    </variable>    
    <variable name="mixing" language="python">
import fluidity_tools
mixing = fluidity_tools.stat_parser("column_under_gravity.stat")['Material2']['MaterialVolumeFraction']['mixing_bins%vfrac']
    </variable>
    <variable name = "solvers_converged" language = "python">
import os
files = os.listdir("./")
solvers_converged = not "matrixdump" in files and not "matrixdump.info" in files
    </variable>
   </variables>
    <pass_tests>  
    <test name="finish time is 1" language="python">
assert abs(finish_time - 1) &lt; 0.001
    </test>
<!--    <test name="no. nodes is initially 229" language="python">
assert abs(no_nodes[0] - 229) &lt; 1e-9
    </test>-->
    <test name="no. nodes is constant" language="python">
import numpy
assert(numpy.all(abs(no_nodes[1:] - no_nodes[0]) &lt; 1e-9))
    </test>
    <test name="check maximum initial pressure is 10.0" language="python">
assert abs(pressure[0]-5005) &lt; 1e-6
    </test>    
    <test name="check maximum pressure is constant" language="python">
print abs(pressure[1:]-pressure[0]).max()
import numpy
assert numpy.all(abs(pressure[1:]-pressure[0]) &lt; 1e-8)
    </test>    
    <test name="check initial minimum pressure is 0.0" language="python">
assert abs(minpressure[0]) &lt; 1e-6
    </test>    
    <test name="check minimum pressure is constant" language="python">
print abs(minpressure[1:]-minpressure[0]).max()
import numpy
assert numpy.all(abs(minpressure[1:]-minpressure[0]) &lt; 1e-9)
    </test>    
    <test name="check maximum initial speed is zero" language="python">
assert abs(velocity[0]) &lt; 1e-6
    </test>
    <test name="check maximum speed is constant" language="python">
print abs(velocity[1:]-velocity[0]).max()
import numpy
assert numpy.all(abs(velocity[1:]-velocity[0]) &lt; 1e-9)
    </test>    
    <test name="check initial mixing 1" language="python">
assert abs(mixing[0][0]-0.5) &lt; 1e-6
    </test>
    <test name="check initial mixing 2" language="python">
assert abs(mixing[1][0]) &lt; 1e-6
    </test>
    <test name="check initial mixing 3" language="python">
assert abs(mixing[2][0]) &lt; 1e-6
    </test>
    <test name="check initial mixing 4" language="python">
assert abs(mixing[3][0]) &lt; 1e-6
    </test>
    <test name="check initial mixing 5" language="python">
assert abs(mixing[4][0]-0.5) &lt; 1e-6
    </test>
    <test name="check mixing 1 is constant" language="python">
print abs(mixing[0][1:]-mixing[0][0]).max()
import numpy
assert numpy.all(abs(mixing[0][1:]-mixing[0][0]) &lt; 1e-9)
    </test>
    <test name="check mixing 2 is constant" language="python">
print abs(mixing[1][1:]-mixing[1][0]).max()
import numpy
assert numpy.all(abs(mixing[1][1:]-mixing[1][0]) &lt; 1e-9)
    </test>
    <test name="check mixing 3 is constant" language="python">
print abs(mixing[2][1:]-mixing[2][0]).max()
import numpy
assert numpy.all(abs(mixing[2][1:]-mixing[2][0]) &lt; 1e-9)
    </test>
    <test name="check mixing 4 is constant" language="python">
print abs(mixing[3][1:]-mixing[3][0]).max()
import numpy
assert numpy.all(abs(mixing[3][1:]-mixing[3][0]) &lt; 1e-9)
    </test>
    <test name="check mixing 5 is constant" language="python">
print abs(mixing[4][1:]-mixing[4][0]).max()
import numpy
assert numpy.all(abs(mixing[4][1:]-mixing[4][0]) &lt; 1e-9)
    </test>
    <test name = "Solvers converged" language = "python">
assert(solvers_converged)
    </test>
  </pass_tests>
  <warn_tests>
  </warn_tests>
</testproblem>
