<?xml version="1.0" encoding="UTF-8" ?>

<testproblem>
  <name>lagrangian_detectors_increasing_rotation</name>
  <owner userid="drhodrid"/>
  <tags>flml parallel zoltan</tags>
  <problem_definition length="short" nprocs="4">
    <command_line>
mpiexec ../../bin/flredecomp -i 1 -o 4 -v -l lagrangian-detectors-increasing-rotation lagrangian-detectors-increasing-rotation-flredecomp;
mpiexec ../../bin/fluidity -v3 -l lagrangian-detectors-increasing-rotation-flredecomp.flml
    </command_line>
  </problem_definition>
  <variables>
    <variable name="last_single_locations_error" language="python">
import numpy as np
from fluidity_tools import stat_parser
s = stat_parser("lagrangian_detectors.detectors")
last_single_locations_error = np.zeros((2,3))

X=np.zeros(100,float)
Y=np.zeros(100,float)
f = open('Xvals.npy', "r")
X_in= np.fromfile(f,dtype=np.float)
f = open('Yvals.npy', "r")
Y_in= np.fromfile(f,dtype=np.float)
for i in range(0,100):
    X[i]=X_in[i+10]
    Y[i]=Y_in[i+10]
    
last_single_locations_error[0,0] = s['Single_Lagr_1']['position'][0][-1] - X[0]
last_single_locations_error[1,0] = s['Single_Lagr_1']['position'][1][-1] - Y[0]
last_single_locations_error[0,1] = s['Single_Lagr_2']['position'][0][-1] - X[50]
last_single_locations_error[1,1] = s['Single_Lagr_2']['position'][1][-1] - Y[50]
last_single_locations_error[0,2] = s['Single_Lagr_3']['position'][0][-1] - X[99]
last_single_locations_error[1,2] = s['Single_Lagr_3']['position'][1][-1] - Y[99]
    </variable>
    <variable name="last_locations_error" language="python">
from fluidity_tools import stat_parser
import numpy as np

s = stat_parser('lagrangian_detectors.detectors')
last_locations_error = np.zeros((2,100))

X=np.zeros(100,float)
Y=np.zeros(100,float)
f = open('Xvals.npy', "r")
X_in= np.fromfile(f,dtype=np.float)
f = open('Yvals.npy', "r")
Y_in= np.fromfile(f,dtype=np.float)
for i in range(0,100):
    X[i]=X_in[i+10]
    Y[i]=Y_in[i+10]

for i in range(100):
    name = 'Steve_' + str(i+1).zfill(3)
    last_locations_error[0,i] = s[name]['position'][0][-1] - X[i]
    last_locations_error[1,i] = s[name]['position'][1][-1] - Y[i]
print "max error",abs(last_locations_error).max()
    </variable>
  </variables>
  <pass_tests>
    <test name="CorrectSingleLagrangianDetectors" language="python">
assert abs(last_single_locations_error).max() &lt; 1.0e-6
    </test>
    <test name="CorrectLagrangianTrajectory" language="python">
assert abs(last_locations_error).max() &lt; 1.0e-6
    </test>
  </pass_tests>
  <warn_tests>
  </warn_tests>
</testproblem>
