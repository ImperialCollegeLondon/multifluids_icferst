<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE testproblem SYSTEM "regressiontest.dtd">
<testproblem>
  <name>Burgers Equation MMS</name>
  <owner userid="pef"/>
  <tags>burgers adjoint</tags>
  <problem_definition length="medium" nprocs="1">
    <command_line>burgers_equation mms_A.bml; burgers_equation mms_B.bml; burgers_equation mms_C.bml; burgers_equation mms_D.bml; burgers_equation mms_E.bml</command_line>
  </problem_definition>
  <variables>
    <variable name="ab_error" language="python">
from fluidity_tools import stat_parser as stat
from math import log

a_error = stat("mms_diffusion_adjoint_A.stat")["Fluid"]["Error"]["l2norm"][-1]
b_error = stat("mms_diffusion_adjoint_B.stat")["Fluid"]["Error"]["l2norm"][-1]

a_error_inf = stat("mms_diffusion_adjoint_A.stat")["Fluid"]["Error"]["max"][-1]
b_error_inf = stat("mms_diffusion_adjoint_B.stat")["Fluid"]["Error"]["max"][-1]

ab_ratio = a_error / b_error
ab_ratio_inf = a_error_inf / b_error_inf
ab_error = [log(ab_ratio, 2)]
    </variable>
    <variable name="bc_error" language="python">
from fluidity_tools import stat_parser as stat
from math import log

b_error = stat("mms_diffusion_adjoint_B.stat")["Fluid"]["Error"]["l2norm"][-1]
c_error = stat("mms_diffusion_adjoint_C.stat")["Fluid"]["Error"]["l2norm"][-1]

b_error_inf = stat("mms_diffusion_adjoint_B.stat")["Fluid"]["Error"]["max"][-1]
c_error_inf = stat("mms_diffusion_adjoint_C.stat")["Fluid"]["Error"]["max"][-1]

bc_ratio = b_error / c_error
bc_ratio_inf = b_error_inf / c_error_inf
bc_error = [log(bc_ratio, 2)]
    </variable>
    <variable name="cd_error" language="python">
from fluidity_tools import stat_parser as stat
from math import log

c_error = stat("mms_diffusion_adjoint_C.stat")["Fluid"]["Error"]["l2norm"][-1]
d_error = stat("mms_diffusion_adjoint_D.stat")["Fluid"]["Error"]["l2norm"][-1]

c_error_inf = stat("mms_diffusion_adjoint_C.stat")["Fluid"]["Error"]["max"][-1]
d_error_inf = stat("mms_diffusion_adjoint_D.stat")["Fluid"]["Error"]["max"][-1]

cd_ratio = c_error / d_error
cd_ratio_inf = c_error_inf / d_error_inf
cd_error = [log(cd_ratio, 2)]
    </variable>
    <variable name="de_error" language="python">
from fluidity_tools import stat_parser as stat
from math import log

d_error = stat("mms_diffusion_adjoint_D.stat")["Fluid"]["Error"]["l2norm"][-1]
e_error = stat("mms_diffusion_adjoint_E.stat")["Fluid"]["Error"]["l2norm"][-1]

d_error_inf = stat("mms_diffusion_adjoint_D.stat")["Fluid"]["Error"]["max"][-1]
e_error_inf = stat("mms_diffusion_adjoint_E.stat")["Fluid"]["Error"]["max"][-1]

de_ratio = d_error / e_error
de_ratio_inf = d_error_inf / e_error_inf
de_error = [log(de_ratio, 2)]
    </variable>
    <variable name="ab_func_error" language="python">
truth = -2.00098747251
from fluidity_tools import stat_parser as stat
from math import log

a_func = stat("mms_diffusion_adjoint_A.stat")["time_integral_ad"]["value"][-1]
b_func = stat("mms_diffusion_adjoint_B.stat")["time_integral_ad"]["value"][-1]

a_error = abs(truth - a_func)
b_error = abs(truth - b_func)

ab_func_error = log(a_error/b_error, 2)
    </variable>
    <variable name="bc_func_error" language="python">
truth = -2.00098747251
from fluidity_tools import stat_parser as stat
from math import log

b_func = stat("mms_diffusion_adjoint_B.stat")["time_integral_ad"]["value"][-1]
c_func = stat("mms_diffusion_adjoint_C.stat")["time_integral_ad"]["value"][-1]

b_error = abs(truth - b_func)
c_error = abs(truth - c_func)

bc_func_error = log(b_error/c_error, 2)
    </variable>
    <variable name="cd_func_error" language="python">
truth = -2.00098747251
from fluidity_tools import stat_parser as stat
from math import log

c_func = stat("mms_diffusion_adjoint_C.stat")["time_integral_ad"]["value"][-1]
d_func = stat("mms_diffusion_adjoint_D.stat")["time_integral_ad"]["value"][-1]

c_error = abs(truth - c_func)
d_error = abs(truth - d_func)

cd_func_error = log(c_error/d_error, 2)
    </variable>
    <variable name="de_func_error" language="python">
truth = -2.00098747251
from fluidity_tools import stat_parser as stat
from math import log

d_func = stat("mms_diffusion_adjoint_D.stat")["time_integral_ad"]["value"][-1]
e_func = stat("mms_diffusion_adjoint_E.stat")["time_integral_ad"]["value"][-1]

d_error = abs(truth - d_func)
e_error = abs(truth - e_func)

de_func_error = log(d_error/e_error, 2)
    </variable>
    <variable name="functional_difference_a" language="python">
from fluidity_tools import stat_parser as stat

ad_value = stat("mms_diffusion_adjoint_A_adjoint_time_integral_ad.stat")["Fluid"]["AdjointVelocity"]["l2norm"][-1]
hc_value = stat("mms_diffusion_adjoint_A_adjoint_time_integral_hc.stat")["Fluid"]["AdjointVelocity"]["l2norm"][-1]

functional_difference_a = abs(ad_value - hc_value)
    </variable>
    <variable name="functional_difference_b" language="python">
from fluidity_tools import stat_parser as stat

ad_value = stat("mms_diffusion_adjoint_B_adjoint_time_integral_ad.stat")["Fluid"]["AdjointVelocity"]["l2norm"][-1]
hc_value = stat("mms_diffusion_adjoint_B_adjoint_time_integral_hc.stat")["Fluid"]["AdjointVelocity"]["l2norm"][-1]

functional_difference_b = abs(ad_value - hc_value)
    </variable>
    <variable name="functional_difference_c" language="python">
from fluidity_tools import stat_parser as stat

ad_value = stat("mms_diffusion_adjoint_C_adjoint_time_integral_ad.stat")["Fluid"]["AdjointVelocity"]["l2norm"][-1]
hc_value = stat("mms_diffusion_adjoint_C_adjoint_time_integral_hc.stat")["Fluid"]["AdjointVelocity"]["l2norm"][-1]

functional_difference_c = abs(ad_value - hc_value)
    </variable>
    <variable name="functional_difference_d" language="python">
from fluidity_tools import stat_parser as stat

ad_value = stat("mms_diffusion_adjoint_D_adjoint_time_integral_ad.stat")["Fluid"]["AdjointVelocity"]["l2norm"][-1]
hc_value = stat("mms_diffusion_adjoint_D_adjoint_time_integral_hc.stat")["Fluid"]["AdjointVelocity"]["l2norm"][-1]

functional_difference_d = abs(ad_value - hc_value)
    </variable>
    <variable name="functional_difference_e" language="python">
from fluidity_tools import stat_parser as stat

ad_value = stat("mms_diffusion_adjoint_E_adjoint_time_integral_ad.stat")["Fluid"]["AdjointVelocity"]["l2norm"][-1]
hc_value = stat("mms_diffusion_adjoint_E_adjoint_time_integral_hc.stat")["Fluid"]["AdjointVelocity"]["l2norm"][-1]

functional_difference_e = abs(ad_value - hc_value)
    </variable>
  </variables>
  <pass_tests>
    <test name="ab_convergence_stat: L2 order > 1.8" language="python">
assert 1.8 &lt; ab_error[0]
    </test>
    <test name="bc_convergence_stat: L2 order > 1.8" language="python">
assert 1.8 &lt; bc_error[0]
    </test>
    <test name="cd_convergence_stat: L2 order > 1.8" language="python">
assert 1.8 &lt; cd_error[0]
    </test>
    <test name="de_convergence_stat: L2 order > 1.8" language="python">
assert 1.8 &lt; de_error[0]
    </test>
    <test name="ab_func_error: order in [1.8,2.2]" language="python">
assert(abs(ab_func_error-2.0) &lt; 0.2)
    </test>
    <test name="bc_func_error: order in [1.8,2.2]" language="python">
assert(abs(bc_func_error-2.0) &lt; 0.2)
    </test>
    <test name="cd_func_error: order in [1.8,2.2]" language="python">
assert(abs(cd_func_error-2.0) &lt; 0.2)
    </test>
    <test name="de_func_error: order in [1.8,2.2]" language="python">
assert(abs(de_func_error-2.0) &lt; 0.2)
    </test>
    <test name="functionals give the same adjoint: A" language="python">
assert functional_difference_a &lt; 1.0e-12
    </test>
    <test name="functionals give the same adjoint: B" language="python">
assert functional_difference_b &lt; 1.0e-12
    </test>
    <test name="functionals give the same adjoint: C" language="python">
assert functional_difference_c &lt; 1.0e-12
    </test>
    <test name="functionals give the same adjoint: D" language="python">
assert functional_difference_d &lt; 1.0e-12
#assert True
    </test>
    <test name="functionals give the same adjoint: E" language="python">
assert functional_difference_e &lt; 1.0e-12
#assert True
    </test>
  </pass_tests>
  <warn_tests>
  </warn_tests>
</testproblem>

