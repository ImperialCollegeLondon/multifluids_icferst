<?xml version="1.0" encoding="UTF-8" ?>

<testproblem>
   
  <name>bc_from_field</name>
  <owner userid="ctj10"/>
  <tags>flml</tags>
  
  <problem_definition length="short" nprocs="1">
    <command_line>make run</command_line>
    <!-- This tests Fluidity's capability of enforcing boundary conditions using values from another field -->
  </problem_definition>
  
  <variables>
    <variable name="time" language="python">
from fluidity_tools import stat_parser
s = stat_parser("bc_from_field.stat")
time=s["ElapsedTime"]["value"]
    </variable>
    
    <variable name="temperature" language="python">
import vtktools

file = vtktools.vtu('bc_from_field_5.vtu')
file.GetFieldNames()
temperature = file.GetScalarField('Temperature')
    </variable>
    
    <variable name="positions" language="python">
import vtktools

file = vtktools.vtu('bc_from_field_5.vtu')
file.GetFieldNames()
positions = file.GetLocations()
    </variable>
    
  </variables>
    
  <pass_tests>
    <test name="Final time is 0.05 seconds" language="python">
import fluidity_tools
fluidity_tools.compare_variable(abs(time[-1]), 0.05, 1.0e-14)
    </test>
    
    <test name="Temperature is assigned the correct boundary values " language="python">
import fluidity_tools
from math import sin

nnodes = len(temperature)
for i in range(nnodes):
   if( (positions[i][1] &gt; 0.99) or (positions[i][1] &lt; 0.01) or (positions[i][0] &lt; 0.01) or (positions[i][0] &gt; 0.99)):
      # If we have a boundary node, check it's value against sin(y) (i.e. the boundary value in src/boundary_data.vtu)
      fluidity_tools.compare_variable(temperature[i], sin(positions[i][1]), 1.0e-14)
   else:
      # The Temperature field should be 5.0 elsewhere.
      fluidity_tools.compare_variable(temperature[i], 5.0, 1.0e-14)
    </test>
  </pass_tests>
  
  <warn_tests>
  </warn_tests>
  
</testproblem>
