<?xml version='1.0' encoding='utf-8'?>
<fluidity_options>
  <simulation_name>
    <string_value lines="1">MMS_B</string_value>
  </simulation_name>
  <problem_type>
    <string_value lines="1">fluids</string_value>
  </problem_type>
  <geometry>
    <dimension>
      <integer_value rank="0">2</integer_value>
    </dimension>
    <mesh name="CoordinateMesh">
      <from_mesh>
        <mesh name="InputMesh"/>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <mesh name="VelocityMesh">
      <from_mesh>
        <mesh name="InputMesh"/>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <mesh name="PressureMesh">
      <from_mesh>
        <mesh name="InputMesh"/>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <mesh name="InputMesh">
      <from_file file_name="src/MMS_B">
        <format name="gmsh"/>
        <stat>
          <include_in_stat/>
        </stat>
      </from_file>
    </mesh>
    <quadrature>
      <degree>
        <integer_value rank="0">4</integer_value>
      </degree>
    </quadrature>
  </geometry>
  <io>
    <dump_format>
      <string_value>vtk</string_value>
    </dump_format>
    <dump_period>
      <constant>
        <real_value rank="0">250</real_value>
      </constant>
    </dump_period>
    <output_mesh name="VelocityMesh"/>
    <stat/>
  </io>
  <timestepping>
    <current_time>
      <real_value rank="0">0.0</real_value>
    </current_time>
    <timestep>
      <real_value rank="0">0.001</real_value>
    </timestep>
    <finish_time>
      <real_value rank="0">200</real_value>
    </finish_time>
    <nonlinear_iterations>
      <integer_value rank="0">1</integer_value>
    </nonlinear_iterations>
    <adaptive_timestep>
      <requested_cfl>
        <real_value rank="0">0.01</real_value>
      </requested_cfl>
      <courant_number name="CFLNumber">
        <mesh name="VelocityMesh"/>
      </courant_number>
      <at_first_timestep/>
    </adaptive_timestep>
    <steady_state>
      <tolerance>
        <real_value rank="0">1.e-3</real_value>
        <infinity_norm/>
      </tolerance>
    </steady_state>
  </timestepping>
  <physical_parameters>
    <gravity>
      <magnitude>
        <real_value rank="0">1.0</real_value>
      </magnitude>
      <vector_field name="GravityDirection" rank="1">
        <prescribed>
          <mesh name="CoordinateMesh"/>
          <value name="WholeMesh">
            <constant>
              <real_value shape="2" dim1="dim" rank="1">0 -1</real_value>
            </constant>
          </value>
          <output/>
          <stat>
            <include_in_stat/>
          </stat>
          <detectors>
            <exclude_from_detectors/>
          </detectors>
        </prescribed>
      </vector_field>
    </gravity>
  </physical_parameters>
  <material_phase name="NS">
    <equation_of_state>
      <fluids>
        <linear>
          <reference_density>
            <real_value rank="0">1.0</real_value>
          </reference_density>
          <temperature_dependency>
            <reference_temperature>
              <real_value rank="0">0.0</real_value>
            </reference_temperature>
            <thermal_expansion_coefficient>
              <real_value rank="0">-1.0</real_value>
            </thermal_expansion_coefficient>
          </temperature_dependency>
          <subtract_out_hydrostatic_level/>
        </linear>
      </fluids>
    </equation_of_state>
    <subgridscale_parameterisations>
      <k-epsilon>
        <scalar_field name="TurbulentKineticEnergy" rank="0">
          <prognostic>
            <mesh name="VelocityMesh"/>
            <equation name="AdvectionDiffusion"/>
            <spatial_discretisation>
              <control_volumes>
                <face_value name="FiniteElement">
                  <limit_face_value>
                    <limiter name="Sweby"/>
                  </limit_face_value>
                </face_value>
                <diffusion_scheme name="ElementGradient"/>
              </control_volumes>
              <conservative_advection>
                <real_value rank="0">0</real_value>
              </conservative_advection>
            </spatial_discretisation>
            <temporal_discretisation>
              <theta>
                <real_value rank="0">1.0</real_value>
              </theta>
            </temporal_discretisation>
            <solver>
              <iterative_method name="gmres">
                <restart>
                  <integer_value rank="0">30</integer_value>
                </restart>
              </iterative_method>
              <preconditioner name="sor"/>
              <relative_error>
                <real_value rank="0">1.e-8</real_value>
              </relative_error>
              <max_iterations>
                <integer_value rank="0">10000</integer_value>
              </max_iterations>
              <never_ignore_solver_failures/>
              <diagnostics>
                <monitors/>
              </diagnostics>
            </solver>
            <initial_condition name="WholeMesh">
              <constant>
                <real_value rank="0">1.0</real_value>
              </constant>
            </initial_condition>
            <boundary_conditions name="all_sides">
              <surface_ids>
                <integer_value shape="4" rank="1">7 8 9 10</integer_value>
              </surface_ids>
              <type name="dirichlet">
                <python>
                  <string_value lines="20" type="code" language="python">def val(X,t):
        import k_epsilon_tools as k
        tke=k.tke(X)
        return tke</string_value>
                </python>
              </type>
            </boundary_conditions>
            <tensor_field name="Diffusivity" rank="2">
              <diagnostic>
                <algorithm name="Internal" material_phase_support="multiple"/>
                <output/>
                <stat>
                  <exclude_from_stat/>
                </stat>
              </diagnostic>
            </tensor_field>
            <scalar_field name="Source" rank="0">
              <prescribed>
                <value name="WholeMesh">
                  <python>
                    <string_value lines="20" type="code" language="python">def val(X,t):
        import k_epsilon_tools as k
        return k.forcing_k(X)</string_value>
                  </python>
                </value>
                <output/>
                <stat/>
                <detectors>
                  <exclude_from_detectors/>
                </detectors>
              </prescribed>
            </scalar_field>
            <scalar_field name="Absorption" rank="0">
              <diagnostic>
                <algorithm name="Internal" material_phase_support="multiple"/>
                <output/>
                <stat/>
                <detectors>
                  <include_in_detectors/>
                </detectors>
              </diagnostic>
            </scalar_field>
            <output>
              <include_previous_time_step/>
            </output>
            <stat/>
            <convergence>
              <include_in_convergence/>
            </convergence>
            <detectors>
              <include_in_detectors/>
            </detectors>
            <steady_state>
              <exclude_from_steady_state/>
            </steady_state>
            <consistent_interpolation/>
          </prognostic>
        </scalar_field>
        <scalar_field name="TurbulentDissipation" rank="0">
          <prognostic>
            <mesh name="VelocityMesh"/>
            <equation name="AdvectionDiffusion"/>
            <spatial_discretisation>
              <control_volumes>
                <face_value name="FiniteElement">
                  <limit_face_value>
                    <limiter name="Sweby"/>
                  </limit_face_value>
                </face_value>
                <diffusion_scheme name="ElementGradient"/>
              </control_volumes>
              <conservative_advection>
                <real_value rank="0">0</real_value>
              </conservative_advection>
            </spatial_discretisation>
            <temporal_discretisation>
              <theta>
                <real_value rank="0">1.0</real_value>
              </theta>
            </temporal_discretisation>
            <solver>
              <iterative_method name="gmres">
                <restart>
                  <integer_value rank="0">30</integer_value>
                </restart>
              </iterative_method>
              <preconditioner name="sor"/>
              <relative_error>
                <real_value rank="0">1.e-8</real_value>
              </relative_error>
              <max_iterations>
                <integer_value rank="0">10000</integer_value>
              </max_iterations>
              <never_ignore_solver_failures/>
              <diagnostics>
                <monitors/>
              </diagnostics>
            </solver>
            <initial_condition name="WholeMesh">
              <constant>
                <real_value rank="0">1.0</real_value>
              </constant>
            </initial_condition>
            <boundary_conditions name="all_sides">
              <surface_ids>
                <integer_value shape="4" rank="1">7 8 9 10</integer_value>
              </surface_ids>
              <type name="dirichlet">
                <python>
                  <string_value lines="20" type="code" language="python">def val(X,t):
        import k_epsilon_tools as k
        eps=k.eps(X)
        return eps</string_value>
                </python>
              </type>
            </boundary_conditions>
            <tensor_field name="Diffusivity" rank="2">
              <diagnostic>
                <algorithm name="Internal" material_phase_support="multiple"/>
                <output/>
                <stat>
                  <exclude_from_stat/>
                </stat>
              </diagnostic>
            </tensor_field>
            <scalar_field name="Source" rank="0">
              <prescribed>
                <value name="WholeMesh">
                  <python>
                    <string_value lines="20" type="code" language="python">def val(X,t):
        import k_epsilon_tools as k
        return k.forcing_eps(X)</string_value>
                  </python>
                </value>
                <output/>
                <stat/>
                <detectors>
                  <exclude_from_detectors/>
                </detectors>
              </prescribed>
            </scalar_field>
            <scalar_field name="Absorption" rank="0">
              <diagnostic>
                <algorithm name="Internal" material_phase_support="multiple"/>
                <output/>
                <stat/>
                <detectors>
                  <include_in_detectors/>
                </detectors>
              </diagnostic>
            </scalar_field>
            <output>
              <include_previous_time_step/>
            </output>
            <stat/>
            <convergence>
              <include_in_convergence/>
            </convergence>
            <detectors>
              <include_in_detectors/>
            </detectors>
            <steady_state>
              <exclude_from_steady_state/>
            </steady_state>
            <consistent_interpolation/>
          </prognostic>
        </scalar_field>
        <tensor_field name="BackgroundViscosity" rank="2">
          <prescribed>
            <mesh name="VelocityMesh"/>
            <value name="WholeMesh">
              <isotropic>
                <constant>
                  <real_value rank="0">1.0</real_value>
                </constant>
              </isotropic>
            </value>
            <output>
              <exclude_from_vtu/>
            </output>
          </prescribed>
        </tensor_field>
        <tensor_field name="BackgroundDiffusivity" rank="2">
          <prescribed>
            <mesh name="VelocityMesh"/>
            <value name="WholeMesh">
              <isotropic>
                <constant>
                  <real_value rank="0">0.0</real_value>
                </constant>
              </isotropic>
            </value>
            <output/>
          </prescribed>
        </tensor_field>
        <tensor_field name="EddyViscosity" rank="2">
          <diagnostic>
            <algorithm name="Internal" material_phase_support="multiple"/>
            <mesh name="VelocityMesh"/>
            <output>
              <exclude_from_vtu/>
            </output>
            <stat>
              <exclude_from_stat/>
            </stat>
          </diagnostic>
        </tensor_field>
        <scalar_field name="ScalarEddyViscosity" rank="0">
          <diagnostic>
            <algorithm name="Internal" material_phase_support="multiple"/>
            <mesh name="VelocityMesh"/>
            <output/>
            <stat/>
            <convergence>
              <include_in_convergence/>
            </convergence>
            <detectors>
              <include_in_detectors/>
            </detectors>
            <steady_state>
              <exclude_from_steady_state/>
            </steady_state>
          </diagnostic>
        </scalar_field>
        <scalar_field name="LengthScale" rank="0">
          <diagnostic>
            <algorithm name="Internal" material_phase_support="multiple"/>
            <mesh name="VelocityMesh"/>
            <output/>
            <stat/>
            <convergence>
              <include_in_convergence/>
            </convergence>
            <detectors>
              <include_in_detectors/>
            </detectors>
            <steady_state>
              <exclude_from_steady_state/>
            </steady_state>
          </diagnostic>
        </scalar_field>
        <scalar_field name="f_1" rank="0">
          <diagnostic>
            <algorithm name="Internal" material_phase_support="multiple"/>
            <mesh name="VelocityMesh"/>
            <output/>
            <stat/>
            <convergence>
              <include_in_convergence/>
            </convergence>
            <detectors>
              <include_in_detectors/>
            </detectors>
            <steady_state>
              <exclude_from_steady_state/>
            </steady_state>
          </diagnostic>
        </scalar_field>
        <scalar_field name="f_2" rank="0">
          <diagnostic>
            <algorithm name="Internal" material_phase_support="multiple"/>
            <mesh name="VelocityMesh"/>
            <output/>
            <stat/>
            <convergence>
              <include_in_convergence/>
            </convergence>
            <detectors>
              <include_in_detectors/>
            </detectors>
            <steady_state>
              <exclude_from_steady_state/>
            </steady_state>
          </diagnostic>
        </scalar_field>
        <scalar_field name="f_mu" rank="0">
          <diagnostic>
            <algorithm name="Internal" material_phase_support="multiple"/>
            <mesh name="VelocityMesh"/>
            <output/>
            <stat/>
            <convergence>
              <include_in_convergence/>
            </convergence>
            <detectors>
              <include_in_detectors/>
            </detectors>
            <steady_state>
              <exclude_from_steady_state/>
            </steady_state>
          </diagnostic>
        </scalar_field>
        <max_damping_value>
          <real_value rank="0">10.0</real_value>
        </max_damping_value>
        <lengthscale_limit>
          <real_value rank="0">3</real_value>
        </lengthscale_limit>
        <C_mu>
          <real_value rank="0">1</real_value>
        </C_mu>
        <C_eps_1>
          <real_value rank="0">1</real_value>
        </C_eps_1>
        <C_eps_2>
          <real_value rank="0">1</real_value>
        </C_eps_2>
        <sigma_k>
          <real_value rank="0">1</real_value>
        </sigma_k>
        <sigma_eps>
          <real_value rank="0">1</real_value>
        </sigma_eps>
        <implicit_source/>
        <implicit_buoyancy/>
        <debugging_fields>
          <scalar_field name="TurbulentKineticEnergyProduction" rank="0">
            <diagnostic>
              <algorithm name="Internal" material_phase_support="multiple"/>
              <mesh name="VelocityMesh"/>
              <output/>
              <stat/>
              <convergence>
                <include_in_convergence/>
              </convergence>
              <detectors>
                <include_in_detectors/>
              </detectors>
              <steady_state>
                <include_in_steady_state/>
              </steady_state>
            </diagnostic>
          </scalar_field>
          <scalar_field name="TurbulentKineticEnergyBuoyancyTerm" rank="0">
            <diagnostic>
              <algorithm name="Internal" material_phase_support="multiple"/>
              <mesh name="VelocityMesh"/>
              <output/>
              <stat/>
              <convergence>
                <include_in_convergence/>
              </convergence>
              <detectors>
                <include_in_detectors/>
              </detectors>
              <steady_state>
                <include_in_steady_state/>
              </steady_state>
            </diagnostic>
          </scalar_field>
          <scalar_field name="TurbulentKineticEnergyDestruction" rank="0">
            <diagnostic>
              <algorithm name="Internal" material_phase_support="multiple"/>
              <mesh name="VelocityMesh"/>
              <output/>
              <stat/>
              <convergence>
                <include_in_convergence/>
              </convergence>
              <detectors>
                <include_in_detectors/>
              </detectors>
              <steady_state>
                <include_in_steady_state/>
              </steady_state>
            </diagnostic>
          </scalar_field>
          <scalar_field name="TurbulentDissipationProduction" rank="0">
            <diagnostic>
              <algorithm name="Internal" material_phase_support="multiple"/>
              <mesh name="VelocityMesh"/>
              <output/>
              <stat/>
              <convergence>
                <include_in_convergence/>
              </convergence>
              <detectors>
                <include_in_detectors/>
              </detectors>
              <steady_state>
                <include_in_steady_state/>
              </steady_state>
            </diagnostic>
          </scalar_field>
          <scalar_field name="TurbulentDissipationBuoyancyTerm" rank="0">
            <diagnostic>
              <algorithm name="Internal" material_phase_support="multiple"/>
              <mesh name="VelocityMesh"/>
              <output/>
              <stat/>
              <convergence>
                <include_in_convergence/>
              </convergence>
              <detectors>
                <include_in_detectors/>
              </detectors>
              <steady_state>
                <include_in_steady_state/>
              </steady_state>
            </diagnostic>
          </scalar_field>
          <scalar_field name="TurbulentDissipationDestruction" rank="0">
            <diagnostic>
              <algorithm name="Internal" material_phase_support="multiple"/>
              <mesh name="VelocityMesh"/>
              <output/>
              <stat/>
              <convergence>
                <include_in_convergence/>
              </convergence>
              <detectors>
                <include_in_detectors/>
              </detectors>
              <steady_state>
                <include_in_steady_state/>
              </steady_state>
            </diagnostic>
          </scalar_field>
        </debugging_fields>
      </k-epsilon>
    </subgridscale_parameterisations>
    <scalar_field name="Pressure" rank="0">
      <prognostic>
        <mesh name="PressureMesh"/>
        <spatial_discretisation>
          <continuous_galerkin/>
        </spatial_discretisation>
        <reference_node>
          <integer_value rank="0">1</integer_value>
        </reference_node>
        <scheme>
          <poisson_pressure_solution>
            <string_value lines="1">never</string_value>
          </poisson_pressure_solution>
          <use_projection_method/>
        </scheme>
        <solver>
          <iterative_method name="cg"/>
          <preconditioner name="sor"/>
          <relative_error>
            <real_value rank="0">1.e-8</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">10000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <constant>
            <real_value rank="0">0.0</real_value>
          </constant>
        </initial_condition>
        <output>
          <include_previous_time_step/>
        </output>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <steady_state>
          <exclude_from_steady_state/>
        </steady_state>
        <no_interpolation/>
      </prognostic>
    </scalar_field>
    <scalar_field name="Density" rank="0">
      <diagnostic>
        <algorithm name="Internal" material_phase_support="multiple"/>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <vector_field name="Velocity" rank="1">
      <prognostic>
        <mesh name="VelocityMesh"/>
        <equation name="Boussinesq"/>
        <spatial_discretisation>
          <continuous_galerkin>
            <stabilisation>
              <no_stabilisation/>
            </stabilisation>
            <mass_terms>
              <lump_mass_matrix/>
            </mass_terms>
            <advection_terms/>
            <stress_terms>
              <tensor_form/>
            </stress_terms>
          </continuous_galerkin>
          <conservative_advection>
            <real_value rank="0">0.0</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">1.0</real_value>
          </theta>
          <relaxation>
            <real_value rank="0">1.0</real_value>
          </relaxation>
        </temporal_discretisation>
        <solver>
          <iterative_method name="gmres">
            <restart>
              <integer_value rank="0">30</integer_value>
            </restart>
          </iterative_method>
          <preconditioner name="sor"/>
          <relative_error>
            <real_value rank="0">1.e-7</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">10000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <constant>
            <real_value shape="2" dim1="dim" rank="1">0.0 0.0</real_value>
          </constant>
        </initial_condition>
        <boundary_conditions name="all_sides">
          <surface_ids>
            <integer_value shape="4" rank="1">7 8 9 10</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <align_bc_with_cartesian>
              <x_component>
                <python>
                  <string_value lines="20" type="code" language="python">def val(X,t):
   import k_epsilon_tools as k
   # Shear rotation about origin.
   return k.velocity(X)[0]</string_value>
                </python>
              </x_component>
              <y_component>
                <python>
                  <string_value lines="20" type="code" language="python">def val(X,t):
   import k_epsilon_tools as k
   # Shear rotation about origin.
   return k.velocity(X)[1]</string_value>
                </python>
              </y_component>
            </align_bc_with_cartesian>
          </type>
        </boundary_conditions>
        <tensor_field name="Viscosity" rank="2">
          <diagnostic>
            <algorithm name="Internal" material_phase_support="multiple"/>
            <output/>
            <stat>
              <include_in_stat/>
            </stat>
          </diagnostic>
        </tensor_field>
        <vector_field name="Source" rank="1">
          <prescribed>
            <value name="WholeMesh">
              <python>
                <string_value lines="20" type="code" language="python">def val(X,t):
   import k_epsilon_tools as k
   return k.forcing_mom(X)</string_value>
              </python>
            </value>
            <output/>
            <stat>
              <include_in_stat/>
            </stat>
            <detectors>
              <exclude_from_detectors/>
            </detectors>
          </prescribed>
        </vector_field>
        <output>
          <include_previous_time_step/>
        </output>
        <stat>
          <include_in_stat/>
          <previous_time_step>
            <exclude_from_stat/>
          </previous_time_step>
          <nonlinear_field>
            <exclude_from_stat/>
          </nonlinear_field>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <exclude_from_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </prognostic>
    </vector_field>
    <scalar_field name="CFLNumber" rank="0">
      <diagnostic>
        <algorithm name="Internal" material_phase_support="multiple"/>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <exclude_from_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field name="Pressure_Analytical" rank="0">
      <prescribed>
        <mesh name="PressureMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value lines="20" type="code" language="python">def val(X,t):
        import k_epsilon_tools as k
        return k.pressure(X)</string_value>
          </python>
        </value>
        <output/>
        <stat/>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
      </prescribed>
    </scalar_field>
    <scalar_field name="Pressure_Difference" rank="0">
      <diagnostic>
        <algorithm source_field_2_type="scalar" name="scalar_difference" source_field_1_name="Pressure_Analytical" source_field_2_name="Pressure" material_phase_support="single" source_field_1_type="scalar"/>
        <mesh name="PressureMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field name="TurbulentKineticEnergy_Analytical" rank="0">
      <prescribed>
        <mesh name="VelocityMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value lines="20" type="code" language="python">def val(X,t):
        import k_epsilon_tools as k
        tke=k.tke(X)
        return tke</string_value>
          </python>
        </value>
        <output/>
        <stat/>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
      </prescribed>
    </scalar_field>
    <scalar_field name="TurbulentKineticEnergy_Difference" rank="0">
      <diagnostic>
        <algorithm name="scalar_python_diagnostic" material_phase_support="single">
          <string_value lines="20" type="code" language="python">E=state.scalar_fields["TurbulentKineticEnergy"]
S=state.scalar_fields["TurbulentKineticEnergy_Analytical"]

for n in range(field.node_count):
	E_n=E.node_val(n)
	S_n=S.node_val(n)
	field.set(n,E_n-S_n)</string_value>
        </algorithm>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field name="TurbulentDissipation_Analytical" rank="0">
      <prescribed>
        <mesh name="VelocityMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value lines="20" type="code" language="python">def val(X,t):
        import k_epsilon_tools as k
        eps=k.eps(X)
        return eps</string_value>
          </python>
        </value>
        <output/>
        <stat/>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
      </prescribed>
    </scalar_field>
    <scalar_field name="TurbulentDissipation_Difference" rank="0">
      <diagnostic>
        <algorithm name="scalar_python_diagnostic" material_phase_support="single">
          <string_value lines="20" type="code" language="python">E=state.scalar_fields["TurbulentDissipation"]
S=state.scalar_fields["TurbulentDissipation_Analytical"]

for n in range(field.node_count):
	E_n=E.node_val(n)
	S_n=S.node_val(n)
	field.set(n,E_n-S_n)</string_value>
        </algorithm>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field name="Temperature" rank="0">
      <prognostic>
        <mesh name="VelocityMesh"/>
        <equation name="AdvectionDiffusion"/>
        <spatial_discretisation>
          <control_volumes>
            <face_value name="FiniteElement">
              <limit_face_value>
                <limiter name="Sweby"/>
              </limit_face_value>
            </face_value>
            <diffusion_scheme name="ElementGradient"/>
          </control_volumes>
          <conservative_advection>
            <real_value rank="0">0</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">1.0</real_value>
          </theta>
        </temporal_discretisation>
        <solver>
          <iterative_method name="gmres">
            <restart>
              <integer_value rank="0">30</integer_value>
            </restart>
          </iterative_method>
          <preconditioner name="sor"/>
          <relative_error>
            <real_value rank="0">1.e-8</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">10000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <python>
            <string_value lines="20" type="code" language="python">def val(X,t):
        import k_epsilon_tools as k
        rho_p=k.rho_p(X)
        return rho_p</string_value>
          </python>
        </initial_condition>
        <boundary_conditions name="all_sides">
          <surface_ids>
            <integer_value shape="4" rank="1">7 8 9 10</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <python>
              <string_value lines="20" type="code" language="python">def val(X,t):
        import k_epsilon_tools as k
        rho_p=k.rho_p(X)
        return rho_p</string_value>
            </python>
          </type>
        </boundary_conditions>
        <subgridscale_parameterisation name="k-epsilon">
          <prandtl_schmidt_number>
            <real_value rank="0">1.0</real_value>
          </prandtl_schmidt_number>
          <buoyancy_effects>
            <beta>
              <real_value rank="0">1.0</real_value>
            </beta>
          </buoyancy_effects>
        </subgridscale_parameterisation>
        <tensor_field name="Diffusivity" rank="2">
          <diagnostic>
            <algorithm name="k_epsilon_diffusivity" material_phase_support="single"/>
            <output/>
            <stat>
              <include_in_stat/>
            </stat>
          </diagnostic>
        </tensor_field>
        <scalar_field name="Source" rank="0">
          <prescribed>
            <value name="WholeMesh">
              <python>
                <string_value lines="20" type="code" language="python">def val(X,t):
        import k_epsilon_tools as k
        return k.forcing_density(X)</string_value>
              </python>
            </value>
            <output/>
            <stat/>
            <detectors>
              <exclude_from_detectors/>
            </detectors>
          </prescribed>
        </scalar_field>
        <output>
          <include_previous_time_step/>
        </output>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <exclude_from_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </prognostic>
    </scalar_field>
    <scalar_field name="Temperature_Analytical" rank="0">
      <prescribed>
        <mesh name="VelocityMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value lines="20" type="code" language="python">def val(X,t):
        import k_epsilon_tools as k
        rho_p=k.rho_p(X)
        return rho_p</string_value>
          </python>
        </value>
        <output/>
        <stat/>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
      </prescribed>
    </scalar_field>
    <scalar_field name="Temperature_Difference" rank="0">
      <diagnostic>
        <algorithm source_field_2_type="scalar" name="scalar_difference" source_field_1_name="Temperature" source_field_2_name="Temperature_Analytical" material_phase_support="single" source_field_1_type="scalar"/>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field name="TurbulentKineticEnergyProduction_Analytical" rank="0">
      <prescribed>
        <mesh name="VelocityMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value lines="20" type="code" language="python">def val(X, t):
  from math import sin, cos

  x = X[0]; y = X[1]
  return 0.0400000000000000*(y + 1.00000000000000)*cos(x)**2*cos(y)**2</string_value>
          </python>
        </value>
        <output/>
        <stat/>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
      </prescribed>
    </scalar_field>
    <scalar_field name="TurbulentKineticEnergyBuoyancyTerm_Analytical" rank="0">
      <prescribed>
        <mesh name="VelocityMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value lines="20" type="code" language="python">def val(X, t):
  from math import sin, cos, tanh
  x = X[0]; y = X[1]
#  if sin(x)*cos(y) == 0:
#    Ce3 = 1.0
#  else:
#    Ce3 = tanh(abs(-sin(y)*cos(x))/abs((sin(x)*cos(y))))
  return (-0.100000000000000*(y + 1.00000000000000)*sin(y)*cos(x))</string_value>
          </python>
        </value>
        <output/>
        <stat/>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
      </prescribed>
    </scalar_field>
    <scalar_field name="TurbulentKineticEnergyDestruction_Analytical" rank="0">
      <prescribed>
        <mesh name="VelocityMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value lines="20" type="code" language="python">def val(X, t):
  x = X[0]; y = X[1]
  return 1.0</string_value>
          </python>
        </value>
        <output/>
        <stat/>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
      </prescribed>
    </scalar_field>
    <scalar_field name="TurbulentKineticEnergyProduction_Difference" rank="0">
      <diagnostic>
        <algorithm name="scalar_python_diagnostic" material_phase_support="single">
          <string_value lines="20" type="code" language="python">E=state.scalar_fields["TurbulentKineticEnergyProduction"]
S=state.scalar_fields["TurbulentKineticEnergyProduction_Analytical"]

for n in range(field.node_count):
	E_n=E.node_val(n)
	S_n=S.node_val(n)
	field.set(n,E_n-S_n)</string_value>
        </algorithm>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field name="TurbulentKineticEnergyBuoyancyTerm_Difference" rank="0">
      <diagnostic>
        <algorithm name="scalar_python_diagnostic" material_phase_support="single">
          <string_value lines="20" type="code" language="python">E=state.scalar_fields["TurbulentKineticEnergyBuoyancyTerm"]
S=state.scalar_fields["TurbulentKineticEnergyBuoyancyTerm_Analytical"]

for n in range(field.node_count):
	E_n=E.node_val(n)
	S_n=S.node_val(n)
	field.set(n,E_n-S_n)</string_value>
        </algorithm>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field name="TurbulentKineticEnergyDestruction_Difference" rank="0">
      <diagnostic>
        <algorithm name="scalar_python_diagnostic" material_phase_support="single">
          <string_value lines="20" type="code" language="python">E=state.scalar_fields["TurbulentKineticEnergyDestruction"]
S=state.scalar_fields["TurbulentKineticEnergyDestruction_Analytical"]

for n in range(field.node_count):
	E_n=E.node_val(n)
	S_n=S.node_val(n)
	field.set(n,E_n-S_n)</string_value>
        </algorithm>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field name="TurbulentDissipationProduction_Analytical" rank="0">
      <prescribed>
        <mesh name="VelocityMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value lines="20" type="code" language="python">def val(X, t):
  from math import sin, cos

  x = X[0]; y = X[1]
  return (0.0400000000000000*(y + 1.00000000000000)*cos(x)**2*cos(y)**2)</string_value>
          </python>
        </value>
        <output/>
        <stat/>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
      </prescribed>
    </scalar_field>
    <scalar_field name="TurbulentDissipationBuoyancyTerm_Analytical" rank="0">
      <prescribed>
        <mesh name="VelocityMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value lines="20" type="code" language="python">def val(X, t):
  from math import sin, cos, tanh
  x = X[0]; y = X[1]
  if sin(x)*cos(y) == 0:
    Ce3 = 1.0
  else:
    Ce3 = tanh(abs(-sin(y)*cos(x))/abs((sin(x)*cos(y))))
  return Ce3*(-0.100000000000000*(y + 1.00000000000000)*sin(y)*cos(x))</string_value>
          </python>
        </value>
        <output/>
        <stat/>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
      </prescribed>
    </scalar_field>
    <scalar_field name="TurbulentDissipationDestruction_Analytical" rank="0">
      <prescribed>
        <mesh name="VelocityMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value lines="20" type="code" language="python">def val(X, t):
  x = X[0]; y = X[1]
  return 1.0</string_value>
          </python>
        </value>
        <output/>
        <stat/>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
      </prescribed>
    </scalar_field>
    <scalar_field name="TurbulentDissipationProduction_Difference" rank="0">
      <diagnostic>
        <algorithm name="scalar_python_diagnostic" material_phase_support="single">
          <string_value lines="20" type="code" language="python">E=state.scalar_fields["TurbulentDissipationProduction"]
S=state.scalar_fields["TurbulentDissipationProduction_Analytical"]

for n in range(field.node_count):
	E_n=E.node_val(n)
	S_n=S.node_val(n)
	field.set(n,E_n-S_n)</string_value>
        </algorithm>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field name="TurbulentDissipationBuoyancyTerm_Difference" rank="0">
      <diagnostic>
        <algorithm name="scalar_python_diagnostic" material_phase_support="single">
          <string_value lines="20" type="code" language="python">E=state.scalar_fields["TurbulentDissipationBuoyancyTerm"]
S=state.scalar_fields["TurbulentDissipationBuoyancyTerm_Analytical"]

for n in range(field.node_count):
	E_n=E.node_val(n)
	S_n=S.node_val(n)
	field.set(n,E_n-S_n)</string_value>
        </algorithm>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field name="TurbulentDissipationDestruction_Difference" rank="0">
      <diagnostic>
        <algorithm name="scalar_python_diagnostic" material_phase_support="single">
          <string_value lines="20" type="code" language="python">E=state.scalar_fields["TurbulentDissipationDestruction"]
S=state.scalar_fields["TurbulentDissipationDestruction_Analytical"]

for n in range(field.node_count):
	E_n=E.node_val(n)
	S_n=S.node_val(n)
	field.set(n,E_n-S_n)</string_value>
        </algorithm>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <vector_field name="Velocity_Analytical" rank="1">
      <prescribed>
        <mesh name="VelocityMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value lines="20" type="code" language="python">def val(X,t):
        import k_epsilon_tools as k
        return k.velocity(X)</string_value>
          </python>
        </value>
        <output/>
        <stat>
          <include_in_stat/>
        </stat>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
      </prescribed>
    </vector_field>
    <vector_field name="Velocity_Difference" rank="1">
      <diagnostic>
        <algorithm source_field_2_type="vector" name="vector_difference" source_field_1_name="Velocity" source_field_2_name="Velocity_Analytical" material_phase_support="single" source_field_1_type="vector"/>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat>
          <include_in_stat/>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </vector_field>
  </material_phase>
</fluidity_options>
