<?xml version="1.0" encoding="UTF-8" ?>
<testproblem>
  <name>p1p1 k-epsilon spatial convergence test</name>
  <owner userid="jbull"/>
  <tags>flml</tags>
  <problem_definition length="medium" nprocs="1">
    <command_line>fluidity -v2 -l MMS_A.flml &amp;&amp; fluidity MMS_B.flml &amp;&amp; fluidity MMS_C.flml &amp;&amp; fluidity MMS_D.flml </command_line>
  </problem_definition>
  <variables>
    <variable name="solvers_converged" language="python">
import os
files = os.listdir("./")
solvers_converged = not "matrixdump" in files and not "matrixdump.info" in files
    </variable>
    <variable name="ab_convergence_vel" language="python">
from fluidity_tools import stat_parser as stat
from math import log
output=open('output.log','w')

a_error_x = stat("MMS_A.stat")["NS"]["VelocityDifference%1"]["l2norm"][-1]
b_error_x = stat("MMS_B.stat")["NS"]["VelocityDifference%1"]["l2norm"][-1]
a_error_y = stat("MMS_A.stat")["NS"]["VelocityDifference%2"]["l2norm"][-1]
b_error_y = stat("MMS_B.stat")["NS"]["VelocityDifference%2"]["l2norm"][-1]

a_error_inf_x = stat("MMS_A.stat")["NS"]["VelocityDifference%1"]["max"][-1]
b_error_inf_x = stat("MMS_B.stat")["NS"]["VelocityDifference%1"]["max"][-1]
a_error_inf_y = stat("MMS_A.stat")["NS"]["VelocityDifference%2"]["max"][-1]
b_error_inf_y = stat("MMS_B.stat")["NS"]["VelocityDifference%2"]["max"][-1]

ab_ratio_x = a_error_x / b_error_x
ab_ratio_y = a_error_y / b_error_y
ab_ratio_inf_x = a_error_inf_x / b_error_inf_x
ab_ratio_inf_y = a_error_inf_y / b_error_inf_y

output.write('ab_convergence_vel '+str(log(ab_ratio_x, 2))+' '+str(log(ab_ratio_inf_x, 2))+' '+str(log(ab_ratio_y, 2))+' '+str(log(ab_ratio_inf_y, 2))+'\n')
output.close()

ab_convergence_vel = [[log(ab_ratio_x, 2), log(ab_ratio_inf_x, 2)], [log(ab_ratio_y, 2), log(ab_ratio_inf_y, 2)]]
    </variable>
    <variable name="ab_convergence_p" language="python">
from fluidity_tools import stat_parser as stat
from math import log
output=open('output.log','a')

a_error = stat("MMS_A.stat")["NS"]["PressureDifference"]["l2norm"][-1]
b_error = stat("MMS_B.stat")["NS"]["PressureDifference"]["l2norm"][-1]

a_error_inf = stat("MMS_A.stat")["NS"]["PressureDifference"]["max"][-1]
b_error_inf = stat("MMS_B.stat")["NS"]["PressureDifference"]["max"][-1]

ab_ratio = a_error / b_error
ab_ratio_inf = a_error_inf / b_error_inf

output.write('ab_convergence_p   '+str(log(ab_ratio, 2))+' '+str(log(ab_ratio_inf, 2))+'\n')
output.close()

ab_convergence_p = [log(ab_ratio, 2), log(ab_ratio_inf, 2)]
    </variable>
    <variable name="ab_convergence_k" language="python">
from fluidity_tools import stat_parser as stat
from math import log
output=open('output.log','a')
a_error = stat("MMS_A.stat")["NS"]["TKEDifference"]["l2norm"][-1]
b_error = stat("MMS_B.stat")["NS"]["TKEDifference"]["l2norm"][-1]

a_error_inf = stat("MMS_A.stat")["NS"]["TKEDifference"]["max"][-1]
b_error_inf = stat("MMS_B.stat")["NS"]["TKEDifference"]["max"][-1]

ab_ratio = a_error / b_error
ab_ratio_inf = a_error_inf / b_error_inf

output.write('ab_convergence_k   '+str(log(ab_ratio, 2))+' '+str(log(ab_ratio_inf, 2))+'\n')
output.close()

ab_convergence_k = [log(ab_ratio, 2), log(ab_ratio_inf, 2)]
    </variable>
    <variable name="ab_convergence_eps" language="python">
from fluidity_tools import stat_parser as stat
from math import log
output=open('output.log','a')
a_error = stat("MMS_A.stat")["NS"]["EpsilonDifference"]["l2norm"][-1]
b_error = stat("MMS_B.stat")["NS"]["EpsilonDifference"]["l2norm"][-1]

a_error_inf = stat("MMS_A.stat")["NS"]["EpsilonDifference"]["max"][-1]
b_error_inf = stat("MMS_B.stat")["NS"]["EpsilonDifference"]["max"][-1]

ab_ratio = a_error / b_error
ab_ratio_inf = a_error_inf / b_error_inf

output.write('ab_convergence_eps '+str(log(ab_ratio, 2))+' '+str(log(ab_ratio_inf, 2))+'\n')
output.close()

ab_convergence_eps = [log(ab_ratio, 2), log(ab_ratio_inf, 2)]
    </variable>
    <variable name="ab_convergence_vt" language="python">
from fluidity_tools import stat_parser as stat
from math import log
output=open('output.log','a')
a_error = stat("MMS_A.stat")["NS"]["EddyViscosityDifference"]["l2norm"][-1]
b_error = stat("MMS_B.stat")["NS"]["EddyViscosityDifference"]["l2norm"][-1]

a_error_inf = stat("MMS_A.stat")["NS"]["EddyViscosityDifference"]["max"][-1]
b_error_inf = stat("MMS_B.stat")["NS"]["EddyViscosityDifference"]["max"][-1]

ab_ratio = a_error / b_error
ab_ratio_inf = a_error_inf / b_error_inf

output.write('ab_convergence_vt  '+str(log(ab_ratio, 2))+' '+str(log(ab_ratio_inf, 2))+'\n')
output.close()

ab_convergence_vt = [log(ab_ratio, 2), log(ab_ratio_inf, 2)]
    </variable>
    <variable name="bc_convergence_vel" language="python">
from fluidity_tools import stat_parser as stat
from math import log
output=open('output.log','a')
b_error_x = stat("MMS_B.stat")["NS"]["VelocityDifference%1"]["l2norm"][-1]
c_error_x = stat("MMS_C.stat")["NS"]["VelocityDifference%1"]["l2norm"][-1]
b_error_y = stat("MMS_B.stat")["NS"]["VelocityDifference%2"]["l2norm"][-1]
c_error_y = stat("MMS_C.stat")["NS"]["VelocityDifference%2"]["l2norm"][-1]

b_error_inf_x = stat("MMS_B.stat")["NS"]["VelocityDifference%1"]["max"][-1]
c_error_inf_x = stat("MMS_C.stat")["NS"]["VelocityDifference%1"]["max"][-1]
b_error_inf_y = stat("MMS_B.stat")["NS"]["VelocityDifference%2"]["max"][-1]
c_error_inf_y = stat("MMS_C.stat")["NS"]["VelocityDifference%2"]["max"][-1]

bc_ratio_x = b_error_x / c_error_x
bc_ratio_y = b_error_y / c_error_y
bc_ratio_inf_x = b_error_inf_x / c_error_inf_x
bc_ratio_inf_y = b_error_inf_y / c_error_inf_y

output.write('bc_convergence_vel '+str(log(bc_ratio_x, 2))+' '+str(log(bc_ratio_inf_x, 2))+' '+str(log(bc_ratio_y, 2))+' '+str(log(bc_ratio_inf_y, 2))+'\n')
output.close()

bc_convergence_vel = [[log(bc_ratio_x, 2), log(bc_ratio_inf_x, 2)], [log(bc_ratio_y, 2), log(bc_ratio_inf_y, 2)]]
    </variable>
    <variable name="bc_convergence_p" language="python">
from fluidity_tools import stat_parser as stat
from math import log
output=open('output.log','a')
b_error = stat("MMS_B.stat")["NS"]["PressureDifference"]["l2norm"][-1]
c_error = stat("MMS_C.stat")["NS"]["PressureDifference"]["l2norm"][-1]

b_error_inf = stat("MMS_B.stat")["NS"]["PressureDifference"]["max"][-1]
c_error_inf = stat("MMS_C.stat")["NS"]["PressureDifference"]["max"][-1]

bc_ratio = b_error / c_error
bc_ratio_inf = b_error_inf / c_error_inf

output.write('bc_convergence_p   '+str(log(bc_ratio, 2))+' '+str(log(bc_ratio_inf, 2))+'\n')
output.close()

bc_convergence_p = [log(bc_ratio, 2), log(bc_ratio_inf, 2)]
    </variable>
    <variable name="bc_convergence_k" language="python">
from fluidity_tools import stat_parser as stat
from math import log
output=open('output.log','a')
b_error = stat("MMS_B.stat")["NS"]["TKEDifference"]["l2norm"][-1]
c_error = stat("MMS_C.stat")["NS"]["TKEDifference"]["l2norm"][-1]

b_error_inf = stat("MMS_B.stat")["NS"]["TKEDifference"]["max"][-1]
c_error_inf = stat("MMS_C.stat")["NS"]["TKEDifference"]["max"][-1]

bc_ratio = b_error / c_error
bc_ratio_inf = b_error_inf / c_error_inf

output.write('bc_convergence_k   '+str(log(bc_ratio, 2))+' '+str(log(bc_ratio_inf, 2))+'\n')
output.close()

bc_convergence_k = [log(bc_ratio, 2), log(bc_ratio_inf, 2)]
    </variable>
    <variable name="bc_convergence_eps" language="python">
from fluidity_tools import stat_parser as stat
from math import log
output=open('output.log','a')
b_error = stat("MMS_B.stat")["NS"]["EpsilonDifference"]["l2norm"][-1]
c_error = stat("MMS_C.stat")["NS"]["EpsilonDifference"]["l2norm"][-1]

b_error_inf = stat("MMS_B.stat")["NS"]["EpsilonDifference"]["max"][-1]
c_error_inf = stat("MMS_C.stat")["NS"]["EpsilonDifference"]["max"][-1]

bc_ratio = b_error / c_error
bc_ratio_inf = b_error_inf / c_error_inf

output.write('bc_convergence_eps '+str(log(bc_ratio, 2))+' '+str(log(bc_ratio_inf, 2))+'\n')
output.close()

bc_convergence_eps = [log(bc_ratio, 2), log(bc_ratio_inf, 2)]
    </variable>
    <variable name="bc_convergence_vt" language="python">
from fluidity_tools import stat_parser as stat
from math import log
output=open('output.log','a')
b_error = stat("MMS_B.stat")["NS"]["EddyViscosityDifference"]["l2norm"][-1]
c_error = stat("MMS_C.stat")["NS"]["EddyViscosityDifference"]["l2norm"][-1]

b_error_inf = stat("MMS_B.stat")["NS"]["EddyViscosityDifference"]["max"][-1]
c_error_inf = stat("MMS_C.stat")["NS"]["EddyViscosityDifference"]["max"][-1]

bc_ratio = b_error / c_error
bc_ratio_inf = b_error_inf / c_error_inf

output.write('bc_convergence_vt  '+str(log(bc_ratio, 2))+' '+str(log(bc_ratio_inf, 2))+'\n')
output.close()

bc_convergence_vt = [log(bc_ratio, 2), log(bc_ratio_inf, 2)]
    </variable>
    <variable name="cd_convergence_vel" language="python">
from fluidity_tools import stat_parser as stat
from math import log
output=open('output.log','a')
c_error_x = stat("MMS_C.stat")["NS"]["VelocityDifference%1"]["l2norm"][-1]
d_error_x = stat("MMS_D.stat")["NS"]["VelocityDifference%1"]["l2norm"][-1]
c_error_y = stat("MMS_C.stat")["NS"]["VelocityDifference%2"]["l2norm"][-1]
d_error_y = stat("MMS_D.stat")["NS"]["VelocityDifference%2"]["l2norm"][-1]

c_error_inf_x = stat("MMS_C.stat")["NS"]["VelocityDifference%1"]["max"][-1]
d_error_inf_x = stat("MMS_D.stat")["NS"]["VelocityDifference%1"]["max"][-1]
c_error_inf_y = stat("MMS_C.stat")["NS"]["VelocityDifference%2"]["max"][-1]
d_error_inf_y = stat("MMS_D.stat")["NS"]["VelocityDifference%2"]["max"][-1]

cd_ratio_x = c_error_x / d_error_x
cd_ratio_y = c_error_y / d_error_y
cd_ratio_inf_x = c_error_inf_x / d_error_inf_x
cd_ratio_inf_y = c_error_inf_y / d_error_inf_y

output.write('cd_convergence_vel '+str(log(cd_ratio_x, 2))+' '+str(log(cd_ratio_inf_x, 2))+' '+str(log(cd_ratio_y, 2))+' '+str(log(cd_ratio_inf_y, 2))+'\n')
output.close()

cd_convergence_vel = [[log(cd_ratio_x, 2), log(cd_ratio_inf_x, 2)], [log(cd_ratio_y, 2), log(cd_ratio_inf_y, 2)]]
    </variable>
    <variable name="cd_convergence_p" language="python">
from fluidity_tools import stat_parser as stat
from math import log
output=open('output.log','a')
c_error = stat("MMS_C.stat")["NS"]["PressureDifference"]["l2norm"][-1]
d_error = stat("MMS_D.stat")["NS"]["PressureDifference"]["l2norm"][-1]

c_error_inf = stat("MMS_C.stat")["NS"]["PressureDifference"]["max"][-1]
d_error_inf = stat("MMS_D.stat")["NS"]["PressureDifference"]["max"][-1]

cd_ratio = c_error / d_error
cd_ratio_inf = c_error_inf / d_error_inf

output.write('cd_convergence_p   '+str(log(cd_ratio, 2))+' '+str(log(cd_ratio_inf, 2))+'\n')
output.close()

cd_convergence_p = [log(cd_ratio, 2), log(cd_ratio_inf, 2)]
    </variable>
    <variable name="cd_convergence_k" language="python">
from fluidity_tools import stat_parser as stat
from math import log
output=open('output.log','a')
c_error = stat("MMS_C.stat")["NS"]["TKEDifference"]["l2norm"][-1]
d_error = stat("MMS_D.stat")["NS"]["TKEDifference"]["l2norm"][-1]

c_error_inf = stat("MMS_C.stat")["NS"]["TKEDifference"]["max"][-1]
d_error_inf = stat("MMS_D.stat")["NS"]["TKEDifference"]["max"][-1]

cd_ratio = c_error / d_error
cd_ratio_inf = c_error_inf / d_error_inf

output.write('cd_convergence_k   '+str(log(cd_ratio, 2))+' '+str(log(cd_ratio_inf, 2))+'\n')
output.close()

cd_convergence_k = [log(cd_ratio, 2), log(cd_ratio_inf, 2)]
    </variable>
    <variable name="cd_convergence_eps" language="python">
from fluidity_tools import stat_parser as stat
from math import log
output=open('output.log','a')
c_error = stat("MMS_C.stat")["NS"]["EpsilonDifference"]["l2norm"][-1]
d_error = stat("MMS_D.stat")["NS"]["EpsilonDifference"]["l2norm"][-1]

c_error_inf = stat("MMS_C.stat")["NS"]["EpsilonDifference"]["max"][-1]
d_error_inf = stat("MMS_D.stat")["NS"]["EpsilonDifference"]["max"][-1]

cd_ratio = c_error / d_error
cd_ratio_inf = c_error_inf / d_error_inf

output.write('cd_convergence_eps '+str(log(cd_ratio, 2))+' '+str(log(cd_ratio_inf, 2))+'\n')
output.close()

cd_convergence_eps = [log(cd_ratio, 2), log(cd_ratio_inf, 2)]
    </variable>
    <variable name="cd_convergence_vt" language="python">
from fluidity_tools import stat_parser as stat
from math import log
output=open('output.log','a')
c_error = stat("MMS_C.stat")["NS"]["EddyViscosityDifference"]["l2norm"][-1]
d_error = stat("MMS_D.stat")["NS"]["EddyViscosityDifference"]["l2norm"][-1]

c_error_inf = stat("MMS_C.stat")["NS"]["EddyViscosityDifference"]["max"][-1]
d_error_inf = stat("MMS_D.stat")["NS"]["EddyViscosityDifference"]["max"][-1]

cd_ratio = c_error / d_error
cd_ratio_inf = c_error_inf / d_error_inf

output.write('cd_convergence_vt  '+str(log(cd_ratio, 2))+' '+str(log(cd_ratio_inf, 2))+'\n')
output.close()

cd_convergence_vt = [log(cd_ratio, 2), log(cd_ratio_inf, 2)]
    </variable>
   <variable name="a_finish_time" language="python">
from fluidity_tools import stat_parser as stat
a_finish_time = stat("MMS_A.stat")["ElapsedTime"]["value"][-1]
    </variable>
    <variable name="b_finish_time" language="python">
from fluidity_tools import stat_parser as stat
b_finish_time = stat("MMS_B.stat")["ElapsedTime"]["value"][-1]
    </variable>
    <variable name="c_finish_time" language="python">
from fluidity_tools import stat_parser as stat
c_finish_time = stat("MMS_C.stat")["ElapsedTime"]["value"][-1]
    </variable>
    <variable name="d_finish_time" language="python">
from fluidity_tools import stat_parser as stat
d_finish_time = stat("MMS_D.stat")["ElapsedTime"]["value"][-1]
    </variable>
    <variable name="a_final_change_vel" language="python">
import vtktools
from fluidity_tools import stat_parser as stat
vtu = vtktools.vtu("MMS_A_1.vtu")
dt = stat("MMS_A.stat")["dt"]["value"][-1]
a_final_change_vel = max(max(abs(vtu.GetVectorField("Velocity")[:,0]-vtu.GetVectorField("OldVelocity")[:,0])/dt), max(abs(vtu.GetVectorField("Velocity")[:,1]-vtu.GetVectorField("OldVelocity")[:,1])/dt))
    </variable>
    <variable name="b_final_change_vel" language="python">
import vtktools
from fluidity_tools import stat_parser as stat
vtu = vtktools.vtu("MMS_B_1.vtu")
dt = stat("MMS_B.stat")["dt"]["value"][-1]
b_final_change_vel = max(max(abs(vtu.GetVectorField("Velocity")[:,0]-vtu.GetVectorField("OldVelocity")[:,0])/dt), max(abs(vtu.GetVectorField("Velocity")[:,1]-vtu.GetVectorField("OldVelocity")[:,1])/dt))
    </variable>
    <variable name="c_final_change_vel" language="python">
import vtktools
from fluidity_tools import stat_parser as stat
vtu = vtktools.vtu("MMS_C_1.vtu")
dt = stat("MMS_C.stat")["dt"]["value"][-1]
c_final_change_vel = max(max(abs(vtu.GetVectorField("Velocity")[:,0]-vtu.GetVectorField("OldVelocity")[:,0])/dt), max(abs(vtu.GetVectorField("Velocity")[:,1]-vtu.GetVectorField("OldVelocity")[:,1])/dt))
    </variable>
    <variable name="d_final_change_vel" language="python">
import vtktools
from fluidity_tools import stat_parser as stat
vtu = vtktools.vtu("MMS_D_1.vtu")
dt = stat("MMS_D.stat")["dt"]["value"][-1]
d_final_change_vel = max(max(abs(vtu.GetVectorField("Velocity")[:,0]-vtu.GetVectorField("OldVelocity")[:,0])/dt), max(abs(vtu.GetVectorField("Velocity")[:,1]-vtu.GetVectorField("OldVelocity")[:,1])/dt))
    </variable>
    <variable name="a_final_change_p" language="python">
import vtktools
from fluidity_tools import stat_parser as stat
vtu = vtktools.vtu("MMS_A_1.vtu")
dt = stat("MMS_A.stat")["dt"]["value"][-1]
a_final_change_p = max(abs(vtu.GetScalarField("Pressure")-vtu.GetScalarField("OldPressure"))/dt)
    </variable>
    <variable name="b_final_change_p" language="python">
import vtktools
from fluidity_tools import stat_parser as stat
vtu = vtktools.vtu("MMS_B_1.vtu")
dt = stat("MMS_B.stat")["dt"]["value"][-1]
b_final_change_p = max(abs(vtu.GetScalarField("Pressure")-vtu.GetScalarField("OldPressure"))/dt)
    </variable>
    <variable name="c_final_change_p" language="python">
import vtktools
from fluidity_tools import stat_parser as stat
vtu = vtktools.vtu("MMS_C_1.vtu")
dt = stat("MMS_C.stat")["dt"]["value"][-1]
c_final_change_p = max(abs(vtu.GetScalarField("Pressure")-vtu.GetScalarField("OldPressure"))/dt)
    </variable>
    <variable name="d_final_change_p" language="python">
import vtktools
from fluidity_tools import stat_parser as stat
vtu = vtktools.vtu("MMS_D_1.vtu")
dt = stat("MMS_D.stat")["dt"]["value"][-1]
d_final_change_p = max(abs(vtu.GetScalarField("Pressure")-vtu.GetScalarField("OldPressure"))/dt)
    </variable>
    <variable name="a_final_change_k" language="python">
import vtktools
from fluidity_tools import stat_parser as stat
vtu = vtktools.vtu("MMS_A_1.vtu")
dt = stat("MMS_A.stat")["dt"]["value"][-1]
a_final_change_k = max(abs(vtu.GetScalarField("TurbulentKineticEnergy")-vtu.GetScalarField("OldTurbulentKineticEnergy"))/dt)
    </variable>
    <variable name="b_final_change_k" language="python">
import vtktools
from fluidity_tools import stat_parser as stat
vtu = vtktools.vtu("MMS_B_1.vtu")
dt = stat("MMS_B.stat")["dt"]["value"][-1]
b_final_change_k = max(abs(vtu.GetScalarField("TurbulentKineticEnergy")-vtu.GetScalarField("OldTurbulentKineticEnergy"))/dt)
    </variable>
    <variable name="c_final_change_k" language="python">
import vtktools
from fluidity_tools import stat_parser as stat
vtu = vtktools.vtu("MMS_C_1.vtu")
dt = stat("MMS_C.stat")["dt"]["value"][-1]
c_final_change_k = max(abs(vtu.GetScalarField("TurbulentKineticEnergy")-vtu.GetScalarField("OldTurbulentKineticEnergy"))/dt)
    </variable>
    <variable name="d_final_change_k" language="python">
import vtktools
from fluidity_tools import stat_parser as stat
vtu = vtktools.vtu("MMS_D_1.vtu")
dt = stat("MMS_D.stat")["dt"]["value"][-1]
d_final_change_k = max(abs(vtu.GetScalarField("TurbulentKineticEnergy")-vtu.GetScalarField("OldTurbulentKineticEnergy"))/dt)
    </variable>
    <variable name="a_final_change_eps" language="python">
import vtktools
from fluidity_tools import stat_parser as stat
vtu = vtktools.vtu("MMS_A_1.vtu")
dt = stat("MMS_A.stat")["dt"]["value"][-1]
a_final_change_eps = max(abs(vtu.GetScalarField("TurbulentDissipation")-vtu.GetScalarField("OldTurbulentDissipation"))/dt)
    </variable>
    <variable name="b_final_change_eps" language="python">
import vtktools
from fluidity_tools import stat_parser as stat
vtu = vtktools.vtu("MMS_B_1.vtu")
dt = stat("MMS_B.stat")["dt"]["value"][-1]
b_final_change_eps = max(abs(vtu.GetScalarField("TurbulentDissipation")-vtu.GetScalarField("OldTurbulentDissipation"))/dt)
    </variable>
    <variable name="c_final_change_eps" language="python">
import vtktools
from fluidity_tools import stat_parser as stat
vtu = vtktools.vtu("MMS_C_1.vtu")
dt = stat("MMS_C.stat")["dt"]["value"][-1]
c_final_change_eps = max(abs(vtu.GetScalarField("TurbulentDissipation")-vtu.GetScalarField("OldTurbulentDissipation"))/dt)
    </variable>
    <variable name="d_final_change_eps" language="python">
import vtktools
from fluidity_tools import stat_parser as stat
vtu = vtktools.vtu("MMS_D_1.vtu")
dt = stat("MMS_D.stat")["dt"]["value"][-1]
d_final_change_eps = max(abs(vtu.GetScalarField("TurbulentDissipation")-vtu.GetScalarField("OldTurbulentDissipation"))/dt)
    </variable>
  </variables>
  <pass_tests>
    <test name="Solvers converged" language="python">
      assert(solvers_converged)
    </test>
    <test name="ab_convergence_vel_x: L2 order > 1.7" language="python">
assert(ab_convergence_vel[0][0] &gt; 1.7)
    </test>
    <test name="ab_convergence_vel_y: L2 order > 1.7" language="python">
assert(ab_convergence_vel[1][0] &gt; 1.7)
    </test>
    <test name="ab_convergence_p: L2 order > 1.1" language="python">
assert(ab_convergence_p[0] &gt; 1.1)
    </test>
    <test name="ab_convergence_k: L2 order > 1.7" language="python">
assert(ab_convergence_k[0] &gt; 1.7)
    </test>
    <test name="ab_convergence_eps: L2 order > 1.7" language="python">
assert(ab_convergence_eps[0] &gt; 1.7)
    </test>
    <test name="ab_convergence_vt: L2 order > 1.1" language="python">
assert(ab_convergence_vt[0] &gt; 1.1)
    </test>
    <test name="bc_convergence_vel_x: L2 order > 1.7" language="python">
assert(bc_convergence_vel[0][0] &gt; 1.7)
    </test>
    <test name="bc_convergence_vel_y: L2 order > 1.7" language="python">
assert(bc_convergence_vel[1][0] &gt; 1.7)
    </test>
    <test name="bc_convergence_p: L2 order > 1.1" language="python">
assert(bc_convergence_p[0] &gt; 1.1)
    </test>
    <test name="bc_convergence_k: L2 order > 1.7" language="python">
assert(bc_convergence_k[0] &gt; 1.7)
    </test>
    <test name="bc_convergence_eps: L2 order > 1.7" language="python">
assert(bc_convergence_eps[0] &gt; 1.7)
    </test>
    <test name="bc_convergence_vt: L2 order > 1.1" language="python">
assert(bc_convergence_vt[0] &gt; 1.1)
    </test>
    <test name="cd_convergence_vel_x: L2 order > 1.7" language="python">
assert(cd_convergence_vel[0][0] &gt; 1.7)
    </test>
    <test name="cd_convergence_vel_y: L2 order > 1.7" language="python">
assert(cd_convergence_vel[1][0] &gt; 1.7)
    </test>
    <test name="cd_convergence_p: L2 order > 1.1" language="python">
assert(cd_convergence_p[0] &gt; 1.1)
    </test>
    <test name="cd_convergence_k: L2 order > 1.7" language="python">
assert(cd_convergence_k[0] &gt; 1.7)
    </test>
    <test name="cd_convergence_eps: L2 order > 1.7" language="python">
assert(cd_convergence_eps[0] &gt; 1.7)
    </test>
    <test name="cd_convergence_vt: L2 order > 1.1" language="python">
assert(cd_convergence_vt[0] &gt; 1.1)
    </test>
    <test name="checking steady state was reached in A vel" language="python">
assert(a_final_change_vel &lt; 1.E-3)
    </test>
    <test name="checking steady state was reached in B vel" language="python">
assert(b_final_change_vel &lt; 1.E-3)
    </test>
    <test name="checking steady state was reached in C vel" language="python">
assert(c_final_change_vel &lt; 1.E-3)
    </test>
    <test name="checking steady state was reached in D vel" language="python">
assert(d_final_change_vel &lt; 1.E-3)
    </test>
    <test name="checking steady state was reached in A p" language="python">
assert(a_final_change_p &lt; 1.E-3)
    </test>
    <test name="checking steady state was reached in B p" language="python">
assert(b_final_change_p &lt; 1.E-3)
    </test>
    <test name="checking steady state was reached in C p" language="python">
assert(c_final_change_p &lt; 1.E-3)
    </test>
    <test name="checking steady state was reached in D p" language="python">
assert(d_final_change_p &lt; 1.E-3)
    </test>
    <test name="checking steady state was reached in A k" language="python">
assert(a_final_change_k &lt; 1.E-3)
    </test>
    <test name="checking steady state was reached in B k" language="python">
assert(b_final_change_k &lt; 1.E-3)
    </test>
    <test name="checking steady state was reached in C k" language="python">
assert(c_final_change_k &lt; 1.E-3)
    </test>
    <test name="checking steady state was reached in D k" language="python">
assert(d_final_change_k &lt; 1.E-3)
    </test>
    <test name="checking steady state was reached in A eps" language="python">
assert(a_final_change_eps &lt; 1.E-3)
    </test>
    <test name="checking steady state was reached in B eps" language="python">
assert(b_final_change_eps &lt; 1.E-3)
    </test>
    <test name="checking steady state was reached in C eps" language="python">
assert(c_final_change_eps &lt; 1.E-3)
    </test>
    <test name="checking steady state was reached in D eps" language="python">
assert(d_final_change_eps &lt; 1.E-3)
    </test>
  </pass_tests>
  <warn_tests>
  </warn_tests>
</testproblem>

