include "spud_base.rnc"

adjoint_options =
   ## Turn on the solution of the adjoint problem.
   ## To compute the adjoint you must specify code for the functional
   ## derivative. If the functional is also specified, then it will be
   ## output in the .stat file.
   element adjoint {
      ## A functional to be computed.
      ## If the functional_value is supplied by the user, then the functional gets
      ## evaluated and printed in the .stat files.
      ## 
      ## If the functional_derivative is supplied by the user, then that is always used.
      ## for the right-hand side of the adjoint computation.
      ## If no functional_derivative is supplied, then automatic differentiation is applied
      ## to compute it from the functional_value.
      ## 
      ## In short, you must supply at least one of functional_value or functional_derivative,
      ## and you may supply both.
      element functional {
         attribute name { xsd:string },
         ## The value of the functional to be computed.
         element functional_value {
            ## Python code for the functional. This code is given the following variables:
            ##  n, the current timestep number
            ##  time, the start of the timestep
            ##  dt, the current size of the timestep
            ##  states, which represents the states through time, and may be accessed like
            ##   states[0]["MaterialPhase"].vector_fields["Coordinate"], or
            ##   states[n-1]["MyOtherMaterialPhase"].scalar_fields["Pressure"], etc.
            ##  states will only contain those fields that have been specified in the functional_dependencies element.
            ## 
            ##  This code must compute a real number J, which is the value of the functional associated with this particular
            ##  timestep.
            ##  
            ##  Here is a simple example for the functional that evaluates the L2-norm of a field "LayerThickness" at time T=1:
            ##  <span font_desc="monospace 10" foreground="blue">
            ##  J = 0.0
            ##  T = 1.0 # the time at which to evaluate
            ##  if time &lt; T &lt;= time+dt:
            ##    import numpy
            ##    eta_prev = states[n-1]["Fluid"].scalar_fields["LayerThickness"]
            ##    eta      = states[n]["Fluid"].scalar_fields["LayerThickness"]
            ##    
            ##    # We want to temporally interpolate to evaluate eta at t=1.0
            ##    alpha = (time + dt - T) / dt
            ##    assert 0 &lt;= alpha &lt; 1
            ##    tmp_eta = alpha * eta_prev.val + (1-alpha) * eta.val
            ##    
            ##    # Now we want to integrate that over space
            ##    coord = states[0]["Fluid"].vector_fields["Coordinate"]
            ##    assert eta.element_count == eta_prev.element_count == coord.element_count
            ##    for ele in range(coord.element_count):
            ##      t = Transform(ele, coord)
            ##      shape = eta_prev.ele_shape(ele)
            ##      mass = t.shape_shape(shape, shape)
            ##      nodes = eta_prev.ele_nodes(ele)
            ##      J = J + numpy.dot(tmp_eta[nodes], numpy.dot(mass, tmp_eta[nodes]))
            ##  </span>
            ## 
            ##  <span weight="bold">
            ##  If you intend to use automatic differentiation, and want to use
            ##  primitives such as sin, cos, exp, etc., you must use those
            ##  found in the uncertainties.unumpy package, not those
            ##  found in the numpy or math packages.
            ##  </span>
            element algorithm {
               attribute name { "functional_value" },
               python_code
            },
            ## The functional does not exist at any particular point in time; however, the code above is called at every timestep.
            ## This is to allow for temporal localisation. Suppose you wished to compute an integral in time: this allows you to perform
            ## the integral over each element of your time domain separately, and then they must be combined to compute the full value of
            ## the functional. In this example, the relevant reduction would be a sum.
            element reduction {
              ## Sum all of the functional components associated with each timestep to compute the functional
              element sum { empty }
            }
         }?,
         ## The derivative of the functional at each time level.
         element functional_derivative {
            ## Python code for the functional derivative. This code is given the following variables:
            ##  n, the timelevel of the field to differentiate with respect to
            ##  times, an array containing the value of time for each timelevel
            ##  states, which represents the states through time, and may be accessed like
            ##   states[0]["MaterialPhase"].vector_fields["Coordinate"], or
            ##   states[n]["MyOtherMaterialPhase"].scalar_fields["Pressure"], etc.
            ##  states will only contain those fields that have been specified in the functional_dependencies element.
            ##  derivative, which is a scalar/vector/tensor field associated with the derivative to be computed.
            ## 
            ##  This code must set the entries of derivative.val. The code should check which variable we are differentiating
            ##  with respect to by inspecting derivative.name.
            element algorithm {
               attribute name { "functional_derivative" },
               python_code
            }
         }?,
         ## The dependencies of the functional at each time level.
         element functional_dependencies {
            ##  Python code for the functional dependencies.
            ##  This code defines a function that informs the model what variables at which time levels
            ##  will be necessary for the functional computation at this point.
            ##
            ##  Here is a simple example for the functional that evaluates the L2-norm of a field "LayerThickness" at time T=1:
            ##  <span font_desc="monospace 10" foreground="blue">
            ##  def dependencies(times, timestep):
            ##    if times[0] &lt; 1.0 &lt;= times[1]:
            ##      return {"Fluid::Coordinate": [0],
            ##              "Fluid::LayerThickness": [timestep-1, timestep]}
            ##    else:
            ##      return {}
            ##  </span>
            ##
            element algorithm {
               attribute name { "functional_dependencies" },
               python_code
            }
         }
      }+,
      ## Debugging options for adjoint model development
      element debug {
         ## Rerun the forward equation using libadjoint. 
         ## This is a debugging option to check if the libadjoint callbacks are implemented correctly.
         element replay_forward_run {
           empty
         }?,
         ## Activate the visualisation of the forward and adjoint equations solved. 
         ## This option creates an html file for both the forward and adjoint system.
         element html_output {
            empty
         }?,
         ## Check the transposes of all action callbacks.
         element check_action_transposes {
            empty
         }?
     }?
   }

adjoint_storage =
   (
      ## Informs the model whether the field should be computed only in the
      ## forward model, the adjoint model, or in both.
      ## If /adjoint is not enabled, this has no effect whatsoever.
      element adjoint_storage {
         (
            ## Include the field only in the forward state.
            element exists_in_forward {
              empty
            }|
            ## Include the field in both the forward and adjoint states.
            element exists_in_both {
              empty
            }|
            ## Include the field only in the adjoint state.
            element exists_in_adjoint {
               empty
            }
         )
      }
   )

