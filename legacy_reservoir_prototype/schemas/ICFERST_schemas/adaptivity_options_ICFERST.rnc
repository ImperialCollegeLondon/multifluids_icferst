
adaptivity_preprocessing =
      ## Occasionally, it is desirable to apply operations or filters
      ## to fields before using them for the purposes of adaptivity.
      element preprocessing {
        (
            ## Invert a helmholtz operator to smooth out the field
            ## before using it to adapt. This can help with noisy
            ## fields.
            element helmholtz_smoother {
                 element smoothing_length_scale {
                     real_dim_symmetric_tensor
                 },
                 element solver {
                   linear_solver_options_sym
                 }
            }
        )
      }?

adaptivity_options_prognostic_scalar_field =
   (
      element adaptivity_options {
         (
            ## When specifying absolute measure
            ## one specifies the absolute interpolation 
            ## error in the units of the field that is 
            ## being adapted, e.g. you can specify
            ## the error to be 1.3 units 
            element absolute_measure {
               element scalar_field {
                  attribute rank { "0" },
                  attribute name { "InterpolationErrorBound" },
                  element prescribed {
                     prescribed_scalar_field_no_adapt
                  }
               },
               ## By default the interpolation error controlled is the L_inf
               ## norm. Use this option to specify an alternative L_p norm. See
               ## Chen Sun and Zu, Mathematics of Computation, Volume 76,
               ## Number 257, January 2007, pp. 179-204.
               element p_norm {
                  integer
               }?
            }|
            ##When specifying relative measure
            ##one specifies the interpolation error
            ##relative to the field that is
            ##being adapted, e.g. you can specify
            ##the error to be 5% (i.e. 0.05)
            element relative_measure {
               element scalar_field {
                  attribute rank { "0" },
                  attribute name { "InterpolationErrorBound" },
                  element prescribed {
                     prescribed_scalar_field_no_adapt
                  }
               },
               ## The relative Hessian is calculated according to:
               ##
               ##   Q = H / max{ |psi|, psi_min}
               ##
               ## where H is the Hessian, psi is the field value and
               ## psi_min is the tolerance. The tolerance prevents
               ## division by zero errors.
               ##
               ## Source: Fluidity/ICOM manual draft version 1.2
               element tolerance {
                  real
               }
            }|
            ## Adapt using the anisotropic strategy of 
            ## Formaggia, Perotto, Micheletti.
            ## Rather than taking two derivatives
            ## and deriving the anisotropic information,
            ## this approach computes an anisotropic Zienkiewicz-Zhu
            ## error estimator for each element. The approach then
            ## optimises the element orientation and length scales
            ## to equidistribute the estimated error.
            element anisotropic_zienkiewicz_zhu {
              ## Tau is an anisotropic estimate for the H1 seminorm of the
              ## error. This estimator is efficient and reliable, under the
              ## caveat that the initial mesh is sufficiently fine so as to
              ## prevent data oscillation. (Micheletti & Perotto, 2006)
              ## Typically, tau will be ~= 6-8 * |e|_H1.
              element tau {
                real
              }
            }
         ),
         adaptivity_preprocessing
      }?
   )

adaptivity_options_scalar_field.adaptivity_options =
   (
      ## When specifying absolute measure
      ## one specifies the absolute interpolation 
      ## error in the units of the field that is 
      ## being adapted, e.g. you can specify
      ## the error to be 1.3 units 
      element absolute_measure {
         element scalar_field {
            attribute rank { "0" },
            attribute name { "InterpolationErrorBound" },
            element prescribed {
               prescribed_scalar_field_no_adapt
            }
         },
         ## By default the interpolation error controlled is the L_inf
         ## norm. Use this option to specify an alternative L_p norm. See
         ## Chen Sun and Zu, Mathematics of Computation, Volume 76,
         ## Number 257, January 2007, pp. 179-204.
         element p_norm {
            integer
         }?
      }|
      ## When specifying relative measure
      ## one specifies the interpolation error
      ## relative to the field that is
      ## being adapted, e.g. you can specify
      ## the error to be 5% (i.e. 0.05)
      element relative_measure {
         element scalar_field {
            attribute rank { "0" },
            attribute name { "InterpolationErrorBound" },
            element prescribed {
               prescribed_scalar_field_no_adapt
            }
         },
         ## The relative Hessian is calculated according to:
         ##
         ##   Q = H / max{ |psi|, psi_min}
         ##
         ## where H is the Hessian, psi is the field value and
         ## psi_min is the tolerance. The tolerance prevents
         ## division by zero errors.
         ##
         ## Source: Fluidity/ICOM manual draft version 1.2
         element tolerance {
            real
         }
      }|
      ## Adapt using the anisotropic strategy of 
      ## Formaggia, Perotto, Micheletti.
      ## Rather than taking two derivatives
      ## and deriving the anisotropic information,
      ## this approach computes an anisotropic Zienkiewicz-Zhu
      ## error estimator for each element. The approach then
      ## optimises the element orientation and length scales
      ## to equidistribute the estimated error.
      element anisotropic_zienkiewicz_zhu {
        ## Tau is an anisotropic estimate for the H1 seminorm of the
        ## error. This estimator is efficient and reliable, under the
        ## caveat that the initial mesh is sufficiently fine so as to
        ## prevent data oscillation. (Micheletti & Perotto, 2006)
        ## Typically, tau will be ~= 6-8 * |e|_H1.
        element tau {
          real
        }
      }
   )
adaptivity_options_scalar_field =
   (
      element adaptivity_options {
         adaptivity_options_scalar_field.adaptivity_options,
         adaptivity_preprocessing
      }?
   )

adaptivity_options_prognostic_vector_field =
   (
      ## Adaptivity weights
      element adaptivity_options {
         (
            ## When specifying absolute measure
            ## one specifies the absolute interpolation 
            ## error in the units of the field that is 
            ## being adapted, e.g. you can specify
            ## the error to be 1.3 units 
            element absolute_measure {
               element vector_field {
                  attribute rank { "1" },
                  attribute name { "InterpolationErrorBound" },
                  element prescribed {
                     prescribed_vector_field_no_adapt
                  }
               },
               ## By default the interpolation error controlled is the L_inf
               ## norm. Use this option to specify an alternative L_p norm. See
               ## Chen Sun and Zu, Mathematics of Computation, Volume 76,
               ## Number 257, January 2007, pp. 179-204.
               element p_norm {
                  integer
               }?
            }|
            ## When specifying relative measure
            ## one specifies the interpolation error
            ## relative to the field that is
            ## being adapted, e.g. you can specify
            ## the error to be 5% (i.e. 0.05)
            element relative_measure {
               element vector_field {
                  attribute rank { "1" },
                  attribute name { "InterpolationErrorBound" },
                  element prescribed {
                     prescribed_vector_field_no_adapt
                  }
               },
               ## The relative Hessian is calculated according to:
               ##
               ##   Q = H / max{ |psi|, psi_min}
               ##
               ## where H is the Hessian, psi is the field value and
               ## psi_min is the tolerance. The tolerance prevents
               ## division by zero errors.
               ##
               ## Source: Fluidity/ICOM manual draft version 1.2
               element tolerance {
                  real_dim_vector
               }
            }
         ),
         adaptivity_preprocessing
      }?
   )

adaptivity_options_vector_field =
   (
      ## Adaptivity weights
      element adaptivity_options {
         (
            ## When specifying absolute measure
            ## one specifies the absolute interpolation 
            ## error in the units of the field that is 
            ## being adapted, e.g. you can specify
            ## the error to be 1.3 units 
            element absolute_measure {
               element vector_field {
                  attribute rank { "1" },
                  attribute name { "InterpolationErrorBound" },
                  element prescribed {
                     prescribed_vector_field_no_adapt
                  }
               },
               ## By default the interpolation error controlled is the L_inf
               ## norm. Use this option to specify an alternative L_p norm. See
               ## Chen Sun and Zu, Mathematics of Computation, Volume 76,
               ## Number 257, January 2007, pp. 179-204.
               element p_norm {
                  integer
               }?
            }|
            ## When specifying relative measure
            ## one specifies the interpolation error
            ## relative to the field that is
            ## being adapted, e.g. you can specify
            ## the error to be 5% (i.e. 0.05)
            element relative_measure {
               element vector_field {
                  attribute rank { "1" },
                  attribute name { "InterpolationErrorBound" },
                  element prescribed {
                     prescribed_vector_field_no_adapt
                  }
               },
               ## The relative Hessian is calculated according to:
               ##
               ##   Q = H / max{ |psi|, psi_min}
               ##
               ## where H is the Hessian, psi is the field value and
               ## psi_min is the tolerance. The tolerance prevents
               ## division by zero errors.
               ##
               ## Source: Fluidity/ICOM manual draft version 1.2
               element tolerance {
                  real_dim_vector
               }
            }
         ),
         adaptivity_preprocessing
      }?
   )

adaptivity_options_prognostic_tensor_field =
   (
      ## Adaptivity weights
      element adaptivity_options {
         (
            ## When specifying absolute measure
            ## one specifies the absolute interpolation 
            ## error in the units of the field that is 
            ## being adapted, e.g. you can specify
            ## the error to be 1.3 units 
            element absolute_measure {
               element tensor_field {
                  attribute rank { "2" },
                  attribute name { "InterpolationErrorBound" },
                  element prescribed {
                     prescribed_values_tensor_field
                  }
               },
               ## By default the interpolation error controlled is the L_inf
               ## norm. Use this option to specify an alternative L_p norm. See
               ## Chen Sun and Zu, Mathematics of Computation, Volume 76,
               ## Number 257, January 2007, pp. 179-204.
               element p_norm {
                  integer
               }?
            }|
            ## When specifying relative measure
            ## one specifies the interpolation error
            ## relative to the field that is
            ## being adapted, e.g. you can specify
            ## the error to be 5% (i.e. 0.05)
            element relative_measure {
               element tensor_field {
                  attribute rank { "2" },
                  attribute name { "InterpolationErrorBound" },
                  element prescribed {
                     prescribed_values_tensor_field
                  }
               },
               ## The relative Hessian is calculated according to:
               ##
               ##   Q = H / max{ |psi|, psi_min}
               ##
               ## where H is the Hessian, psi is the field value and
               ## psi_min is the tolerance. The tolerance prevents
               ## division by zero errors.
               ##
               ## Source: Fluidity/ICOM manual draft version 1.2
               element tolerance {
                  real_dim_tensor
               }
            }
         ),
         adaptivity_preprocessing
      }?
   )

adaptivity_options_tensor_field =
   (
      ## Adaptivity weights
      element adaptivity_options {
         (
            ## When specifying absolute measure
            ## one specifies the absolute interpolation 
            ## error in the units of the field that is 
            ## being adapted, e.g. you can specify
            ## the error to be 1.3 units 
            element absolute_measure {
               element tensor_field {
                  attribute rank { "2" },
                  attribute name { "InterpolationErrorBound" },
                  element prescribed {
                     prescribed_values_tensor_field
                  }
               },
               ## By default the interpolation error controlled is the L_inf
               ## norm. Use this option to specify an alternative L_p norm. See
               ## Chen Sun and Zu, Mathematics of Computation, Volume 76,
               ## Number 257, January 2007, pp. 179-204.
               element p_norm {
                  integer
               }?
            }|
            ## When specifying relative measure
            ## one specifies the interpolation error
            ## relative to the field that is
            ## being adapted, e.g. you can specify
            ## the error to be 5% (i.e. 0.05)
            element relative_measure {
               element tensor_field {
                  attribute rank { "2" },
                  attribute name { "InterpolationErrorBound" },
                  element prescribed {
                     prescribed_values_tensor_field
                  }
               },
               ## The relative Hessian is calculated according to:
               ##
               ##   Q = H / max{ |psi|, psi_min}
               ##
               ## where H is the Hessian, psi is the field value and
               ## psi_min is the tolerance. The tolerance prevents
               ## division by zero errors.
               ##
               ## Source: Fluidity/ICOM manual draft version 1.2
               element tolerance {
                  real_dim_tensor
               }
            }
         ),
         adaptivity_preprocessing
      }?
   )

hr_adaptivity =
   (
   ## Anisotropic mesh hr-adaptivity
      element hr_adaptivity {
         (
            ## Adapt period in timesteps.
            element period_in_timesteps {
               integer
            }|
            ## This option enables the ability to adapt the mesh based on an accumulated shock-front Courant number.
            ## The mesh will adapt within the non-linear solver to always ensure the optimal position of 
            ## the mesh idependently of the Courant number. The only exception is at the end of first time-step 
            ## that it always adapt the mesh.
            ## 
            ## To adapt the mesh always introduce a negative value.
            ## 
            ## It only works for porous media and requires adapting the mesh for PhaseVolumeFraction
            ## but not to the last phase.
            element adapt_mesh_within_FPI {
               real
            }
         ),
         ## Delay start of adaptive algorithm until this time
	 element t_adapt_delay {
            real
         }?,
         ## The maximum number of nodes this simulation may use.
         ## In parallel, by default, this is the global maximum number of nodes.
         ##
         ## If the mesh adaptivity algorithm wants to place more
         ## nodes than this, the desired mesh is coarsened
         ## everywhere in space until it will fit within this limit.
         ## In general, the error tolerances should be set so that
         ## this is never reached; it should only be a safety catch.
         ## A typical value is 100000.
         ##
         ## When using vertically_structured_adaptivity this indicates the 
         ## maximum number of nodes in the horizontal mesh, i.e. the number
         ## of nodes in the full mesh will be much bigger and depends on the 
         ## number of layers specified, or if using inhomogenous_vertical_resolution
         ## on the resolution produced by the vertical adaptivity step.
         element maximum_number_of_nodes {
            integer
         },
         gradation_options_full,

         ## Mesh size constraints: the minimum edge length bound.
         element tensor_field {
           attribute name { "MinimumEdgeLengths" },
	   (
           element anisotropic_symmetric {
             input_choice_real_dim_symmetric_tensor
           }|
	   element value {
	     attribute name { string },
             region_ids?,
	     element anisotropic_symmetric {
	     	input_choice_real_dim_symmetric_tensor
	     }
	   }
	   )+	   
         },
         ## Mesh size constraints: the maximum edge length bound.
         element tensor_field {
           attribute name { "MaximumEdgeLengths" },
	   (
           element anisotropic_symmetric {
             input_choice_real_dim_symmetric_tensor
           }|
	   element value {
	     attribute name { string },
             region_ids?,
	     element anisotropic_symmetric {
	       input_choice_real_dim_symmetric_tensor
	     }
	   }
	   )+
         },
         ## Maximum aspect ratio in the adapted mesh.
         element aspect_ratio_bound {
           real
         }?,
         ## Adapt at first timestep
         element adapt_at_first_timestep {
            ## Number of adapts done after initialisation but
            ## before the actual simulation starts
            element number_of_adapts{integer},
            ## Write out the first timestep adapted mesh.
            ## This is useful when needing to re-run simulations
            ## without waiting for the first timestep adapt
            element output_adapted_mesh {
               comment
            }?
         }?,
         ## Enable this option to preserve any regions in your
         ## mesh (i.e. those specified by region_ids).
         ## Also, any prescribed fields using region_ids will be
         ## reinitialised using them on the new mesh.
         ##
         ## Therefore this is a required option if you want your
         ## prescribed region_id fields to survive adapts!
         ## Obviously this does not apply to initial conditions
         ## set using region_ids.
         element preserve_mesh_regions {
            comment
         }?

      }
   )
      

consistent_interpolation =
   (
      ## Basis function interpolation.
      ## The standard algorithm. It is quick
      ## and bounded, but non-conservative and dissipative.
      ## All other algorithms require construction of a supermesh.
      element consistent_interpolation {
        empty
      }
   )   
pseudo_consistent_interpolation =
   (
      ## Basis function pseudo-interpolation, with averaging for nodes on
      ## element boundaries. This can accept a discontinuous input, but always
      ## gives a continuous output. It is strong recommended that you <b>use
      ## interpolation_galerkin</b> instead of this interpolation method.
      ##
      ## The distance in ideal space from the boundary where averaging is
      ## applied is currently hard coded to 1.0e3 * epsilon(0.0).
      element pseudo_consistent_interpolation {
         comment
      }
   )
grandy_interpolation =
   (
      ## Grandy interpolation. Conservative, but highly diffusive.
      ## See doi:10.1006/jcph.1998.6125 .
      element grandy_interpolation {
        empty
      }
   )

CVgalerkin_interpolation =
   (
      ## Galerkin interpolation for control volume fields. Conservative
      ## and higher order. Not yet tested in parallel.
      element CVgalerkin_interpolation {
        empty
      }
   )
   
interpolation_algorithm_disabled =
   (
      ## Disable interpolation
      element no_interpolation {
        comment
      }
   )

interpolation_algorithm_scalar =
    (
      consistent_interpolation|
      pseudo_consistent_interpolation|
      CVgalerkin_interpolation|
      ## Galerkin projection. By default, conservative, non-dissipative and
      ## non-bounded. The most accurate choice, in the sense of minimising
      ## the L2 norm of the residual
      element galerkin_projection {
        galerkin_projection_scalar
      }|
      grandy_interpolation
    )
    
interpolation_algorithm_scalar_full = interpolation_algorithm_scalar
interpolation_algorithm_scalar_full |= interpolation_algorithm_disabled
    
interpolation_algorithm_vector_full = interpolation_algorithm_vector
interpolation_algorithm_vector_full |= interpolation_algorithm_disabled
    
interpolation_algorithm_vector =
    (
      consistent_interpolation|
      pseudo_consistent_interpolation|
      ## Galerkin projection. By default, conservative, non-dissipative and
      ## non-bounded. The most accurate choice, in the sense of minimising
      ## the L2 norm of the residual
      element galerkin_projection {
        galerkin_projection_vector
      }|
      grandy_interpolation|
      ## Helmholtz decomposed projection of the Coriolis acceleration. Suitable
      ## only for Velocity fields. This interpolation happens in three stages:
      ##
      ##   1. Computation of Coriolis and its Helmholtz decomposition
      ##   2. Interpolation of the Helmholtz decomposition
      ##   3. Formation of Coriolis from the decomposition and inversion for velocity
      ##
      ## Notes for balance preserving interpolants:
      ##
      ## The spatial discretisation options for the conservative potential
      ## must match those used for Pressure.
      ##
      ## With weak boundary conditions for the conservative potential, if
      ## no-normal-flow is satisfied on the boundary this must be preserved by
      ## the interpolation. For 2D domains this can be achieved by using
      ## consistent interpolation for the conservative potential or, for more
      ## general interpolants, by performing a further decomposition of the
      ## conservative potential (see
      ## geostrophic_interpolation/conservative_potential/decompose).
      ##
      ## For shallow-water modelling the interpolants for layer thickness and
      ## the conservative potential must be identical and degree one
      ## homogenenous (see
      ## geostrophic_interpolation/conservative_potential/project_pressure/scale_factor).
      element geostrophic_interpolation {
        ## Options relating to the Coriolis acceleration
        element coriolis {
           (
               ## The mesh used for the Coriolis acceleration. Defaults to the
               ## Velocity mesh if not supplied.
               element mesh {
                  attribute name { "VelocityMesh" }
               }|
               ## The mesh used for the Coriolis acceleration. Defaults to the
               ## Velocity mesh if not supplied.
               element mesh {
                  attribute name { "PressureMesh" }
               }|
               ## The mesh used for the Coriolis acceleration. Defaults to the
               ## Velocity mesh if not supplied.
               element mesh {
                  attribute name { "CoordinateMesh" }
               }|
               ## The mesh used for the Coriolis acceleration. Defaults to the
               ## Velocity mesh if not supplied.
               element mesh {
                  attribute name { string }
               }
            )?,
            ## Options relating to the diagnostic solve for the Coriolis
            ## acceleration from Velocity on the donor mesh.
            element velocity_to_coriolis {
               galerkin_projection_mass_options?,
               ## Lump the RHS term. Requires Velocity and the Coriolis 
               ## acceleration to be on the same mesh.
               element lump_rhs {
                  comment
               }?,
               comment
            },
            ## Options relating to the diagnostic solve for Velocity from
            ## the Coriolis acceleration on the target mesh.
            element coriolis_to_velocity {
               galerkin_projection_mass_options?,
               ## Lump the RHS term. Requires Velocity and the Coriolis 
               ## acceleration to be on the same mesh.
               element lump_rhs {
                  comment
               }?,
               comment
            },
            comment
        },
        ## Options relating to the conservative potential component of the
        ## Helmholtz decomposition
        element conservative_potential {
           (
              ## The mesh used for the conservative potential. Note that this is
              ## computed using the same method as the pressure projection, and
              ## hence LBB constraints apply.
              element mesh {
                 attribute name { "PressureMesh" }
              }|
              ## The mesh used for the conservative potential. Note that this is
              ## computed using the same method as the pressure projection, and
              ## hence LBB constraints apply.
              element mesh {
                 attribute name { "VelocityMesh" }
              }|
              ## The mesh used for the conservative potential. Note that this is
              ## computed using the same method as the pressure projection, and
              ## hence LBB constraints apply.
              element mesh {
                 attribute name { "CoordinateMesh" }
              }|
              ## The mesh used for the conservative potential. Note that this is
              ## computed using the same method as the pressure projection, and
              ## hence LBB constraints apply.
              element mesh {
                 attribute name { string }
              }
           ),
           ## Spatial discretisation options
           element spatial_discretisation {
              ## Options relating to the mass matrix
              element mass {
                 ## Lump the mass matrix. Required for continuous fields.
                 element lump_mass {
                    comment
                 }?
              },
              ## Use a continuous Galerkin discretisation
              element continuous_galerkin {     
                 ## Integrate the divergence operator by parts
                 element integrate_divergence_by_parts {
                    comment
                 }?,    
                 ## Remove the stabilisation term from the projection operator.
                 ##
                 ## Automatic when not using P1P1.
                 element remove_stabilisation_term {
                    comment
                 }?,
                 comment
              },
              comment
           },
           ## Reference node, at which the solution value is pinned to zero
           element reference_node {
             integer
           }?,
           ## Solver options for the conservative potential calculation
           element solver {
              linear_solver_options_sym
           },
           (
              ## Galerkin projection. By default, conservative, non-dissipative and
              ## non-bounded. The most accurate choice, in the sense of minimising
              ## the L2 norm of the residual
              element galerkin_projection {
                galerkin_projection_honour_strong_bcs,
                continuous_projection,
                supermesh_conservation?,
                comment
              }|
              consistent_interpolation|
              grandy_interpolation
           ),
           (
              ## Supply a Pressure field. This enables better initial guesses for
              ## the decomposition solvers, and also allows decomposed interpolants
              ## for Pressure (see
              ## geostrophic_interpolation/conservative_potential/decompose and
              ## geostrophic_interpolation/conservative_potential/interpolate_boundary).
              element project_pressure {
                 attribute name { "Pressure" },
                 geostrophic_interpolation_project_pressure_scale_factor?,
                 comment
              }|
              ## Supply a Pressure field. This enables better initial guesses for
              ## the decomposition solvers, and also allows decomposed interpolants
              ## for Pressure (see
              ## geostrophic_interpolation/conservative_potential/decompose and
              ## geostrophic_interpolation/conservative_potential/interpolate_boundary).
              element project_pressure {
                 attribute name { "LayerThickness" },
                 geostrophic_interpolation_project_pressure_scale_factor,
                 comment
              }|
              ## Supply a Pressure field. This enables better initial guesses for
              ## the decomposition solvers, and also allows decomposed interpolants
              ## for Pressure (see
              ## geostrophic_interpolation/conservative_potential/decompose and
              ## geostrophic_interpolation/conservative_potential/interpolate_boundary).
              element project_pressure {
                 attribute name { xsd:string },
                 geostrophic_interpolation_project_pressure_scale_factor?,
                 comment
              }       
           )?,
           (
              ## Decompose the conservative potential into a component constant
              ## on the boundary, and a residual.
              ## 
              ## If interpolating Pressure, a similar decomposition is applied
              ## to the Pressure projection.
              ##
              ## This requires the domain to be 2D and simply connected.
              element decompose {
                 (
                    ## Choose a boundary value that minimises the l2 norm of the
                    ## residual
                    element l2_minimised_residual {
                       comment
                    }|
                    ## Use the mean boundary value
                    element boundary_mean {
                       comment
                    }
                    
                 ),
                 ## Solver options for the decomposition
                 element solver {
                    linear_solver_options_sym
                 },
                 comment
              }|
              ## Interpolate the boundary values using consistent interpolation and
              ## use these as a strong Dirichlet boundary condition on the
              ## conservative potential.
              ## 
              ## If interpolating Pressure, a similar boundary condition is applied
              ## to the Pressure projection.
              element interpolate_boundary {
                 comment
              }
           )?,
           comment
        },
        ## Options relating to the non-conservative residual component of the
        ## Helmholz decomposition
        element residual {
           (
              ## Galerkin projection. By default, conservative, non-dissipative and
              ## non-bounded. The most accurate choice, in the sense of minimising
              ## the L2 norm of the residual
              element galerkin_projection {
                continuous_discontinuous_projection,
                supermesh_conservation?,
                comment
              }|
              consistent_interpolation|
              pseudo_consistent_interpolation|
              grandy_interpolation
           ),
           ## Enforce divergence free after the projection
           element enforce_solenoidal {
             comment
           }?,
           comment
        },
        ## If enabled, preconditions the Helmholtz decomposition by solving
        ## for the conservative potential using a geopressure solver. The
        ## projection equation then becomes:
        ##   M f = M f_* + C \phi + C_{gp} \phi_{gp},
        ## where f_* is the coriolis acceleration, f is divergence free, phi is
        ## the conservative potential, phi_gp is the geopressure conservative
        ## potential and:
        ##   C_{gp,ij}^q = \int_Omega N_j \partial_q M_i,
        ## is the geopressure gradient matrix, where N_i are the velocity shape
        ## functions and M_i the geopressure conservative potential shape
        ## functions.
        element geopressure {
           (
              ## The mesh used for the geopressure conservative potential
              element mesh {
                 attribute name { string }
              }
           ),
           ## Reference node, at which the solution value is pinned to zero
           element reference_node {
             integer
           }?,
           ## Solver options for the geopressure conservative potential
           ## calculation
           element solver {
              linear_solver_options_sym
           },
           (
              ## Galerkin projection. By default, conservative, non-dissipative and
              ## non-bounded. The most accurate choice, in the sense of minimising
              ## the L2 norm of the residual
              element galerkin_projection {
                continuous_projection,
                supermesh_conservation?,
                comment
              }|
              consistent_interpolation|
              pseudo_consistent_interpolation|
              grandy_interpolation
           )
        }?,
        ## Options relating to the vertical velocity. Required in 3D.
        element vertical_velocity {
           (
              ## Galerkin projection. By default, conservative, non-dissipative and
              ## non-bounded. The most accurate choice, in the sense of minimising
              ## the L2 norm of the residual
              element galerkin_projection {
                continuous_discontinuous_projection,
                supermesh_conservation?,
                comment
              }|
              consistent_interpolation|
              pseudo_consistent_interpolation|
              grandy_interpolation
           ),
           comment
        }?,
        ## Debug options
        element debug {
           ## If enabled, pre and post interpolation decomposition vtus are
           ## written
           element write_debug_vtus {
              ## Maximum number of debug vtus that will be written before
              ## over-writing existing vtus
              element max_vtu_count {
                 integer
              }?,
              comment
           }?,
           comment
        }?,
        comment
      }
    )

geostrophic_interpolation_project_pressure_scale_factor =
   (
      ## Scale the pressure field by some factor before interpolation,
      ## and apply the inverse after interpolation. This should be set
      ## if the pressure field is divided by some reference value
      ## e.g., in a shallow water with gravity magnitude g, this should
      ## take the value g. This enables better initial guesses for the
      ## decomposition solvers, and means that non degree one
      ## homonogeneous interpolants can be used for the conservative
      ## potential and pressure, while still being balance preserving.
      element scale_factor {
         real
      }
   )
    
galerkin_projection_honour_strong_bcs =
   (
      ## Honour strong Dirichlet boundary conditions in the Galerkin projection
      element honour_strong_boundary_conditions {
        empty
      }
   )
    
galerkin_projection_vector =
    (
      continuous_discontinuous_projection,
      supermesh_free?,
      supermesh_conservation?,
      galerkin_projection_honour_strong_bcs?
    )

galerkin_projection_scalar =
    (
      continuous_discontinuous_projection,
      supermesh_free?,
      supermesh_conservation?,
      galerkin_projection_honour_strong_bcs?
    )

continuous_projection =
   (
      ## Continuous field Galerkin projection.
      ## If the field you are interpolating is continuous, then
      ## a linear solver is required to invert the mass matrix.
      element continuous {
        (
          ## Use a bounded Galerkin projection. Conservative, bounded in the
          ## limit, and minimally dissipative. This algorithm starts with the
          ## Galerkin projection and dissipates it until it achieves
          ## boundedness.
          ## If it does not converge, it may not be exactly bounded.
          ## Note well: this only works for linear fields.
          element bounded {
            attribute name {"Diffuse"},
            ## The number of dissipation iterations attempted to bound the
            ## Galerkin projection.
            element boundedness_iterations {
              integer,
              ## Specify the tolerance to which boundedness is to be tested during the iterations.
              ## Defaults to computer precision if unspecified.
              element tolerance {
                real
              }?
            },
            ## If the bounds on this field are known then they can be set here.
            ## These can either further constrain the limits worked out by the
            ## lumped version of the projection (i.e. to make sure that errors 
            ## don't accumulate with succesive interpolations) or if apply_globally
            ## is set they are just made to be bounded within the bounds globally
            ## (i.e. anything between those bounds is not smoothed).
            element bounds {
              element upper_bound {
                real,
                ## If this is set the upper_bound is used everywhere.
                ## If left unset the upper_bound is only used to constrain
                ## the smoothed bounds calculated by the code
                element apply_globally {
                  empty
                }?,
                ## This field is to be considered as being coupled to another field
                ## such that the sum of the two fields is constrained to be less than
                ## the upper_bound specified above.
                ## 
                ## The relationships between fields are worked out according to their
                ## priority ordering.
                ##
                ## This method is akin to the coupled_cv advection method.
                element coupled {
                  empty
                }?
              }?,
              element lower_bound {
                real,
                ## If this is set the upper_bound is used everywhere.
                ## If left unset the upper_bound is only used to constrain
                ## the smoothed bounds calculated by the code
                element apply_globally {
                  empty
                }?
              }?
            }?,
            ## If, after performing all the boundedness_iterations, the field
            ## is still not bounded then perform surgery to redistribute the
            ## deviations to nodes that have less than their bounds.
            element repair_deviations {
              ## Specify the tolerance to which boundedness is to be tested during the repair.
              ## Defaults to computer precision if unspecified.
              element tolerance {
                real
              }?
            }?
          }|
          ## Use a bounded Galerkin projection. Conservative, bounded in the
          ## limit, and hopefully minimally dissipative. This algorithm starts with the
          ## Galerkin projection and uses the optimisation library Algencan to bound
          ## it by minimising a functional within constraints on boundedness and conservation.
          ## Note well: this only works for linear fields.
          element bounded {
            attribute name {"Algencan"},
            (
              element functional {
                attribute name {"L2"},
                element weight {
                  real
                }?
              }|
              element functional {
                attribute name {"LumpedMassL2"},
                element weight {
                  real
                }?
              }|
              element functional {
                attribute name {"IntegralL2"},
                element weight {
                  real
                }?
              }|
              element functional {
                attribute name { string },
                element weight {
                  real
                }?
              }
            ),
            ## If the bounds on this field are known then they can be set here.
            ## These can either further constrain the limits worked out by the
            ## lumped version of the projection (i.e. to make sure that errors 
            ## don't accumulate with succesive interpolations) or if apply_globally
            ## is set they are just made to be bounded within the bounds globally
            ## (i.e. anything between those bounds is not smoothed).
            element bounds {
              element upper_bound {
                real,
                ## If this is set the upper_bound is used everywhere.
                ## If left unset the upper_bound is only used to constrain
                ## the smoothed bounds calculated by the code
                element apply_globally {
                  empty
                }?,
                ## This field is to be considered as being coupled to another field
                ## such that the sum of the two fields is constrained to be less than
                ## the upper_bound specified above.
                ## 
                ## The relationships between fields are worked out according to their
                ## priority ordering.
                ##
                ## This method is akin to the coupled_cv advection method.
                element coupled {
                  empty
                }?
              }?,
              element lower_bound {
                real,
                ## If this is set the upper_bound is used everywhere.
                ## If left unset the upper_bound is only used to constrain
                ## the smoothed bounds calculated by the code
                element apply_globally {
                  empty
                }?
              }?
            }?
          }
        )?,
        (
          ## Solver options for the linear solve.
          ## This method requires the inversion of a mass matrix. Note that
          ## conservation properties are affected by the tolerance of the
          ## linear solve.
          element solver {
            linear_solver_options_sym
          }|
          ## Lump the mass matrix on the left hand side of the galerkin projection.
          ## Hence solver options aren't necessary.
          ##
          ## This is much more diffusive than a non-lumped Galerkin projection
          ## for only a minimal saving in computational cost.
          element lump_mass_matrix {
            empty
          }
        )
      }
   )

continuous_discontinuous_projection =
    (
      continuous_projection|
      ## Discontinuous field Galerkin projection.
      ## In this case, no linear solver is required to invert the mass matrix.
      element discontinuous {
        empty
      }
    )
    
supermesh_free =
    ## Enables a supermesh free Galerkin projection. Uses incomplete
    ## quadrature, and hence is not conservative.
    element supermesh_free {
      empty
    }
    
supermesh_conservation =
      ## Options for checking the supermesh conservation properties
      element supermesh_conservation {
        ## Specify the fraction of the original elemental area/volume
        ## to be used to check the conservation of the supermesh.
        ##
        ## Since all fields are supermeshed together the minimum tolerance
        ## specified over all fields will be used.
        ##
        ## Defaults to 0.001 if unspecified.
        ## i.e. 0.1% of the area/volume of an element in the new mesh may
        ## be lost without warning or attempts to fix (if compiled with cgal)
        ## during the construction of the supermesh between the old
        ## and new meshes.
        element tolerance {
          real
        }?,
        ## Compute the field integral after the interpolation and print the relative
        ## mass loss to the logfile (level 2 verbosity).
        ##
        ## Note this is a post interpolation step and offers no chance of
        ## fixing the conservation error (unlike the tolerance above if compiled
        ## with cgal)
        element print_field_integral {
          ## Relative tolerance with which to test the conservation of the field
          ## integral.  If the conservation fails this tolerance a warning is issued
          ## (level 0 verbosity) and vtus containing the field are output.
          element tolerance {
            real
          }
        }?
      }

mesh_adaptivity_options =
   element mesh_adaptivity {
      (
         hr_adaptivity
      )?
   }

gradation_options_full = disable_gradation
gradation_options_full |= gradation_options

gradation_options =
  (
    ## Gradation constrains the jump
    ## in desired edge lengths along an edge, i.e.
    ## it controls how fast the mesh size may change.
    element enable_gradation {
        ## The gradation parameter. Must be a real >= 1.0.
        ##
        ## The gradation parameter constrains the jump
        ## in desired edge lengths along an edge, i.e.
        ## it controls how fast the mesh size may change.
        ## A constant of 1.0 enforces a mesh of constant
        ## edge length everywhere. A value of 2.0 would
        ## allow the element size to double from element
        ## to element. The default value is 1.5.
        element gradation_parameter {
          real
        }?
    }|
    ## Anisotropic gradation algorithm, allowing for
    ## anisotropic bounds on the gradient of the sizing
    ## function.
    element anisotropic_gradation {
      ## Gamma is the tensor field that contains
      ## the bounds on the edge length specified by the error metric.
      element tensor_field {
        attribute name { "Gamma" },
        element anisotropic_symmetric {
          input_choice_real_dim_symmetric_tensor
        }
      }
    }
  )

disable_gradation = 
  (
    ## Gradation constrains the jump
    ## in desired edge lengths along an edge, i.e.
    ## it controls how fast the mesh size may change.
    element disable_gradation {
        empty
    }
  )
