<?xml version='1.0' encoding='utf-8'?>
<testproblem>
  <name>Advection</name>
  <owner userid="jefferson.gomes"/>
  <tags>inertia mpml advection</tags>
  <problem_definition length="short" nprocs="1">
    <command_line>../../../bin/icferst Advection_SinglePhase_Adaptive.mpml
../../../bin/icferst Advection_SinglePhase_Unstructured.mpml
../../../bin/icferst Advection_Square_New.mpml</command_line>
  </problem_definition>
  <variables>
    <variable name="solvers_converged" language="python">import os
files = os.listdir("./")
solvers_converged = not "matrixdump" in files and not "matrixdump.info" in files</variable>
    <variable name="Temp_Adapt_Integral_Max" language="python">from fluidity_tools import stat_parser
s = stat_parser("Advection_SinglePhase_Adaptive.stat")
Temp_Adapt_Integral_Max = max(s["phase1"]["Temperature"]["integral"])</variable>
    <variable name="TempRef_Adapt_Integral_Max" language="python">from fluidity_tools import stat_parser
s = stat_parser("Advection_SinglePhase_Adaptive.stat")
TempRef_Adapt_Integral_Max = max(s["phase1"]["Temperature_Reference"]["integral"])</variable>
    <variable name="Temp_Adapt_Integral_Final" language="python">from fluidity_tools import stat_parser
s = stat_parser("Advection_SinglePhase_Adaptive.stat")
Temp_Adapt_Integral_Final = s["phase1"]["Temperature"]["integral"][-1]</variable>
    <variable name="TempRef_Adapt_Integral_Final" language="python">from fluidity_tools import stat_parser
s = stat_parser("Advection_SinglePhase_Adaptive.stat")
TempRef_Adapt_Integral_Final = s["phase1"]["Temperature_Reference"]["integral"][-1]</variable>
<variable name="max_vmax_adaptive" language="python">from fluidity_tools import stat_parser as stat
sf = stat("Advection_SinglePhase_Adaptive.stat")
max_vmax_adaptive = max(sf["phase1"]["Velocity%magnitude"]["max"])
</variable>
<variable name="min_vmax_adaptive" language="python">from fluidity_tools import stat_parser as stat
sf = stat("Advection_SinglePhase_Adaptive.stat")
min_vmax_adaptive = min(sf["phase1"]["Velocity%magnitude"]["max"])
</variable>
    <variable name="Temp_Unstruct_Integral_Final" language="python">from fluidity_tools import stat_parser
s = stat_parser("Advection_SinglePhase_Unstructured.stat")
Temp_Unstruct_Integral_Final = s["phase1"]["Temperature"]["integral"][-1]</variable>
    <variable name="TempRef_Unstruct_Integral_Final" language="python">from fluidity_tools import stat_parser
s = stat_parser("Advection_SinglePhase_Unstructured.stat")
TempRef_Unstruct_Integral_Final = s["phase1"]["Temperature_Reference"]["integral"][-1]</variable>
    <variable name="Temp_Unstruct_Integral_Max" language="python">from fluidity_tools import stat_parser
s = stat_parser("Advection_SinglePhase_Unstructured.stat")
Temp_Unstruct_Integral_Max = max(s["phase1"]["Temperature"]["integral"])</variable>
    <variable name="TempRef_Unstruct_Integral_Max" language="python">from fluidity_tools import stat_parser
s = stat_parser("Advection_SinglePhase_Unstructured.stat")
TempRef_Unstruct_Integral_Max = max(s["phase1"]["Temperature_Reference"]["integral"])</variable>
<variable name="max_vmax_unstruct" language="python">from fluidity_tools import stat_parser as stat
sf = stat("Advection_SinglePhase_Unstructured.stat")
max_vmax_unstruct = max(sf["phase1"]["Velocity%magnitude"]["max"])
</variable>
<variable name="min_vmax_unstruct" language="python">from fluidity_tools import stat_parser as stat
sf = stat("Advection_SinglePhase_Unstructured.stat")
min_vmax_unstruct = min(sf["phase1"]["Velocity%magnitude"]["max"])
</variable>
    <variable name="Temp_Square_Integral_Final" language="python">from fluidity_tools import stat_parser
s = stat_parser("Advection_Square_New.stat")
Temp_Square_Integral_Final = s["phase1"]["Temperature"]["integral"][-1]</variable>
    <variable name="TempRef_Square_Integral_Final" language="python">from fluidity_tools import stat_parser
s = stat_parser("Advection_Square_New.stat")
TempRef_Square_Integral_Final = s["phase1"]["Temperature_Reference"]["integral"][-1]</variable>
    <variable name="Temp_Square_Integral_Max" language="python">from fluidity_tools import stat_parser
s = stat_parser("Advection_Square_New.stat")
Temp_Square_Integral_Max = max(s["phase1"]["Temperature"]["integral"])</variable>
    <variable name="TempRef_Square_Integral_Max" language="python">from fluidity_tools import stat_parser
s = stat_parser("Advection_Square_New.stat")
TempRef_Square_Integral_Max = max(s["phase1"]["Temperature_Reference"]["integral"])</variable>
<variable name="max_vmax_square" language="python">from fluidity_tools import stat_parser as stat
sf = stat("Advection_Square_New.stat")
max_vmax_square = max(sf["phase1"]["Velocity%magnitude"]["max"])
</variable>
<variable name="min_vmax_square" language="python">from fluidity_tools import stat_parser as stat
sf = stat("Advection_Square_New.stat")
min_vmax_square = min(sf["phase1"]["Velocity%magnitude"]["max"])
</variable>
  </variables>
  <pass_tests>
    <test name="Solvers converged" language="python">assert(solvers_converged)</test>
    <test name="Adaptive: Temperature Integral Max Comparison is smaller than 0.05" language="python">assert abs(Temp_Adapt_Integral_Max - TempRef_Adapt_Integral_Max) &lt; 0.05</test>
    <test name="Adaptive: Temperature Integral Final Comparison is smaller than 0.1" language="python">assert abs(Temp_Adapt_Integral_Final - TempRef_Adapt_Integral_Final) &lt; 0.1</test>
    <test name="Adaptive: check max velocity magnitude is within 1-1e-6 to 1+1e-6" language="python">assert min_vmax_adaptive &gt; 1-1e-6 and max_vmax_adaptive &lt; 1+1e-6</test>
    <test name="Unstructured: Temperature Integral Max Comparison is smaller than 0.05" language="python">assert abs(Temp_Unstruct_Integral_Max - TempRef_Unstruct_Integral_Max) &lt; 0.05</test>
    <test name="Unstructured: Temperature Integral Final Comparison is smaller than 0.01" language="python">assert abs(Temp_Unstruct_Integral_Final - TempRef_Unstruct_Integral_Final) &lt; 0.01</test>
    <test name="Adaptive: check max velocity magnitude is within 1-1e-6 to 1+1e-6" language="python">assert min_vmax_unstruct &gt; 1-1e-6 and max_vmax_unstruct &lt; 1+1e-6</test>
    <test name="Square Adaptive: Temperature Integral Max Comparison is smaller than 0.075" language="python">assert abs(Temp_Square_Integral_Max - TempRef_Square_Integral_Max) &lt; 0.075</test>
    <test name="Square Adaptive: Temperature Integral Final Comparison is smaller than 0.05" language="python">assert abs(Temp_Square_Integral_Final - TempRef_Square_Integral_Final) &lt; 0.05</test>
    <test name="Adaptive: check max velocity magnitude is within sqrt(2)-1e-6 to sqrt(2)+1e-6" language="python">from math import sqrt 
assert min_vmax_square &gt; sqrt(2)-1e-6 and max_vmax_square &lt; sqrt(2)+1e-6</test>
  </pass_tests>
  <warn_tests/>
</testproblem>
