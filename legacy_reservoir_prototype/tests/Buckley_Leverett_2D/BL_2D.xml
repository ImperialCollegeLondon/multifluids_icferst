<?xml version='1.0' encoding='utf-8'?>
<testproblem>
  <name>BL_2D</name>
  <owner userid="dimitrios.pavlidis"/>
  <tags>mpml</tags>
  <problem_definition length="short" nprocs="1">
    <command_line>cp  BL_2D_P1DGP1_10layers.mpml BL_2D_P1DGP1_20layers.mpml
sed -i 's/_10layers/_20layers/' BL_2D_P1DGP1_20layers.mpml

cp  BL_2D_P1DGP1_10layers.mpml BL_2D_P1DGP1_50layers.mpml
sed -i 's/_10layers/_50layers/' BL_2D_P1DGP1_50layers.mpml

cp  BL_2D_P1DGP2_10layers.mpml BL_2D_P1DGP2_20layers.mpml
sed -i 's/_10layers/_20layers/' BL_2D_P1DGP2_20layers.mpml

cp  BL_2D_P1DGP2_10layers.mpml BL_2D_P1DGP2_50layers.mpml
sed -i 's/_10layers/_50layers/' BL_2D_P1DGP2_50layers.mpml

cp  BL_2D_P1DGP1DG_10layers.mpml BL_2D_P1DGP1DG_20layers.mpml
sed -i 's/_10layers/_20layers/' BL_2D_P1DGP1DG_20layers.mpml

cp  BL_2D_P1DGP1DG_10layers.mpml BL_2D_P1DGP1DG_50layers.mpml
sed -i 's/_10layers/_50layers/' BL_2D_P1DGP1DG_50layers.mpml

../../../bin/multiphase_prototype BL_2D_P1DGP1_10layers.mpml
../../../bin/multiphase_prototype BL_2D_P1DGP1_20layers.mpml
../../../bin/multiphase_prototype BL_2D_P1DGP1_50layers.mpml

../../../bin/multiphase_prototype BL_2D_P1DGP2_10layers.mpml
../../../bin/multiphase_prototype BL_2D_P1DGP2_20layers.mpml
../../../bin/multiphase_prototype BL_2D_P1DGP2_50layers.mpml

../../../bin/multiphase_prototype BL_2D_P1DGP1DG_10layers.mpml
../../../bin/multiphase_prototype BL_2D_P1DGP1DG_20layers.mpml
../../../bin/multiphase_prototype BL_2D_P1DGP1DG_50layers.mpml</command_line>
  </problem_definition>
  <variables>
    <variable name="pvfdr_max_p1dgp1_10layers" language="python">from fluidity_tools import stat_parser as stat
pvfdr_max_p1dgp1_10layers = stat("BL_2D_P1DGP1_10layers.stat")["phase1"]["PhaseVolumeFractionDifferenceRef"]["max"][-1]</variable>
    <variable name="pvfdr_int_p1dgp1_10layers" language="python">from fluidity_tools import stat_parser as stat
pvfdr_int_p1dgp1_10layers = stat("BL_2D_P1DGP1_10layers.stat")["phase1"]["PhaseVolumeFractionDifferenceRef"]["integral"][-1]</variable>
    <variable name="pvfdv_max_p1dgp1_10layers" language="python">from fluidity_tools import stat_parser as stat
pvfdv_max_p1dgp1_10layers = stat("BL_2D_P1DGP1_10layers.stat")["phase1"]["PhaseVolumeFractionDifferenceVtu"]["max"][-1]</variable>
    <variable name="s1_max_p1dgp1_10layers" language="python">from fluidity_tools import stat_parser as stat
s1_max_p1dgp1_10layers = stat("BL_2D_P1DGP1_10layers.stat")["phase1"]["PhaseVolumeFraction"]["max"][-1]</variable>
    <variable name="s1_min_p1dgp1_10layers" language="python">from fluidity_tools import stat_parser as stat
s1_min_p1dgp1_10layers = stat("BL_2D_P1DGP1_10layers.stat")["phase1"]["PhaseVolumeFraction"]["min"][-1]</variable>
    <variable name="s2_max_p1dgp1_10layers" language="python">from fluidity_tools import stat_parser as stat
s2_max_p1dgp1_10layers = stat("BL_2D_P1DGP1_10layers.stat")["phase2"]["PhaseVolumeFraction"]["max"][-1]</variable>
    <variable name="s2_min_p1dgp1_10layers" language="python">from fluidity_tools import stat_parser as stat
s2_min_p1dgp1_10layers = stat("BL_2D_P1DGP1_10layers.stat")["phase2"]["PhaseVolumeFraction"]["min"][-1]</variable>
    <variable name="s_max_p1dgp1_10layers" language="python">from fluidity_tools import stat_parser as stat
s_max_p1dgp1_10layers = stat("BL_2D_P1DGP1_10layers.stat")["phase1"]["PhaseVolumeFractionSum"]["max"][-1]</variable>
    <variable name="s_min_p1dgp1_10layers" language="python">from fluidity_tools import stat_parser as stat
s_min_p1dgp1_10layers = stat("BL_2D_P1DGP1_10layers.stat")["phase1"]["PhaseVolumeFractionSum"]["min"][-1]</variable>
    <variable name="pvfdr_max_p1dgp1_20layers" language="python">from fluidity_tools import stat_parser as stat
pvfdr_max_p1dgp1_20layers = stat("BL_2D_P1DGP1_20layers.stat")["phase1"]["PhaseVolumeFractionDifferenceRef"]["max"][-1]</variable>
    <variable name="pvfdr_int_p1dgp1_20layers" language="python">from fluidity_tools import stat_parser as stat
pvfdr_int_p1dgp1_20layers = stat("BL_2D_P1DGP1_20layers.stat")["phase1"]["PhaseVolumeFractionDifferenceRef"]["integral"][-1]</variable>
    <variable name="pvfdv_max_p1dgp1_20layers" language="python">from fluidity_tools import stat_parser as stat
pvfdv_max_p1dgp1_20layers = stat("BL_2D_P1DGP1_20layers.stat")["phase1"]["PhaseVolumeFractionDifferenceVtu"]["max"][-1]</variable>
    <variable name="s1_max_p1dgp1_20layers" language="python">from fluidity_tools import stat_parser as stat
s1_max_p1dgp1_20layers = stat("BL_2D_P1DGP1_20layers.stat")["phase1"]["PhaseVolumeFraction"]["max"][-1]</variable>
    <variable name="s1_min_p1dgp1_20layers" language="python">from fluidity_tools import stat_parser as stat
s1_min_p1dgp1_20layers = stat("BL_2D_P1DGP1_20layers.stat")["phase1"]["PhaseVolumeFraction"]["min"][-1]</variable>
    <variable name="s2_max_p1dgp1_20layers" language="python">from fluidity_tools import stat_parser as stat
s2_max_p1dgp1_20layers = stat("BL_2D_P1DGP1_20layers.stat")["phase2"]["PhaseVolumeFraction"]["max"][-1]</variable>
    <variable name="s2_min_p1dgp1_20layers" language="python">from fluidity_tools import stat_parser as stat
s2_min_p1dgp1_20layers = stat("BL_2D_P1DGP1_20layers.stat")["phase2"]["PhaseVolumeFraction"]["min"][-1]</variable>
    <variable name="s_max_p1dgp1_20layers" language="python">from fluidity_tools import stat_parser as stat
s_max_p1dgp1_20layers = stat("BL_2D_P1DGP1_20layers.stat")["phase1"]["PhaseVolumeFractionSum"]["max"][-1]</variable>
    <variable name="s_min_p1dgp1_20layers" language="python">from fluidity_tools import stat_parser as stat
s_min_p1dgp1_20layers = stat("BL_2D_P1DGP1_20layers.stat")["phase1"]["PhaseVolumeFractionSum"]["min"][-1]</variable>
    <variable name="pvfdr_max_p1dgp1_50layers" language="python">from fluidity_tools import stat_parser as stat
pvfdr_max_p1dgp1_50layers = stat("BL_2D_P1DGP1_50layers.stat")["phase1"]["PhaseVolumeFractionDifferenceRef"]["max"][-1]</variable>
    <variable name="pvfdr_int_p1dgp1_50layers" language="python">from fluidity_tools import stat_parser as stat
pvfdr_int_p1dgp1_50layers = stat("BL_2D_P1DGP1_50layers.stat")["phase1"]["PhaseVolumeFractionDifferenceRef"]["integral"][-1]</variable>
    <variable name="pvfdv_max_p1dgp1_50layers" language="python">from fluidity_tools import stat_parser as stat
pvfdv_max_p1dgp1_50layers = stat("BL_2D_P1DGP1_50layers.stat")["phase1"]["PhaseVolumeFractionDifferenceVtu"]["max"][-1]</variable>
    <variable name="s1_max_p1dgp1_50layers" language="python">from fluidity_tools import stat_parser as stat
s1_max_p1dgp1_50layers = stat("BL_2D_P1DGP1_50layers.stat")["phase1"]["PhaseVolumeFraction"]["max"][-1]</variable>
    <variable name="s1_min_p1dgp1_50layers" language="python">from fluidity_tools import stat_parser as stat
s1_min_p1dgp1_50layers = stat("BL_2D_P1DGP1_50layers.stat")["phase1"]["PhaseVolumeFraction"]["min"][-1]</variable>
    <variable name="s2_max_p1dgp1_50layers" language="python">from fluidity_tools import stat_parser as stat
s2_max_p1dgp1_50layers = stat("BL_2D_P1DGP1_50layers.stat")["phase2"]["PhaseVolumeFraction"]["max"][-1]</variable>
    <variable name="s2_min_p1dgp1_50layers" language="python">from fluidity_tools import stat_parser as stat
s2_min_p1dgp1_50layers = stat("BL_2D_P1DGP1_50layers.stat")["phase2"]["PhaseVolumeFraction"]["min"][-1]</variable>
    <variable name="s_max_p1dgp1_50layers" language="python">from fluidity_tools import stat_parser as stat
s_max_p1dgp1_50layers = stat("BL_2D_P1DGP1_50layers.stat")["phase1"]["PhaseVolumeFractionSum"]["max"][-1]</variable>
    <variable name="s_min_p1dgp1_50layers" language="python">from fluidity_tools import stat_parser as stat
s_min_p1dgp1_50layers = stat("BL_2D_P1DGP1_50layers.stat")["phase1"]["PhaseVolumeFractionSum"]["min"][-1]</variable>
    <variable name="pvfdr_max_p1dgp2_10layers" language="python">from fluidity_tools import stat_parser as stat
pvfdr_max_p1dgp2_10layers = stat("BL_2D_P1DGP2_10layers.stat")["phase1"]["PhaseVolumeFractionDifferenceRef"]["max"][-1]</variable>
    <variable name="pvfdr_int_p1dgp2_10layers" language="python">from fluidity_tools import stat_parser as stat
pvfdr_int_p1dgp2_10layers = stat("BL_2D_P1DGP2_10layers.stat")["phase1"]["PhaseVolumeFractionDifferenceRef"]["integral"][-1]</variable>
    <variable name="pvfdv_max_p1dgp2_10layers" language="python">from fluidity_tools import stat_parser as stat
pvfdv_max_p1dgp2_10layers = stat("BL_2D_P1DGP2_10layers.stat")["phase1"]["PhaseVolumeFractionDifferenceVtu"]["max"][-1]</variable>
    <variable name="s1_max_p1dgp2_10layers" language="python">from fluidity_tools import stat_parser as stat
s1_max_p1dgp2_10layers = stat("BL_2D_P1DGP2_10layers.stat")["phase1"]["PhaseVolumeFraction"]["max"][-1]</variable>
    <variable name="s1_min_p1dgp2_10layers" language="python">from fluidity_tools import stat_parser as stat
s1_min_p1dgp2_10layers = stat("BL_2D_P1DGP2_10layers.stat")["phase1"]["PhaseVolumeFraction"]["min"][-1]</variable>
    <variable name="s2_max_p1dgp2_10layers" language="python">from fluidity_tools import stat_parser as stat
s2_max_p1dgp2_10layers = stat("BL_2D_P1DGP2_10layers.stat")["phase2"]["PhaseVolumeFraction"]["max"][-1]</variable>
    <variable name="s2_min_p1dgp2_10layers" language="python">from fluidity_tools import stat_parser as stat
s2_min_p1dgp2_10layers = stat("BL_2D_P1DGP2_10layers.stat")["phase2"]["PhaseVolumeFraction"]["min"][-1]</variable>
    <variable name="s_max_p1dgp2_10layers" language="python">from fluidity_tools import stat_parser as stat
s_max_p1dgp2_10layers = stat("BL_2D_P1DGP2_10layers.stat")["phase1"]["PhaseVolumeFractionSum"]["max"][-1]</variable>
    <variable name="s_min_p1dgp2_10layers" language="python">from fluidity_tools import stat_parser as stat
s_min_p1dgp2_10layers = stat("BL_2D_P1DGP2_10layers.stat")["phase1"]["PhaseVolumeFractionSum"]["min"][-1]</variable>
    <variable name="pvfdr_max_p1dgp2_20layers" language="python">from fluidity_tools import stat_parser as stat
pvfdr_max_p1dgp2_20layers = stat("BL_2D_P1DGP2_20layers.stat")["phase1"]["PhaseVolumeFractionDifferenceRef"]["max"][-1]</variable>
    <variable name="pvfdr_int_p1dgp2_20layers" language="python">from fluidity_tools import stat_parser as stat
pvfdr_int_p1dgp2_20layers = stat("BL_2D_P1DGP2_20layers.stat")["phase1"]["PhaseVolumeFractionDifferenceRef"]["integral"][-1]</variable>
    <variable name="pvfdv_max_p1dgp2_20layers" language="python">from fluidity_tools import stat_parser as stat
pvfdv_max_p1dgp2_20layers = stat("BL_2D_P1DGP2_20layers.stat")["phase1"]["PhaseVolumeFractionDifferenceVtu"]["max"][-1]</variable>
    <variable name="s1_max_p1dgp2_20layers" language="python">from fluidity_tools import stat_parser as stat
s1_max_p1dgp2_20layers = stat("BL_2D_P1DGP2_20layers.stat")["phase1"]["PhaseVolumeFraction"]["max"][-1]</variable>
    <variable name="s1_min_p1dgp2_20layers" language="python">from fluidity_tools import stat_parser as stat
s1_min_p1dgp2_20layers = stat("BL_2D_P1DGP2_20layers.stat")["phase1"]["PhaseVolumeFraction"]["min"][-1]</variable>
    <variable name="s2_max_p1dgp2_20layers" language="python">from fluidity_tools import stat_parser as stat
s2_max_p1dgp2_20layers = stat("BL_2D_P1DGP2_20layers.stat")["phase2"]["PhaseVolumeFraction"]["max"][-1]</variable>
    <variable name="s2_min_p1dgp2_20layers" language="python">from fluidity_tools import stat_parser as stat
s2_min_p1dgp2_20layers = stat("BL_2D_P1DGP2_20layers.stat")["phase2"]["PhaseVolumeFraction"]["min"][-1]</variable>
    <variable name="s_max_p1dgp2_20layers" language="python">from fluidity_tools import stat_parser as stat
s_max_p1dgp2_20layers = stat("BL_2D_P1DGP2_20layers.stat")["phase1"]["PhaseVolumeFractionSum"]["max"][-1]</variable>
    <variable name="s_min_p1dgp2_20layers" language="python">from fluidity_tools import stat_parser as stat
s_min_p1dgp2_20layers = stat("BL_2D_P1DGP2_20layers.stat")["phase1"]["PhaseVolumeFractionSum"]["min"][-1]</variable>
    <variable name="pvfdr_max_p1dgp2_50layers" language="python">from fluidity_tools import stat_parser as stat
pvfdr_max_p1dgp2_50layers = stat("BL_2D_P1DGP2_50layers.stat")["phase1"]["PhaseVolumeFractionDifferenceRef"]["max"][-1]</variable>
    <variable name="pvfdr_int_p1dgp2_50layers" language="python">from fluidity_tools import stat_parser as stat
pvfdr_int_p1dgp2_50layers = stat("BL_2D_P1DGP2_50layers.stat")["phase1"]["PhaseVolumeFractionDifferenceRef"]["integral"][-1]</variable>
    <variable name="pvfdv_max_p1dgp2_50layers" language="python">from fluidity_tools import stat_parser as stat
pvfdv_max_p1dgp2_50layers = stat("BL_2D_P1DGP2_50layers.stat")["phase1"]["PhaseVolumeFractionDifferenceVtu"]["max"][-1]</variable>
    <variable name="s1_max_p1dgp2_50layers" language="python">from fluidity_tools import stat_parser as stat
s1_max_p1dgp2_50layers = stat("BL_2D_P1DGP2_50layers.stat")["phase1"]["PhaseVolumeFraction"]["max"][-1]</variable>
    <variable name="s1_min_p1dgp2_50layers" language="python">from fluidity_tools import stat_parser as stat
s1_min_p1dgp2_50layers = stat("BL_2D_P1DGP2_50layers.stat")["phase1"]["PhaseVolumeFraction"]["min"][-1]</variable>
    <variable name="s2_max_p1dgp2_50layers" language="python">from fluidity_tools import stat_parser as stat
s2_max_p1dgp2_50layers = stat("BL_2D_P1DGP2_50layers.stat")["phase2"]["PhaseVolumeFraction"]["max"][-1]</variable>
    <variable name="s2_min_p1dgp2_50layers" language="python">from fluidity_tools import stat_parser as stat
s2_min_p1dgp2_50layers = stat("BL_2D_P1DGP2_50layers.stat")["phase2"]["PhaseVolumeFraction"]["min"][-1]</variable>
    <variable name="s_max_p1dgp2_50layers" language="python">from fluidity_tools import stat_parser as stat
s_max_p1dgp2_50layers = stat("BL_2D_P1DGP2_50layers.stat")["phase1"]["PhaseVolumeFractionSum"]["max"][-1]</variable>
    <variable name="s_min_p1dgp2_50layers" language="python">from fluidity_tools import stat_parser as stat
s_min_p1dgp2_50layers = stat("BL_2D_P1DGP2_50layers.stat")["phase1"]["PhaseVolumeFractionSum"]["min"][-1]</variable>
    <variable name="pvfdr_max_p1dgp1dg_10layers" language="python">from fluidity_tools import stat_parser as stat
pvfdr_max_p1dgp1dg_10layers = stat("BL_2D_P1DGP1DG_10layers.stat")["phase1"]["PhaseVolumeFractionDifferenceRef"]["max"][-1]</variable>
    <variable name="pvfdr_int_p1dgp1dg_10layers" language="python">from fluidity_tools import stat_parser as stat
pvfdr_int_p1dgp1dg_10layers = stat("BL_2D_P1DGP1DG_10layers.stat")["phase1"]["PhaseVolumeFractionDifferenceRef"]["integral"][-1]</variable>
    <variable name="pvfdv_max_p1dgp1dg_10layers" language="python">from fluidity_tools import stat_parser as stat
pvfdv_max_p1dgp1dg_10layers = stat("BL_2D_P1DGP1DG_10layers.stat")["phase1"]["PhaseVolumeFractionDifferenceVtu"]["max"][-1]</variable>
    <variable name="s1_max_p1dgp1dg_10layers" language="python">from fluidity_tools import stat_parser as stat
s1_max_p1dgp1dg_10layers = stat("BL_2D_P1DGP1DG_10layers.stat")["phase1"]["PhaseVolumeFraction"]["max"][-1]</variable>
    <variable name="s1_min_p1dgp1dg_10layers" language="python">from fluidity_tools import stat_parser as stat
s1_min_p1dgp1dg_10layers = stat("BL_2D_P1DGP1DG_10layers.stat")["phase1"]["PhaseVolumeFraction"]["min"][-1]</variable>
    <variable name="s2_max_p1dgp1dg_10layers" language="python">from fluidity_tools import stat_parser as stat
s2_max_p1dgp1dg_10layers = stat("BL_2D_P1DGP1DG_10layers.stat")["phase2"]["PhaseVolumeFraction"]["max"][-1]</variable>
    <variable name="s2_min_p1dgp1dg_10layers" language="python">from fluidity_tools import stat_parser as stat
s2_min_p1dgp1dg_10layers = stat("BL_2D_P1DGP1DG_10layers.stat")["phase2"]["PhaseVolumeFraction"]["min"][-1]</variable>
    <variable name="s_max_p1dgp1dg_10layers" language="python">from fluidity_tools import stat_parser as stat
s_max_p1dgp1dg_10layers = stat("BL_2D_P1DGP1DG_10layers.stat")["phase1"]["PhaseVolumeFractionSum"]["max"][-1]</variable>
    <variable name="s_min_p1dgp1dg_10layers" language="python">from fluidity_tools import stat_parser as stat
s_min_p1dgp1dg_10layers = stat("BL_2D_P1DGP1DG_10layers.stat")["phase1"]["PhaseVolumeFractionSum"]["min"][-1]</variable>
    <variable name="pvfdr_max_p1dgp1dg_20layers" language="python">from fluidity_tools import stat_parser as stat
pvfdr_max_p1dgp1dg_20layers = stat("BL_2D_P1DGP1DG_20layers.stat")["phase1"]["PhaseVolumeFractionDifferenceRef"]["max"][-1]</variable>
    <variable name="pvfdr_int_p1dgp1dg_20layers" language="python">from fluidity_tools import stat_parser as stat
pvfdr_int_p1dgp1dg_20layers = stat("BL_2D_P1DGP1DG_20layers.stat")["phase1"]["PhaseVolumeFractionDifferenceRef"]["integral"][-1]</variable>
    <variable name="pvfdv_max_p1dgp1dg_20layers" language="python">from fluidity_tools import stat_parser as stat
pvfdv_max_p1dgp1dg_20layers = stat("BL_2D_P1DGP1DG_20layers.stat")["phase1"]["PhaseVolumeFractionDifferenceVtu"]["max"][-1]</variable>
    <variable name="s1_max_p1dgp1dg_20layers" language="python">from fluidity_tools import stat_parser as stat
s1_max_p1dgp1dg_20layers = stat("BL_2D_P1DGP1DG_20layers.stat")["phase1"]["PhaseVolumeFraction"]["max"][-1]</variable>
    <variable name="s1_min_p1dgp1dg_20layers" language="python">from fluidity_tools import stat_parser as stat
s1_min_p1dgp1dg_20layers = stat("BL_2D_P1DGP1DG_20layers.stat")["phase1"]["PhaseVolumeFraction"]["min"][-1]</variable>
    <variable name="s2_max_p1dgp1dg_20layers" language="python">from fluidity_tools import stat_parser as stat
s2_max_p1dgp1dg_20layers = stat("BL_2D_P1DGP1DG_20layers.stat")["phase2"]["PhaseVolumeFraction"]["max"][-1]</variable>
    <variable name="s2_min_p1dgp1dg_20layers" language="python">from fluidity_tools import stat_parser as stat
s2_min_p1dgp1dg_20layers = stat("BL_2D_P1DGP1DG_20layers.stat")["phase2"]["PhaseVolumeFraction"]["min"][-1]</variable>
    <variable name="s_max_p1dgp1dg_20layers" language="python">from fluidity_tools import stat_parser as stat
s_max_p1dgp1dg_20layers = stat("BL_2D_P1DGP1DG_20layers.stat")["phase1"]["PhaseVolumeFractionSum"]["max"][-1]</variable>
    <variable name="s_min_p1dgp1dg_20layers" language="python">from fluidity_tools import stat_parser as stat
s_min_p1dgp1dg_20layers = stat("BL_2D_P1DGP1DG_20layers.stat")["phase1"]["PhaseVolumeFractionSum"]["min"][-1]</variable>
    <variable name="pvfdr_max_p1dgp1dg_50layers" language="python">from fluidity_tools import stat_parser as stat
pvfdr_max_p1dgp1dg_50layers = stat("BL_2D_P1DGP1DG_50layers.stat")["phase1"]["PhaseVolumeFractionDifferenceRef"]["max"][-1]</variable>
    <variable name="pvfdr_int_p1dgp1dg_50layers" language="python">from fluidity_tools import stat_parser as stat
pvfdr_int_p1dgp1dg_50layers = stat("BL_2D_P1DGP1DG_50layers.stat")["phase1"]["PhaseVolumeFractionDifferenceRef"]["integral"][-1]</variable>
    <variable name="pvfdv_max_p1dgp1dg_50layers" language="python">from fluidity_tools import stat_parser as stat
pvfdv_max_p1dgp1dg_50layers = stat("BL_2D_P1DGP1DG_50layers.stat")["phase1"]["PhaseVolumeFractionDifferenceVtu"]["max"][-1]</variable>
    <variable name="s1_max_p1dgp1dg_50layers" language="python">from fluidity_tools import stat_parser as stat
s1_max_p1dgp1dg_50layers = stat("BL_2D_P1DGP1DG_50layers.stat")["phase1"]["PhaseVolumeFraction"]["max"][-1]</variable>
    <variable name="s1_min_p1dgp1dg_50layers" language="python">from fluidity_tools import stat_parser as stat
s1_min_p1dgp1dg_50layers = stat("BL_2D_P1DGP1DG_50layers.stat")["phase1"]["PhaseVolumeFraction"]["min"][-1]</variable>
    <variable name="s2_max_p1dgp1dg_50layers" language="python">from fluidity_tools import stat_parser as stat
s2_max_p1dgp1dg_50layers = stat("BL_2D_P1DGP1DG_50layers.stat")["phase2"]["PhaseVolumeFraction"]["max"][-1]</variable>
    <variable name="s2_min_p1dgp1dg_50layers" language="python">from fluidity_tools import stat_parser as stat
s2_min_p1dgp1dg_50layers = stat("BL_2D_P1DGP1DG_50layers.stat")["phase2"]["PhaseVolumeFraction"]["min"][-1]</variable>
    <variable name="s_max_p1dgp1dg_50layers" language="python">from fluidity_tools import stat_parser as stat
s_max_p1dgp1dg_50layers = stat("BL_2D_P1DGP1DG_50layers.stat")["phase1"]["PhaseVolumeFractionSum"]["max"][-1]</variable>
    <variable name="s_min_p1dgp1dg_50layers" language="python">from fluidity_tools import stat_parser as stat
s_min_p1dgp1dg_50layers = stat("BL_2D_P1DGP1DG_50layers.stat")["phase1"]["PhaseVolumeFractionSum"]["min"][-1]</variable>
  </variables>
  <pass_tests>
    <test name="Assert max absolute regression difference for P1DG-P1 10-layer mesh is less than 1.0e-10" language="python">assert(abs(pvfdv_max_p1dgp1_10layers) &lt; 1.0e-4)</test>
    <test name="Assert max absolute regression difference for P1DG-P1 20-layer mesh is less than 1.0e-10" language="python">assert(abs(pvfdv_max_p1dgp1_20layers) &lt; 1.0e-4)</test>
    <test name="Assert max absolute regression difference for P1DG-P1 50-layer mesh is less than 1.0e-10" language="python">assert(abs(pvfdv_max_p1dgp1_50layers) &lt; 1.0e-3)</test>
    <test name="Assert max absolute regression difference for P1DG-P2 10-layer mesh is less than 1.0e-10" language="python">assert(abs(pvfdv_max_p1dgp2_10layers) &lt; 1.0e-4)</test>
    <test name="Assert max absolute regression difference for P1DG-P2 20-layer mesh is less than 1.0e-10" language="python">assert(abs(pvfdv_max_p1dgp2_20layers) &lt; 1.0e-3)</test>
    <test name="Assert max absolute regression difference for P1DG-P2 50-layer mesh is less than 1.0e-10" language="python">assert(abs(pvfdv_max_p1dgp2_50layers) &lt; 1.0e-3)</test>
    <test name="Assert max absolute regression difference for P1DG-P1DG 10-layer mesh is less than 1.0e-10" language="python">assert(abs(pvfdv_max_p1dgp1dg_10layers) &lt; 1.0e-4)</test>
    <test name="Assert max absolute regression difference for P1DG-P1DG 20-layer mesh is less than 1.0e-10" language="python">assert(abs(pvfdv_max_p1dgp1dg_20layers) &lt; 1.0e-4)</test>
    <test name="Assert max absolute regression difference for P1DG-P1DG 50-layer mesh is less than 1.0e-10" language="python">assert(abs(pvfdv_max_p1dgp1dg_50layers) &lt; 1.0e-1)</test>
    <test name="Assert max absolute analytic_error for P1DG-P1 10-layer mesh is less than..." language="python">assert(abs(pvfdr_max_p1dgp1_10layers) &lt; 0.201047350517 + 1.0e-4)</test>
    <test name="Assert integral absolute analytic_error for P1DG-P1 10-layer mesh is less than..." language="python">assert(abs(pvfdr_int_p1dgp1_10layers) &lt; 0.0129084481017 + 1.0e-4)</test>
    <test name="Assert max absolute analytic_error for P1DG-P1 20-layer mesh is less than..." language="python">assert(abs(pvfdr_max_p1dgp1_20layers) &lt; 0.180492468198 + 1.0e-4)</test>
    <test name="Assert integral absolute analytic_error for P1DG-P1 20-layer mesh is less than..." language="python">assert(abs(pvfdr_int_p1dgp1_20layers) &lt; 0.00700305450084 + 1.0e-4)</test>
    <test name="Assert max absolute analytic_error for P1DG-P1 50-layer mesh is less than..." language="python">assert(abs(pvfdr_max_p1dgp1_50layers) &lt; 0.144737320557 + 1.0e-4)</test>
    <test name="Assert integral absolute analytic_error for P1DG-P1 50-layer mesh is less than..." language="python">assert(abs(pvfdr_int_p1dgp1_50layers) &lt; 0.00307470480228 + 1.0e-4)</test>
    <test name="Assert max absolute analytic_error for P1DG-P2 10-layer mesh is less than..." language="python">assert(abs(pvfdr_max_p1dgp2_10layers) &lt; 0.301032834026 + 1.0e-4)</test>
    <test name="Assert integral absolute analytic_error for P1DG-P2 10-layer mesh is less than..." language="python">assert(abs(pvfdr_int_p1dgp2_10layers) &lt; 0.00731351208984 + 1.0e-4)</test>
    <test name="Assert max absolute analytic_error for P1DG-P2 20-layer mesh is less than..." language="python">assert(abs(pvfdr_max_p1dgp2_20layers) &lt; 0.269002834201 + 1.0e-4)</test>
    <test name="Assert integral absolute analytic_error for P1DG-P2 20-layer mesh is less than..." language="python">assert(abs(pvfdr_int_p1dgp2_20layers) &lt; 0.00435509642798 + 1.0e-4)</test>
    <test name="Assert max absolute analytic_error for P1DG-P2 50-layer mesh is less than..." language="python">assert(abs(pvfdr_max_p1dgp2_50layers) &lt; 0.209147916972 + 1.0e-4)</test>
    <test name="Assert integral absolute analytic_error for P1DG-P2 50-layer mesh is less than..." language="python">assert(abs(pvfdr_int_p1dgp2_50layers) &lt; 0.0024399995754 + 1.0e-4)</test>
    <test name="Assert max absolute analytic_error for P1DG-P1DG 10-layer mesh is less than..." language="python">assert(abs(pvfdr_max_p1dgp1dg_10layers) &lt; 0.325830840312 + 1.0e-4)</test>
    <test name="Assert integral absolute analytic_error for P1DG-P1DG 10-layer mesh is less than..." language="python">assert(abs(pvfdr_int_p1dgp1dg_10layers) &lt; 0.012906661303 + 1.0e-4)</test>
    <test name="Assert max absolute analytic_error for P1DG-P1DG 20-layer mesh is less than..." language="python">assert(abs(pvfdr_max_p1dgp1dg_20layers) &lt; 0.321676734528 + 1.0e-4)</test>
    <test name="Assert integral absolute analytic_error for P1DG-P1DG 20-layer mesh is less than..." language="python">assert(abs(pvfdr_int_p1dgp1dg_20layers) &lt; 0.0067322676911 + 1.0e-4)</test>
    <test name="Assert max absolute analytic_error for P1DG-P1DG 50-layer mesh is less than..." language="python">assert(abs(pvfdr_max_p1dgp1dg_50layers) &lt; 0.164121886928 + 2.0e-1)</test>
    <test name="Assert integral absolute analytic_error for P1DG-P1DG 50-layer mesh is less than..." language="python">assert(abs(pvfdr_int_p1dgp1dg_50layers) &lt; 0.00323589915128 + 1.0e-4)</test>
    <test name="phase 1 for P1DG-P1 10-layer mesh has max saturation in [0.0, 1.0] with tolerance 1.0e-08" language="python">assert abs(s1_max_p1dgp1_10layers - 0.5) &lt; (0.5 + 1.0e-03)</test>
    <test name="phase 1 for P1DG-P1 10-layer mesh has min saturation in [0.0, 1.0] with tolerance 1.0e-08" language="python">assert abs(s1_min_p1dgp1_10layers - 0.5) &lt; (0.5 + 1.0e-03)</test>
    <test name="phase 1 for P1DG-P1 20-layer mesh has max saturation in [0.0, 1.0] with tolerance 1.0e-08" language="python">assert abs(s1_max_p1dgp1_20layers - 0.5) &lt; (0.5 + 1.0e-03)</test>
    <test name="phase 1 for P1DG-P1 20-layer mesh has min saturation in [0.0, 1.0] with tolerance 1.0e-08" language="python">assert abs(s1_min_p1dgp1_20layers - 0.5) &lt; (0.5 + 1.0e-03)</test>
    <test name="phase 1 for P1DG-P1 50-layer mesh has max saturation in [0.0, 1.0] with tolerance 1.0e-08" language="python">assert abs(s1_max_p1dgp1_50layers - 0.5) &lt; (0.5 + 1.0e-03)</test>
    <test name="phase 1 for P1DG-P1 50-layer mesh has min saturation in [0.0, 1.0] with tolerance 1.0e-08" language="python">assert abs(s1_min_p1dgp1_50layers - 0.5) &lt; (0.5 + 1.0e-03)</test>
    <test name="phase 2 for P1DG-P1 10-layer mesh has max saturation in [0.0, 1.0] with tolerance 1.0e-08" language="python">assert abs(s2_max_p1dgp1_10layers - 0.5) &lt; (0.5 + 1.0e-03)</test>
    <test name="phase 2 for P1DG-P1 10-layer mesh has min saturation in [0.0, 1.0] with tolerance 1.0e-08" language="python">assert abs(s2_min_p1dgp1_10layers - 0.5) &lt; (0.5 + 1.0e-03)</test>
    <test name="phase 2 for P1DG-P1 20-layer mesh has max saturation in [0.0, 1.0] with tolerance 1.0e-08" language="python">assert abs(s2_max_p1dgp1_20layers - 0.5) &lt; (0.5 + 1.0e-03)</test>
    <test name="phase 2 for P1DG-P1 20-layer mesh has min saturation in [0.0, 1.0] with tolerance 1.0e-08" language="python">assert abs(s2_min_p1dgp1_20layers - 0.5) &lt; (0.5 + 1.0e-03)</test>
    <test name="phase 2 for P1DG-P1 50-layer mesh has max saturation in [0.0, 1.0] with tolerance 1.0e-08" language="python">assert abs(s2_max_p1dgp1_50layers - 0.5) &lt; (0.5 + 1.0e-03)</test>
    <test name="phase 2 for P1DG-P1 50-layer mesh has min saturation in [0.0, 1.0] with tolerance 1.0e-08" language="python">assert abs(s2_min_p1dgp1_50layers - 0.5) &lt; (0.5 + 1.0e-03)</test>
    <test name="phase 1 for P1DG-P2 10-layer mesh has max saturation in [0.0, 1.0] with tolerance 1.0e-08" language="python">assert abs(s1_max_p1dgp2_10layers - 0.5) &lt; (0.5 + 1.0e-03)</test>
    <test name="phase 1 for P1DG-P2 10-layer mesh has min saturation in [0.0, 1.0] with tolerance 1.0e-08" language="python">assert abs(s1_min_p1dgp2_10layers - 0.5) &lt; (0.5 + 1.0e-03)</test>
    <test name="phase 1 for P1DG-P2 20-layer mesh has max saturation in [0.0, 1.0] with tolerance 1.0e-08" language="python">assert abs(s1_max_p1dgp2_20layers - 0.5) &lt; (0.5 + 1.0e-03)</test>
    <test name="phase 1 for P1DG-P2 20-layer mesh has min saturation in [0.0, 1.0] with tolerance 1.0e-08" language="python">assert abs(s1_min_p1dgp2_20layers - 0.5) &lt; (0.5 + 1.0e-03)</test>
    <test name="phase 1 for P1DG-P2 50-layer mesh has max saturation in [0.0, 1.0] with tolerance 1.0e-08" language="python">assert abs(s1_max_p1dgp2_50layers - 0.5) &lt; (0.5 + 1.0e-03)</test>
    <test name="phase 1 for P1DG-P2 50-layer mesh has min saturation in [0.0, 1.0] with tolerance 1.0e-08" language="python">assert abs(s1_min_p1dgp2_50layers - 0.5) &lt; (0.5 + 1.0e-03)</test>
    <test name="phase 2 for P1DG-P2 10-layer mesh has max saturation in [0.0, 1.0] with tolerance 1.0e-08" language="python">assert abs(s2_max_p1dgp2_10layers - 0.5) &lt; (0.5 + 1.0e-03)</test>
    <test name="phase 2 for P1DG-P2 10-layer mesh has min saturation in [0.0, 1.0] with tolerance 1.0e-08" language="python">assert abs(s2_min_p1dgp2_10layers - 0.5) &lt; (0.5 + 1.0e-03)</test>
    <test name="phase 2 for P1DG-P2 20-layer mesh has max saturation in [0.0, 1.0] with tolerance 1.0e-08" language="python">assert abs(s2_max_p1dgp2_20layers - 0.5) &lt; (0.5 + 1.0e-03)</test>
    <test name="phase 2 for P1DG-P2 20-layer mesh has min saturation in [0.0, 1.0] with tolerance 1.0e-08" language="python">assert abs(s2_min_p1dgp2_20layers - 0.5) &lt; (0.5 + 1.0e-03)</test>
    <test name="phase 2 for P1DG-P2 50-layer mesh has max saturation in [0.0, 1.0] with tolerance 1.0e-08" language="python">assert abs(s2_max_p1dgp2_50layers - 0.5) &lt; (0.5 + 1.0e-02)</test>
    <test name="phase 2 for P1DG-P2 50-layer mesh has min saturation in [0.0, 1.0] with tolerance 1.0e-08" language="python">assert abs(s2_min_p1dgp2_50layers - 0.5) &lt; (0.5 + 1.0e-03)</test>
    <test name="phase 1 for P1DG-P1DG 10-layer mesh has max saturation in [0.0, 1.0] with tolerance 1.0e-08" language="python">assert abs(s1_max_p1dgp1dg_10layers - 0.5) &lt; (0.5 + 1.0e-03)</test>
    <test name="phase 1 for P1DG-P1DG 10-layer mesh has min saturation in [0.0, 1.0] with tolerance 1.0e-08" language="python">assert abs(s1_min_p1dgp1dg_10layers - 0.5) &lt; (0.5 + 1.0e-03)</test>
    <test name="phase 1 for P1DG-P1DG 20-layer mesh has max saturation in [0.0, 1.0] with tolerance 1.0e-08" language="python">assert abs(s1_max_p1dgp1dg_20layers - 0.5) &lt; (0.5 + 1.0e-03)</test>
    <test name="phase 1 for P1DG-P1DG 20-layer mesh has min saturation in [0.0, 1.0] with tolerance 1.0e-08" language="python">assert abs(s1_min_p1dgp1dg_20layers - 0.5) &lt; (0.5 + 1.0e-03)</test>
    <test name="phase 1 for P1DG-P1DG 50-layer mesh has max saturation in [0.0, 1.0] with tolerance 1.0e-08" language="python">assert abs(s1_max_p1dgp1dg_50layers - 0.5) &lt; (0.5 + 1.0e-03)</test>
    <test name="phase 1 for P1DG-P1DG 50-layer mesh has min saturation in [0.0, 1.0] with tolerance 1.0e-08" language="python">assert abs(s1_min_p1dgp1dg_50layers - 0.5) &lt; (0.5 + 1.0e-03)</test>
    <test name="phase 2 for P1DG-P1DG 10-layer mesh has max saturation in [0.0, 1.0] with tolerance 1.0e-08" language="python">assert abs(s2_max_p1dgp1dg_10layers - 0.5) &lt; (0.5 + 1.0e-03)</test>
    <test name="phase 2 for P1DG-P1DG 10-layer mesh has min saturation in [0.0, 1.0] with tolerance 1.0e-08" language="python">assert abs(s2_min_p1dgp1dg_10layers - 0.5) &lt; (0.5 + 1.0e-03)</test>
    <test name="phase 2 for P1DG-P1DG 20-layer mesh has max saturation in [0.0, 1.0] with tolerance 1.0e-08" language="python">assert abs(s2_max_p1dgp1dg_20layers - 0.5) &lt; (0.5 + 1.0e-03)</test>
    <test name="phase 2 for P1DG-P1DG 20-layer mesh has min saturation in [0.0, 1.0] with tolerance 1.0e-08" language="python">assert abs(s2_min_p1dgp1dg_20layers - 0.5) &lt; (0.5 + 1.0e-03)</test>
    <test name="phase 2 for P1DG-P1DG 50-layer mesh has max saturation in [0.0, 1.0] with tolerance 1.0e-08" language="python">assert abs(s2_max_p1dgp1dg_50layers - 0.5) &lt; (0.5 + 1.0e-02)</test>
    <test name="phase 2 for P1DG-P1DG 50-layer mesh has min saturation in [0.0, 1.0] with tolerance 1.0e-08" language="python">assert abs(s2_min_p1dgp1dg_50layers - 0.5) &lt; (0.5 + 1.0e-03)</test>
    <test name="Check max of sum of saturations for P1DG-P1 10-layer mesh is 1.0 with tolerance 1.0e-08" language="python">assert abs(s_max_p1dgp1_10layers - 1.0) &lt; 1.0e-05</test>
    <test name="Check min of sum of saturations for P1DG-P1 10-layer mesh is 1.0 with tolerance 1.0e-08" language="python">assert abs(s_min_p1dgp1_10layers - 1.0) &lt; 1.0e-05</test>
    <test name="Check max of sum of saturations for P1DG-P1 20-layer mesh is 1.0 with tolerance 1.0e-08" language="python">assert abs(s_max_p1dgp1_20layers - 1.0) &lt; 1.0e-03</test>
    <test name="Check min of sum of saturations for P1DG-P1 20-layer mesh is 1.0 with tolerance 1.0e-08" language="python">assert abs(s_min_p1dgp1_20layers - 1.0) &lt; 1.0e-03</test>
    <test name="Check max of sum of saturations for P1DG-P1 50-layer mesh is 1.0 with tolerance 1.0e-08" language="python">assert abs(s_max_p1dgp1_50layers - 1.0) &lt; 1.0e-03</test>
    <test name="Check min of sum of saturations for P1DG-P1 50-layer mesh is 1.0 with tolerance 1.0e-08" language="python">assert abs(s_min_p1dgp1_50layers - 1.0) &lt; 1.0e-03</test>
    <test name="Check max of sum of saturations for P1DG-P2 10-layer mesh is 1.0 with tolerance 1.0e-08" language="python">assert abs(s_max_p1dgp2_10layers - 1.0) &lt; 1.0e-03</test>
    <test name="Check min of sum of saturations for P1DG-P2 10-layer mesh is 1.0 with tolerance 1.0e-08" language="python">assert abs(s_min_p1dgp2_10layers - 1.0) &lt; 1.0e-03</test>
    <test name="Check max of sum of saturations for P1DG-P2 20-layer mesh is 1.0 with tolerance 1.0e-08" language="python">assert abs(s_max_p1dgp2_20layers - 1.0) &lt; 1.0e-03</test>
    <test name="Check min of sum of saturations for P1DG-P2 20-layer mesh is 1.0 with tolerance 1.0e-08" language="python">assert abs(s_min_p1dgp2_20layers - 1.0) &lt; 1.0e-03</test>
    <test name="Check max of sum of saturations for P1DG-P2 50-layer mesh is 1.0 with tolerance 1.0e-08" language="python">assert abs(s_max_p1dgp2_50layers - 1.0) &lt; 1.0e-02</test>
    <test name="Check min of sum of saturations for P1DG-P2 50-layer mesh is 1.0 with tolerance 1.0e-08" language="python">assert abs(s_min_p1dgp2_50layers - 1.0) &lt; 1.0e-02</test>
    <test name="Check max of sum of saturations for P1DG-P1DG 10-layer mesh is 1.0 with tolerance 1.0e-08" language="python">assert abs(s_max_p1dgp1dg_10layers - 1.0) &lt; 1.0e-03</test>
    <test name="Check min of sum of saturations for P1DG-P1DG 10-layer mesh is 1.0 with tolerance 1.0e-08" language="python">assert abs(s_min_p1dgp1dg_10layers - 1.0) &lt; 1.0e-03</test>
    <test name="Check max of sum of saturations for P1DG-P1DG 20-layer mesh is 1.0 with tolerance 1.0e-08" language="python">assert abs(s_max_p1dgp1dg_20layers - 1.0) &lt; 1.0e-03</test>
    <test name="Check min of sum of saturations for P1DG-P1DG 20-layer mesh is 1.0 with tolerance 1.0e-08" language="python">assert abs(s_min_p1dgp1dg_20layers - 1.0) &lt; 1.0e-03</test>
    <test name="Check max of sum of saturations for P1DG-P1DG 50-layer mesh is 1.0 with tolerance 1.0e-08" language="python">assert abs(s_max_p1dgp1dg_50layers - 1.0) &lt; 1.0e-01</test>
    <test name="Check min of sum of saturations for P1DG-P1DG 50-layer mesh is 1.0 with tolerance 1.0e-08" language="python">assert abs(s_min_p1dgp1dg_50layers - 1.0) &lt; 1.0e-01</test>
  </pass_tests>
  <warn_tests/>
</testproblem>
